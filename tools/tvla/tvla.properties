######################
# General properties #
######################
# Turns off most of the runtime printouts (the rest is sent to the log stream).
tvla.terse = false

# If true, various debug information is printed.
tvla.debug = false

# If true, various constraints-related information is printed.
tvla.coerce.debug = false

# Determines whether warnings should be emitted that could possibly terminate the run.
tvla.emitWarnings = true

# Specify true to see the exception stack-trace of thrown exceptions (useful mainly for debugging TVLA).
tvla.printExceptionStackTrace = false

# Allows to experiment with different core implementations.
# Possible values are :
# base - the original TVLA 0.91 implementation
# functional - an optimized implementation based on functional maps
tvla.implementation = base

# Determines whether to generate automatic constraints.
tvla.generateAutomaticConstraints = true

# If this option is true the nodes are merged if they are not different in a
# definite value of at least one abstraction predicate.
tvla.blur.threeWay = true

# If true, a file with the .cpp.tvp suffix is written, containing the
# result of applying the C preprocessor to the input file.
tvla.dumpPreprocessedTvp = false

# If true, a file with the .cpp.tvs suffix is written, containing the
# result of applying the C preprocessor to the input file.
tvla.dumpPreprocessedTvs = false

#####################
# Parser properties #
#####################
tvla.parser.searchPath = ;
#tvla.parser.externalMacros =


##################
# Log properties #
##################
# The name of the file to which log information is written.
# If the value is null then log information is written to the console.
tvla.log.logFileName = null

# If true, statistics specific to the chosen implementation is emitted.
tvla.log.implementationSpecificStatistics = false

# If true, the properties are added to the log output.
tvla.log.addPropertiesToLog = false

# If true, system properties are added to the log.
tvla.log.addSystemPropertiesToLog = false

# If true then statistical information about predicate tables
# is computed.
tvla.log.detailedPredicateStatistics = false

# If true, all the canonic names created by the analysis are stored
# in a set and their information is printed at the end of the analysis.
tvla.log.canonicNamesStatistics = false

# If true, all the canonic names created by the analysis are dumped.
tvla.log.dumpCanonicNames = false

# If true, then statistics will be emitted every k structures, where k
# is determined by the tvla.spaceStatistics.every property.
tvla.log.continuousStatisticsReports = false


#####################
# Engine properties #
#####################
# If true, an attempt to resolve the engine type is made by
# checking file extensions.
tvla.engine.autoResolveType = true

# Determines the type of engine used for analysis. Possible values are:
# tvla - TVLA-classic engine.
# tvmc - TVMC (Three-Valued Model Checker) Multithreading Analysis engine.
# ddfs - Enable double-DFS multithreading engine.
# pasta - Procedure transition sysytem
tvla.engine.type = tvla

# Determines the order of operations computed by an action.
# f - Focus, c - Coerce, p - Precondition, u - Update, b - Blur.
tvla.engine.actionOrder = fcpucb

# Causes the analysis to finish when Coerce finds a constraint breach
# after Update was applied.
tvla.engine.breakIfCoerceAfterUpdateFailed = true

# If true, structures with messages are not propagated
# on (but do appear in the output).
tvla.engine.freezeStructuresWithMessages = true

# Determines the type of join method.
# Possible values are:
# rel  - structures are compared for isomorphism before joining them to a set.
# ind  - structures are merged, unless they differ by nullary abstraction predicate values.
# part - structures are merged if they differ only by non-abstraction predicate values.
# conc - structures are merged without any abstraction.
tvla.joinType = rel

# Limits the number of structures. A negative value can be used to remove the limit.
# This is equivalent to the -ms command-line option.
tvla.engine.maxStructures = -1

# Limits the number of messages. A negative value can be used to remove the limit.
# This is equivalent to the -mm command-line option.
tvla.engine.maxMessages = 0

# Determines how often to dump intermediate structures.
tvla.engine.dumpEvery = -1

# How often the engine should attempt to do garbage-collection (#structures).
# Possible values are integers greater than 0.
tvla.engine.gcEvery = 10000

# How often the engine should print statistics (#structures).
# Possible values are integers greater than 0.
tvla.engine.statisticsEvery = 10000

# Determines how often state space statistics is conducted.
tvla.spaceStatistics.every = 10000

########################
# Decomposition Engine #
########################

# Enables/disables incremental transformers
tvla.decompose.incremental = true

######################
# Incremental Engine #
######################

# Enable incremental Coerce
tvla.engine.incremental.enable = true

# Check increment delta size and use heuristic to decide between incremental and full Coerce
tvla.engine.incremental.checkSize = true

# Calculate increment when new nodes were added to the structure
tvla.engine.incremental.incrementAddedNodes = false

# Randomly skip calculation of rarely changed constraint. This improves
# performance, but may lead to less precise results. Works well in practice, though.
tvla.engine.guessUnchangedConstraints = false


##################
# CFG properties #
##################
# If true then backward analysis is performed. All edges are reversed and the
# initial structures are stored in the exit node.
tvla.cfg.backwardAnalysis = false

# Determines which locations save structures after they are joined.
# Possible values are:
# back - at every back edge of the control graph (approximatly once in every loop).
# ext  - at every beginning of an extended block, i.e., at every merge point of the control graph.
# all  - at every program location.
tvla.cfg.saveLocations = all

# If true, actions are evaluated in post-order.
tvla.cfg.postOrder = false


#####################################
# Abstraction refinement properties #
#####################################
# Is abstraction refinement enabled at all?
tvla.absRef.refine = false

# Should we construct initial structures using the DSC on first run?
tvla.absRef.constructInitialStructures = false

# Name of file (without the extension) containing
# the spec of the data-structure constructor.
tvla.absRef.dataStructureConstructor =

# Name of file (without the extension) containing
# the spec of the empty structure.
tvla.absRef.emptyStructureTVS =

# Send some flow information to the Logger?
tvla.absRef.debug = false

# Send more flow information to the Logger?
tvla.absRef.verbose = false


###########################
# Differencing properties #
###########################
# Is differencing enabled at all?
tvla.differencing.difference = true

# Apply differencing when no update formula is supplied?
tvla.differencing.differenceIdForms = true

# Re-generate update formula wherever an update formulae is supplied
# (and ignore the supplied update formula)?
tvla.differencing.differenceNonIdForms = false

# Send some flow information to the Logger?
tvla.differencing.debug = false

# expandedFuture: every F[phi] formula gets expanded into
# phi ? !Delta-[phi] : Delta+[phi].  This is as in ESOP'03.
# propagatedFuture: only the top-level formulas (those
# defining instrumentation predicates) are processed as above.
# Others are propagated, e.g.: F[phi | psi] = F[phi] | F[psi].
tvla.differencing.implementation = expandedFuture

# If expandPredicateFormulaFuture is true, then expand the future formula,
# as in the ESOP'03 paper.  Otherwise, perform the expansion for all formula
# types with the exception of PredicateFormula.  For those, simply use the
# update formula returned by lookup.
tvla.differencing.expandPredicateFormulaFuture = false

# If set, there will be only one warning about universe changing actions (those
# containing new, retain, or clone formulas).  If cleared, this will be done
# once for each such action.
tvla.differencing.warnAboutUniverseChangingActionsOnce = true

# If set, differencing will throw an exception when it identifies non-unit
# changes to binary core predicates (i.e., changes that add or remove more
# than one edge at a time).
tvla.differencing.warnAboutNonUnitChanges = true

# Use simplifying constructors everywhere except at the top-level of update formulae?
tvla.differencing.simplify = true

# Simplify top-level update formulae, as well?
tvla.differencing.simplifyUpdate = true

# Use tight versions of deltas (see docs on differencing)?
tvla.differencing.tight = false

# Check if the defining formula of an instrumentation predicate matches
# a delta (and use the predicate instead of the computed delta for precision)?
tvla.differencing.substituteDeltas = true

# Log main steps of differencing in a file?
tvla.differencing.logging = false


##############################
# Formula-related properties #
##############################
# Assume that all structures are non-empty in simplification?
# Important for Exists, Forall, and TC formulae.
tvla.simplify.nonEmptyStructs = false

# Try renaming bound variables when testing for formula equality?
# Keeping this as a flag for now, so we can compare cost and results.
tvla.formulae.alphaRenamingEquals = true


#################################
# Output directories properties #
#################################

# This section determines the directories in which the output files
# are written into.
# If output file are specified via command line argument,
# then these properties are not used.

# Determines whether the output is written into the
# directories specified by the properties file.
# If output file are specified via command line argument,
# then this property is automatically set to false
tvla.output.redirectToDirectory = false

# The output directory is comprised of 2 optional parts
# absoluteDirectory\subDirectory
# 1. absoluteDirectory - allows to specify the root of the
#    output drectory as:
#       ".", the current directory;
#       "null", the tvp input file direcotry;
#       any  absolute directory
# 2. subDirectory - subdirectory of absolute directory

# The absolute directory in which the output subrectory is written into.
# If the value is null, it is set to the directory in which the input
# file is located.
tvla.output.absoluteDirectory = null

# The subdirectory of absoluteDirectory into which the output files are written.
# If the value is null,  then output files are written to the directory
# in which the input file is located.
tvla.output.subDirectory = null

# Determines whether multiple files of the same type are generated.
# Currently, only used by PASTA to generate a unique output file
# for every procedure
tvla.output.multipleOutputFiles = false

# The root output file when mutliple output files are generated.
# The root file contains all the debug information and the CFGs of
# all the procedures
# If the value is null then file name is derived from the name of the program.
tvla.output.root = root

# The subdirectory of the output directory that the tvs output files are
# written into.
# If the value is null then output files are written to the output direcotry
tvla.tvs.subDirectory = tvs

# The subdirectory of the output directory that the dot output files are
# written into.
# If the value is null then output files are written to the output direcotry
tvla.dot.subDirectory = dot

# The subdirectory of the output directory that the log file is
# written into.
# If the value is null then output files are written to the output direcotry
tvla.log.logSubDirectory = log


##################
# DOT properties #
##################
# A space separated list of pairs associating predicates or sets of predicates with their display properties.
# The syntax is <id>:{<properties>}, where <id> is either a predicate or a set,
# and  <properties> is a comma separated list of properties from the set pointer, 0, 1/2 and 1.
# For example, PVar:{pointer,1/2,1} specifies that all predicates in the PVar set should be displayed
# using the tvla.dot.pointerAttributes display properties and display only unknown and true values.
#tvla.predicateDisplay =

# Determines whether to produce a .dt file at the end of the analysis.
tvla.dot.enabled = true
# Determines the suffix of the dot file.
tvla.dot.fileSuffix = dt

# Determines the name of the DOT output file.
tvla.dot.outputFile = null

# Determines the name of the messages output file
tvla.dot.messagesFile = null

# Should meaningful titles be produced?  Dotty may fail
# if program tvp files have symbols, such as -.
tvla.dot.meaningfulTitles = false

# If true then the output is a landscape graph.
tvla.dot.rotate = false

# Controls the display style of nullary predicates.
# Possible values are :
# table     values are presented in a table (most compact style),
# diamonds  every values is displayed inside a diamond shaped node,
# matrix    values are displayed in a text node table.
tvla.dot.nullaryStyle = table

# DOT attributes for each page.
tvla.dot.pageAttributes = size="7.5,10";center=true;fonstsize=6;

# DOT attributes for the CFG.
tvla.dot.cfgAttributes = size="7.5,10";center=true;fontsize=6;node [fontsize=12, style=filled];edge [fontsize=12]; nodesep=0.1; ranksep=0.1;

# DOT attributes for each structure.
tvla.dot.structureAttributes = ranksep=0.2;nodesep=0.2;edge [fontsize=10];node [fontsize=10];

# DOT attributes for summary nodes.
#tvla.dot.predicateAttributes.sm = style=dotted
tvla.dot.predicateAttributes.sm = peripheries=2

# DOT attributes for maybe-active nodes.
tvla.dot.predicateAttributes.ac = color=green

# DOT attributes for outside nodes.
tvla.dot.predicateAttributes.outside = color=orange

# DOT attributes for thread nodes.
tvla.dot.predicateAttributes.isthread = shape=hexagon

# DOT attributes for predicates that are displayed as pointers.
tvla.dot.pointerAttributes = shape=plaintext, style=bold, fontsize=16


#########################
# TVS output properties #
#########################
# Determines the name of the TVS output file.
tvla.tvs.outputFile = null

# Determines the name of the messages output file
tvla.tvs.messagesFile = null

# Determines whether to produce a .tvs file at the end of the analysis.
tvla.tvs.enabled = true



#########################
# XML output properties #
#########################
# Determines the name of the TVS output file.
tvla.xml.outputFile = null

# Determines the name of the messages output file
tvla.xml.messagesFile = null

# Determines whether to produce a .tvs file at the end of the analysis.
tvla.xml.enabled = false

# Determines the suffix of the xml file.
tvla.xml.fileSuffix = xml

#########################################
# Transition Relation output properties #
#########################################

# Determines whether to produce a transition relation file at the end of the analysis.
tvla.tr.enabled = false

# Determines the part of the transition relation to print out:
# full          - The entire graph.
# reachMessages - The subgraph containing only states that
#                 can reach a state with an associated message.
# trace         - The shortest path a state with an associated
#                 message, i.e., an abstract error trace.
tvla.tr.project = trace

# If enabled, determines whether the transition relation will be generated in a tvs format
tvla.tr.tvs.enabled =  false

# If enabled, determines whether the transition relation will be generated in a dot format
tvla.tr.dot.enabled =  false

# Determines the name of the transition relation output file
# in tvs format
tvla.tr.tvs.outputFile = null

# Determines the name of the transition relation output file
# in dot format
tvla.tr.dot.outputFile = null

# Determines the name of the transition relation output file
# in xml format
tvla.tr.xml.outputFile = null


############################
#    Pasta Engine Setup    #
############################
# maximal number of events to process
tvla.pasta.maxEvents = -1
