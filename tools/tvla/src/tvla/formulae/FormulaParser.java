
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Nov 04 15:45:27 GMT+02:00 2007
//----------------------------------------------------

package tvla.formulae;

import tvla.logic.*;
import tvla.transitionSystem.*;
import tvla.util.*;
import com.ibm.dk.dps.io.CPreProcessorStream;
import java.io.*;
import java.util.*;

import tvla.language.TVP.*;

/** CUP v0.10k generated parser.
  * @version Sun Nov 04 15:45:27 GMT+02:00 2007
  */
public class FormulaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FormulaParser() {super();}

  /** Constructor which sets the default scanner. */
  public FormulaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\004\012\000\002\006" +
    "\002\000\002\006\005\000\002\027\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\035\005\000\002" +
    "\034\003\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\007\003" +
    "\000\002\056\013\000\002\005\003\000\002\047\002\000" +
    "\002\047\004\000\002\047\004\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\016" +
    "\003\000\002\016\005\000\002\017\002\000\002\017\003" +
    "\000\002\015\002\000\002\015\005\000\002\020\002\000" +
    "\002\020\005\000\002\036\012\000\002\037\014\000\002" +
    "\040\006\000\002\026\004\000\002\061\002\000\002\061" +
    "\004\000\002\061\010\000\002\060\002\000\002\060\004" +
    "\000\002\045\002\000\002\045\006\000\002\046\003\000" +
    "\002\046\003\000\002\046\005\000\002\046\005\000\002" +
    "\032\013\000\002\051\002\000\002\051\005\000\002\051" +
    "\004\000\002\055\013\000\002\044\003\000\002\044\003" +
    "\000\002\044\004\000\002\044\004\000\002\054\010\000" +
    "\002\054\012\000\002\052\002\000\002\052\004\000\002" +
    "\012\012\000\002\023\002\000\002\023\004\000\002\023" +
    "\003\000\002\024\002\000\002\024\004\000\002\024\003" +
    "\000\002\022\002\000\002\022\004\000\002\025\002\000" +
    "\002\025\004\000\002\011\003\000\002\010\003\000\002" +
    "\010\004\000\002\013\013\000\002\014\010\000\002\050" +
    "\002\000\002\050\004\000\002\053\006\000\002\031\003" +
    "\000\002\031\003\000\002\030\013\000\002\003\004\000" +
    "\002\021\007\000\002\021\007\000\002\021\003\000\002" +
    "\021\016\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\004\000\002\021\011" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\006\000\002\021\011\000\002\021\011\000\002" +
    "\021\003\000\002\043\003\000\002\043\005\000\002\042" +
    "\002\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\030\006\017\014\021\015\007\016\012\021" +
    "\011\022\006\023\014\030\015\031\020\032\025\033\013" +
    "\001\002\000\010\024\136\025\137\033\140\001\002\000" +
    "\014\004\135\017\045\020\043\021\046\022\044\001\002" +
    "\000\004\052\uffad\001\002\000\004\033\131\001\002\000" +
    "\004\052\103\001\002\000\004\052\uffae\001\002\000\004" +
    "\033\070\001\002\000\030\006\017\014\021\015\007\016" +
    "\012\021\011\022\006\023\014\030\015\031\020\032\025" +
    "\033\013\001\002\000\030\006\017\014\021\015\007\016" +
    "\012\021\011\022\006\023\014\030\015\031\020\032\025" +
    "\033\013\001\002\000\022\004\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\034\ufff9\041\ufff9\042\ufff9\001\002\000\004" +
    "\002\057\001\002\000\016\024\uffdf\025\uffdf\026\ufffd\027" +
    "\ufffd\033\uffdf\047\054\001\002\000\022\004\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\034\ufff8\041\ufff8\042\ufff8\001" +
    "\002\000\004\033\033\001\002\000\006\026\026\027\027" +
    "\001\002\000\022\004\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\034\uffa8\041\uffa8\042\uffa8\001\002\000\022\004\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\034\uff9a\041\uff9a\042" +
    "\uff9a\001\002\000\022\004\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\034\ufff7\041\ufff7\042\ufff7\001\002\000\004\006" +
    "\030\001\002\000\004\006\030\001\002\000\024\004\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\034\ufffd\036\ufffd\041" +
    "\ufffd\042\ufffd\001\002\000\022\004\uff9e\017\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\034\uff9e\041\uff9e\042\uff9e\001\002\000" +
    "\022\004\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\034\uff9f" +
    "\041\uff9f\042\uff9f\001\002\000\006\006\034\034\uff97\001" +
    "\002\000\012\034\uff99\036\uff99\040\uff99\050\uff99\001\002" +
    "\000\004\034\041\001\002\000\010\034\uff96\036\037\040" +
    "\uff96\001\002\000\004\006\040\001\002\000\012\034\uff98" +
    "\036\uff98\040\uff98\050\uff98\001\002\000\030\006\017\014" +
    "\021\015\007\016\012\021\011\022\006\023\014\030\015" +
    "\031\020\032\025\033\013\001\002\000\022\004\uffa9\017" +
    "\045\020\043\021\046\022\044\034\uffa9\041\uffa9\042\uffa9" +
    "\001\002\000\030\006\017\014\021\015\007\016\012\021" +
    "\011\022\006\023\014\030\015\031\020\032\025\033\013" +
    "\001\002\000\030\006\017\014\021\015\007\016\012\021" +
    "\011\022\006\023\014\030\015\031\020\032\025\033\013" +
    "\001\002\000\030\006\017\014\021\015\007\016\012\021" +
    "\011\022\006\023\014\030\015\031\020\032\025\033\013" +
    "\001\002\000\030\006\017\014\021\015\007\016\012\021" +
    "\011\022\006\023\014\030\015\031\020\032\025\033\013" +
    "\001\002\000\022\004\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\044\034\uffa5\041\uffa5\042\uffa5\001\002\000\022\004\uffa3" +
    "\017\uffa3\020\043\021\046\022\044\034\uffa3\041\uffa3\042" +
    "\uffa3\001\002\000\022\004\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\034\uffa6\041\uffa6\042\uffa6\001\002\000\022\004" +
    "\uffa4\017\uffa4\020\uffa4\021\046\022\044\034\uffa4\041\uffa4" +
    "\042\uffa4\001\002\000\010\024\uffda\025\uffda\033\uffda\001" +
    "\002\000\004\006\034\001\002\000\006\036\037\050\056" +
    "\001\002\000\010\024\uffde\025\uffde\033\uffde\001\002\000" +
    "\004\002\001\001\002\000\022\004\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\034\uffa2\041\uffa2\042\uffa2\001\002\000" +
    "\016\017\045\020\043\021\046\022\044\034\063\041\062" +
    "\001\002\000\030\006\017\014\021\015\007\016\012\021" +
    "\011\022\006\023\014\030\015\031\020\032\025\033\013" +
    "\001\002\000\022\004\uffa0\017\uffa0\020\uffa0\021\uffa0\022" +
    "\uffa0\034\uffa0\041\uffa0\042\uffa0\001\002\000\014\017\045" +
    "\020\043\021\046\022\044\042\065\001\002\000\030\006" +
    "\017\014\021\015\007\016\012\021\011\022\006\023\014" +
    "\030\015\031\020\032\025\033\013\001\002\000\014\017" +
    "\045\020\043\021\046\022\044\034\067\001\002\000\022" +
    "\004\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\034\uffa1\041" +
    "\uffa1\042\uffa1\001\002\000\004\006\030\001\002\000\004" +
    "\036\072\001\002\000\004\006\030\001\002\000\004\034" +
    "\074\001\002\000\004\033\075\001\002\000\004\006\030" +
    "\001\002\000\004\036\077\001\002\000\004\006\030\001" +
    "\002\000\004\034\101\001\002\000\030\006\017\014\021" +
    "\015\007\016\012\021\011\022\006\023\014\030\015\031" +
    "\020\032\025\033\013\001\002\000\022\004\uffa7\017\045" +
    "\020\043\021\046\022\044\034\uffa7\041\uffa7\042\uffa7\001" +
    "\002\000\004\037\104\001\002\000\030\006\017\014\021" +
    "\015\007\016\012\021\011\022\006\023\014\030\015\031" +
    "\020\032\025\033\013\001\002\000\014\017\045\020\043" +
    "\021\046\022\044\042\106\001\002\000\004\006\107\001" +
    "\002\000\004\006\111\001\002\000\010\006\112\033\115" +
    "\037\114\001\002\000\010\006\uffef\033\uffef\037\uffef\001" +
    "\002\000\014\022\ufff5\025\ufff5\034\ufff5\040\ufff5\046\ufff5" +
    "\001\002\000\012\022\117\025\120\040\130\046\122\001" +
    "\002\000\006\006\034\040\uff97\001\002\000\010\006\112" +
    "\033\115\037\114\001\002\000\012\022\117\025\120\034" +
    "\121\046\122\001\002\000\010\006\112\033\115\037\114" +
    "\001\002\000\010\006\112\033\115\037\114\001\002\000" +
    "\014\022\ufff0\025\ufff0\034\ufff0\040\ufff0\046\ufff0\001\002" +
    "\000\010\006\112\033\115\037\114\001\002\000\014\022" +
    "\ufff2\025\ufff2\034\ufff2\040\ufff2\046\ufff2\001\002\000\014" +
    "\022\ufff3\025\ufff3\034\ufff3\040\ufff3\046\ufff3\001\002\000" +
    "\014\022\ufff1\025\120\034\ufff1\040\ufff1\046\122\001\002" +
    "\000\004\040\127\001\002\000\014\022\ufff4\025\ufff4\034" +
    "\ufff4\040\ufff4\046\ufff4\001\002\000\022\004\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\034\uffac\041\uffac\042\uffac\001" +
    "\002\000\006\006\034\034\uff97\001\002\000\004\034\133" +
    "\001\002\000\030\006\017\014\021\015\007\016\012\021" +
    "\011\022\006\023\014\030\015\031\020\032\025\033\013" +
    "\001\002\000\022\004\uffaa\017\045\020\043\021\046\022" +
    "\044\034\uffaa\041\uffaa\042\uffaa\001\002\000\004\002\uffab" +
    "\001\002\000\004\033\150\001\002\000\004\033\143\001" +
    "\002\000\006\006\034\034\uff97\001\002\000\004\034\142" +
    "\001\002\000\022\004\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\034\uff9d\041\uff9d\042\uff9d\001\002\000\004\006\030" +
    "\001\002\000\004\036\145\001\002\000\004\006\030\001" +
    "\002\000\004\034\147\001\002\000\022\004\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\022\uff9b\034\uff9b\041\uff9b\042\uff9b\001" +
    "\002\000\004\006\030\001\002\000\004\036\152\001\002" +
    "\000\004\006\030\001\002\000\004\034\154\001\002\000" +
    "\022\004\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\034\uff9c" +
    "\041\uff9c\042\uff9c\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\020\003\015\021\004\026\003\027\021\030" +
    "\022\031\007\033\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\021\060" +
    "\026\003\027\021\030\022\031\007\033\023\001\001\000" +
    "\016\021\057\026\003\027\021\030\022\031\007\033\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\031\001\001\000\004\027\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\042\034\043\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\021\041\026\003\027\021\030\022\031\007" +
    "\033\023\001\001\000\002\001\001\000\016\021\051\026" +
    "\003\027\021\030\022\031\007\033\023\001\001\000\016" +
    "\021\050\026\003\027\021\030\022\031\007\033\023\001" +
    "\001\000\016\021\047\026\003\027\021\030\022\031\007" +
    "\033\023\001\001\000\016\021\046\026\003\027\021\030" +
    "\022\031\007\033\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\021\063\026\003\027\021\030\022\031\007" +
    "\033\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\021\065\026\003\027\021\030\022\031\007\033\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\070\001\001\000\002\001\001\000\004\027\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\075\001" +
    "\001\000\002\001\001\000\004\027\077\001\001\000\002" +
    "\001\001\000\016\021\101\026\003\027\021\030\022\031" +
    "\007\033\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\104\026\003\027\021\030\022\031\007\033" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\107\001\001\000\004\034\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\125" +
    "\043\035\001\001\000\004\034\115\001\001\000\002\001" +
    "\001\000\004\034\124\001\001\000\004\034\123\001\001" +
    "\000\002\001\001\000\004\034\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\131\043" +
    "\035\001\001\000\002\001\001\000\016\021\133\026\003" +
    "\027\021\030\022\031\007\033\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\042\140\043\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\143\001\001\000\002\001\001" +
    "\000\004\027\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\150\001\001\000\002\001\001\000\004" +
    "\027\152\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FormulaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FormulaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FormulaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    static FormulaLex scanner;
    static Pair pair;
    static CPreProcessorStream stream;

    public void report_error(String message, Object info) {
		Logger.println(message + " in line " + stream.getLine(scanner.line_count) + 
				" of file " + stream.getFile(scanner.line_count));
    }

    public static Pair configure(String filename, String path) 
					throws Exception {
		String infileName = filename;
		if (!infileName.endsWith(".formula"))
			infileName = infileName + ".formula";
		stream = new CPreProcessorStream(infileName);
		tvla.language.AddMacrosToPreProcessor.add(stream);
		stream.setSearchPath(path);
		scanner = new FormulaLex(new InputStreamReader(stream));
		new FormulaParser(scanner).parse();
	
		// do cleanups
		scanner = null;
		stream = null;
	
		return pair;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FormulaParser$actions {
  private final FormulaParser parser;

  /** Constructor */
  CUP$FormulaParser$actions(FormulaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FormulaParser$do_action(
    int                        CUP$FormulaParser$act_num,
    java_cup.runtime.lr_parser CUP$FormulaParser$parser,
    java.util.Stack            CUP$FormulaParser$stack,
    int                        CUP$FormulaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FormulaParser$result;

      /* select the action based on the action number */
      switch (CUP$FormulaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // optional_id_list ::= id_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = list; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(32/*optional_id_list*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // optional_id_list ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(32/*optional_id_list*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // id_list ::= id_list COMMA ID 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		  RESULT = list; RESULT.add(id); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(33/*id_list*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // id_list ::= ID 
            {
              List RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(id); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(33/*id_list*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // formula ::= kleene 
            {
              FormulaAST RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		Kleene k = (Kleene)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new ValueFormulaAST(k); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // formula ::= predicate PLUS LP var COMMA var RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 Var v1 = new Var("__v1"); 
		   Var v2 = new Var("__v2"); 
		   RESULT = new TCFormulaAST(l, r, v1, v2, 
					     new PredicateFormulaAST(p, v1, v2));
		
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // formula ::= predicate STAR LP var COMMA var RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 Var v1 = new Var("__v1"); 
		   Var v2 = new Var("__v2"); 
		   RESULT = new CompositeFormulaAST(new EqualityAST(l, r),
					       new TCFormulaAST(l, r, v1, v2, 
							     new PredicateFormulaAST(p, v1, v2)),
					       "OrFormula");
		
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // formula ::= predicate LP optional_id_list RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = new PredicateFormulaAST(p, VarAST.asVariables(args)); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // formula ::= var NEQ var 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT  = new CompositeFormulaAST(new EqualityAST(l, r)); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // formula ::= var EQ var 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT  = new EqualityAST(l, r); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // formula ::= LP formula RP 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = f; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // formula ::= LP formula QMARK formula COLON formula RP 
            {
              FormulaAST RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).right;
		FormulaAST fc = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).right;
		FormulaAST ft = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		FormulaAST ff = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = new IfFormulaAST(fc, ft, ff); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // formula ::= NOT formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // formula ::= formula IFF formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "EquivalenceFormula"); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // formula ::= formula IMPLIES formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f2, new CompositeFormulaAST(f1), "OrFormula"); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // formula ::= formula OR formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "OrFormula"); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // formula ::= formula AND formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "AndFormula"); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // formula ::= TC LP var COMMA var RP LP var COMMA var RP formula 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-9)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-9)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-7)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-7)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).right;
		Var sl = (Var)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).value;
		int srleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		Var sr = (Var)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new TCFormulaAST(l, r, sl, sr, f); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // formula ::= combine 
            {
              FormulaAST RESULT = null;
		int combleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int combright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		CombineAST comb = (CombineAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = comb; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // formula ::= EXISTS LP optional_id_list RP formula 
            {
              FormulaAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new QuantFormulaAST(VarAST.asVariables(list), f, "ExistQuantFormula"); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // formula ::= FORALL LP optional_id_list RP formula 
            {
              FormulaAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new QuantFormulaAST(VarAST.asVariables(list), f, "AllQuantFormula"); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(15/*formula*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // formula_num ::= formula NUMBER 
            {
              Pair RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 FormulaParser.pair = new Pair(f, n); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(1/*formula_num*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // combine ::= binary_op COMBINE LCBR formula COLON ID in set_expr RCBR 
            {
              CombineAST RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = new CombineAST(op, f, id, e); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(22/*combine*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // binary_op ::= AND 
            {
              String RESULT = null;
		 RESULT = "AndFormula"; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(23/*binary_op*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binary_op ::= OR 
            {
              String RESULT = null;
		 RESULT = "OrFormula"; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(23/*binary_op*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // report_message ::= MESSAGE formula IMPLIES message 
            {
              ReportMessageAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		MessageAST m = (MessageAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		RESULT = new ReportMessageAST(f, m); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(41/*report_message*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // report_messages ::= report_messages report_message 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int messleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int messright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		ReportMessageAST mess = (ReportMessageAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		RESULT = prev; RESULT.add(mess); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(38/*report_messages*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // report_messages ::= 
            {
              List RESULT = null;
		RESULT = new ArrayList(); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(38/*report_messages*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // action_use ::= cfg_node ID LP optional_id_list RP cfg_node 
            {
              ActionAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).value;
		int macleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).left;
		int macright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).right;
		String mac = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new ActionAST(label, ActionMacroAST.get(mac).expand(args), next);
		
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(10/*action_use*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // action_def ::= title focus precond report_messages new clone optional_update retain report_messages 
            {
              ActionDefAST RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).right;
		MessageAST t = (MessageAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-7)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).right;
		FormulaAST p = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).right;
		List m = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).right;
		FormulaAST n = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).right;
		FormulaAST c = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		List u = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		FormulaAST r = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		List pm = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new ActionDefAST(t, f, p, m, n, c,  u, r, pm); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(9/*action_def*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // code_part ::= code_part action_use 
            {
              Object RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		Object prev = (Object)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		ActionAST current = (ActionAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 current.generate(); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(6/*code_part*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // code_part ::= action_use 
            {
              Object RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		ActionAST first = (ActionAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 first.generate(); /* parser.entry = first.label; */ 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(6/*code_part*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cfg_node ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = id; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(7/*cfg_node*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // precond ::= PRED formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = f; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(19/*precond*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // precond ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(19/*precond*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // retain ::= RETAIN formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = f; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(16/*retain*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // retain ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(16/*retain*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // clone ::= CLONE 
            {
              FormulaAST RESULT = null;
		 RESULT = new ValueFormulaAST(Kleene.trueKleene); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(18/*clone*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // clone ::= CLONE formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = f; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(18/*clone*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // clone ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(18/*clone*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // new ::= NEW 
            {
              FormulaAST RESULT = null;
		 RESULT = new ValueFormulaAST(Kleene.trueKleene); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(17/*new*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // new ::= NEW formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = f; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(17/*new*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // new ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(17/*new*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // macro ::= ACTION ID LP optional_id_list RP LCBR action_def RCBR 
            {
              MacroAST RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		ActionDefAST def = (ActionDefAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = new ActionMacroAST(name, args, def); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(8/*macro*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // macros ::= macros macro 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		MacroAST single = (MacroAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = list; RESULT.add(single); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(40/*macros*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // macros ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(40/*macros*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asgn ::= LP predicate LP optional_id_list RP RP ASSIGN formula 
            {
              UpdateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new UpdateAST(p, f, VarAST.asVariables(args)); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(42/*asgn*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asgn ::= predicate LP optional_id_list RP ASSIGN formula 
            {
              UpdateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new UpdateAST(p, f, VarAST.asVariables(args)); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(42/*asgn*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asgns ::= asgns asgn_foreach 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		ForeachAST a = (ForeachAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = prev; RESULT.add(a); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(34/*asgns*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asgns ::= asgns asgn 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		UpdateAST a = (UpdateAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = prev; RESULT.add(a); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(34/*asgns*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asgns ::= asgn_foreach 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		ForeachAST a = (ForeachAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(a); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(34/*asgns*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asgns ::= asgn 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		UpdateAST a = (UpdateAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(a); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(34/*asgns*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asgn_foreach ::= FOREACH LP ID in set_expr RP LCBR asgns RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(43/*asgn_foreach*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // optional_update ::= LCBR RCBR 
            {
              List RESULT = null;
		RESULT = new ArrayList(); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(39/*optional_update*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // optional_update ::= LCBR asgns RCBR 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = a; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(39/*optional_update*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // optional_update ::= 
            {
              List RESULT = null;
		RESULT = new ArrayList(); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(39/*optional_update*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // focus_foreach ::= FOREACH LP ID in set_expr RP LCBR focus_formulae RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(24/*focus_foreach*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // focus_formulae ::= focus_formulae COMMA focus_foreach 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		ForeachAST fe = (ForeachAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = prev; RESULT.add(fe); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(36/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // focus_formulae ::= focus_formulae COMMA formula 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = prev; RESULT.add(f); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(36/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // focus_formulae ::= focus_foreach 
            {
              List RESULT = null;
		int feleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		ForeachAST fe = (ForeachAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(fe); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(36/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // focus_formulae ::= formula 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(f); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(36/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // focus ::= FOCUS LCBR focus_formulae RCBR 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = f; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(35/*focus*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // focus ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(35/*focus*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // title ::= TITLE message 
            {
              MessageAST RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		MessageAST str = (MessageAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = str; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(46/*title*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // title ::= 
            {
              MessageAST RESULT = null;
		 RESULT = new MessageStringAST(""); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(46/*title*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // optional_dependency ::= optional_dependency LCBR optional_id_list RCBR ARROW ID 
            {
              PredicatePropertiesAST RESULT = null;
		int odleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).right;
		List lhs = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		String rhs = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 
				RESULT = od;
				RESULT.addFunctionalDependency(lhs,rhs);
			
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(47/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // optional_dependency ::= optional_dependency ID 
            {
              PredicatePropertiesAST RESULT = null;
		int odleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 
				RESULT = od;
				RESULT.addProperty(id); 
			
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(47/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // optional_dependency ::= 
            {
              PredicatePropertiesAST RESULT = null;
		
				RESULT = new PredicatePropertiesAST();
			
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(47/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // predicate ::= ID optional_params 
            {
              PredicateAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = PredicateAST.getPredicateAST(id, params); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(20/*predicate*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cons_rule ::= CONSISTENCY_RULE formula IMPLIES_T formula 
            {
              ConstraintAST RESULT = null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		FormulaAST body = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		FormulaAST head = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new ConstraintAST(body, head); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(30/*cons_rule*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instrum_pred_def ::= INS_PRED ID optional_params LP optional_id_list RP ASSIGN formula optional_dependency show_attr 
            {
              InstrumPredicateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-7)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int odleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 
			    if ((args.size() >= 0) && (args.size() <= 2)) {
				RESULT = new InstrumPredicateAST(p, params, 
								 VarAST.asVariables(args), 
								 f, od, attr);
			    } else {
				throw new RuntimeException("Error predicate " + p + " requires " + 
				       args.size() + 
				       " arguments but only nullary, unary and binary predicates " + 
				       "are supported");
			    }
			 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(29/*instrum_pred_def*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // core_pred_def ::= PRED ID optional_params LP optional_id_list RP optional_dependency show_attr 
            {
              CorePredicateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-3)).value;
		int odleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		
		    if ((args.size() >= 0) && (args.size() <= 2)) {
				RESULT = new CorePredicateAST(p, params, args, args.size(), od, attr);
		    } else {
			throw new RuntimeException("Error predicate " + p + " requires " + 
			       args.size() + 
			       " arguments but only nullary, unary and binary predicates " + 
			       "are supported");
		    }
		 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(28/*core_pred_def*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // optional_params ::= LBR id_list RBR 
            {
              List RESULT = null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = params; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(14/*optional_params*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // optional_params ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(14/*optional_params*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // show_attr ::= LBR optional_show_attr_list RBR 
            {
              Set RESULT = null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = attr; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(11/*show_attr*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // show_attr ::= 
            {
              Set RESULT = null;
		 RESULT = null; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(11/*show_attr*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // optional_show_attr_list ::= show_attr_list 
            {
              Set RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		Set l = (Set)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = l; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(13/*optional_show_attr_list*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // optional_show_attr_list ::= 
            {
              Set RESULT = null;
		 RESULT = new HashSet(); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(13/*optional_show_attr_list*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // show_attr_list ::= show_attr_list COMMA kleene 
            {
              Set RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		Set list = (Set)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		Kleene a = (Kleene)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = list; RESULT.add(a); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(12/*show_attr_list*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // show_attr_list ::= kleene 
            {
              Set RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		Kleene a = (Kleene)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new HashSet(); RESULT.add(a); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(12/*show_attr_list*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decl ::= cons_rule 
            {
              AST RESULT = null;
		int consleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		ConstraintAST cons = (ConstraintAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = cons; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(31/*decl*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decl ::= set_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		SetDefAST def = (SetDefAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = def; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(31/*decl*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decl ::= instrum_pred_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		InstrumPredicateAST def = (InstrumPredicateAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = def; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(31/*decl*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decl ::= core_pred_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		CorePredicateAST def = (CorePredicateAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = def; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(31/*decl*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decls ::= decls decl_foreach 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		ForeachAST f = (ForeachAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = list; RESULT.add(f); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(37/*decls*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decls ::= decls decl 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		AST single = (AST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = list; RESULT.add(single); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(37/*decls*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // decls ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(37/*decls*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decls_done ::= decls 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 
		 for (Iterator i = list.iterator(); i.hasNext(); ) {
		     AST ast = (AST) i.next();
		     if (ast instanceof ForeachAST) {
			ForeachAST foreach = (ForeachAST) ast;
			for (Iterator j = foreach.evaluate().iterator(); j.hasNext(); ) {
			   AST generatedAst = (AST) j.next();
			   generatedAst.generate();
			}
		     } else {
			ast.generate();
		     }
		 }
		 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(3/*decls_done*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl_foreach ::= FOREACH LP ID in set_expr RP LCBR decls RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(44/*decl_foreach*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // in ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 if (!id.equals("in")) 
		parser.report_fatal_error("expected 'in'", null); 
	
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(5/*in*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // set_expr ::= LP set_expr RP 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = e1; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(26/*set_expr*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // set_expr ::= set_expr AND set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new SetAndAST(e1, e2); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(26/*set_expr*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // set_expr ::= set_expr MINUS set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new SetMinusAST(e1, e2); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(26/*set_expr*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // set_expr ::= set_expr PLUS set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new SetPlusAST(e1, e2); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(26/*set_expr*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // set_expr ::= LCBR optional_id_list RCBR 
            {
              SetAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		 RESULT = new SetConstantAST(list); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(26/*set_expr*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // set_expr ::= ID 
            {
              SetAST RESULT = null;
		int setleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		String set = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new SetUseAST(set); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(26/*set_expr*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // set_def ::= SET ID set_expr 
            {
              SetDefAST RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		SetAST elements = (SetAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new SetDefAST(name, new ArrayList(elements.getMembers())) ; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(27/*set_def*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // kleene ::= UNKNOWN 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.unknownKleene; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(25/*kleene*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // kleene ::= FALSE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.falseKleene; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(25/*kleene*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // kleene ::= TRUE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.trueKleene; 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(25/*kleene*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // message ::= message PLUS message 
            {
              MessageAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).right;
		MessageAST l = (MessageAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		MessageAST r = (MessageAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		RESULT = new MessageCompositeAST(l, r); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(45/*message*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // message ::= predicate 
            {
              MessageAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		RESULT = new MessagePredicateAST(p); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(45/*message*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // message ::= STRING 
            {
              MessageAST RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		RESULT = new MessageStringAST(str); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(45/*message*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var ::= ID 
            {
              Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 RESULT = new Var(id); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(21/*var*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // to_print ::= PERCENT PERCENT id_list 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right;
		List p = (List)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).value;
		 AnalysisGraph.activeGraph.setPrintableLocations(p); 
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(4/*to_print*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // to_print ::= 
            {
              Object RESULT = null;

              CUP$FormulaParser$result = new java_cup.runtime.Symbol(4/*to_print*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // tvp ::= decls_done PERCENT PERCENT macros PERCENT PERCENT code_part to_print 
            {
              Object RESULT = null;

              CUP$FormulaParser$result = new java_cup.runtime.Symbol(2/*tvp*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          return CUP$FormulaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= formula_num EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).right;
		Pair start_val = (Pair)((java_cup.runtime.Symbol) CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).value;
		RESULT = start_val;
              CUP$FormulaParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FormulaParser$stack.elementAt(CUP$FormulaParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$FormulaParser$parser.done_parsing();
          return CUP$FormulaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

