package tvla.analysis.relevance;

import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import tvla.util.HashSetFactory;
import tvla.util.PropertiesEx;
import tvla.util.StringUtils;

/**
 * Set of user-specified relevant locations. 
 * Allow user to run relevance-engine on-demand for 
 * a specific set of specified relevant locations.
 * 
 * Assumes the front-end had generated a labels.tab translation 
 * table when compact-labels are used. This is the only way to
 * map a user-query specified in terms of program location into 
 * the compact labels generated by the frontend.
 * 
 * @author Eran Yahav, Ran Shaham
 */
public class RelevanceQueries {

	/** singleton */
	protected static RelevanceQueries theInstance;

	/** The set of user location queries	*/
	private Set relevantLocations = HashSetFactory.make();

	/** singleton
	 * @return the singleton instance 
	 */
	public static RelevanceQueries getInstance() {
		if (theInstance == null)
			theInstance = new RelevanceQueries();
		return theInstance;
	}

	/**
	 * are there any relevant queries defined?
	 * @return true if relevant queries are specified.
	 */
	public boolean hasRelevanceQueries() {
		return !relevantLocations.isEmpty();
	}

	/**
	 * sets user queries according to the specified locations
	 * (useful mainly for debuggin)
	 * @param locations - a string representing locations as: 
	 * (1) a file name containing a list of locations, identified by the @ prefix; 
	 * or (2) an explicit list of locations given at the command line. 
	 */
	public void setUserQueries(String locations) {

		relevantLocations = HashSetFactory.make();

		// load relevant locations from file
		if (locations.charAt(0) == '@') {
			PropertiesEx f = new PropertiesEx("/" + locations.substring(1));

			Enumeration e = f.propertyNames();
			while (e.hasMoreElements()) {
				String rl = (String) e.nextElement();
				String pval = f.getProperty(rl);
				String value = (pval != null) ? pval : "";
				relevantLocations.add(new RelevantLocationQuery(rl, value));
				System.out.println(
					"Relevant location added: " + rl + "=" + value);
			}
		}
		// relevant locations in the command-line
		else {
			List l = StringUtils.breakString(locations, ";");
			Iterator i = l.iterator();
			while (i.hasNext()) {
				String q = (String) i.next();
				theInstance.relevantLocations.add(
					new RelevantLocationQuery(q, ""));
			}
		}
	}

	/** singleton */
	private RelevanceQueries() {
	}

}
