/*
 * Created on Jun 20, 2004
 *
 */
package tvla.differencing;

import java.util.Map;

import tvla.formulae.PredicateUpdateFormula;
import tvla.predicates.Predicate;

/**
 * @author alexey
 * 
 * A triple of maps is created for each Action.
 * supplied stores user-supplied update formulas for core and instrumentation predicates.
 * generatedUntight stores untight updates for instrumentation predicates.
 * generatedTight stores tight updates for instrumentation predicates.
 * The latter two hold updates generated by finite differencing.  They are
 * generated in topological order, so that an update for an instrumentation
 * predicate is always computed by the time the use of the predicate can be
 * encountered in another instrumentation predicate's definition.
 * Generated updates override the supplied ones (generation only takes place
 * when requested through keyword "auto" or property "differenceNonIdForms").
 * Normally, only one of the generated maps is non-empty.  However, when in
 * non-tight mode, the generatedTight map will contain tight differenced formulas
 * for predicates found in transitive closure formulas.  This is needed to
 * detect unit changes, as well for the applicability of Dong&Su (R)TC updates.
 */
public class PredicateUpdateMaps {
	Map<Predicate, PredicateUpdateFormula> supplied;
	Map<Predicate, PredicateUpdateFormula> generatedUntight;
	Map<Predicate, PredicateUpdateFormula> generatedTight;

	public PredicateUpdateMaps(Map<Predicate, PredicateUpdateFormula> supplied, 
	        Map<Predicate, PredicateUpdateFormula> untight, 
	        Map<Predicate, PredicateUpdateFormula> tight) {
		this.supplied = supplied;
		this.generatedUntight = untight;
		this.generatedTight = tight;
	}
}
