
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Aug 14 22:13:16 GMT-08:00 2009
//----------------------------------------------------

package tvla.language.TVP;

import tvla.logic.*;
import tvla.formulae.*;
import tvla.language.*;
import tvla.transitionSystem.*;
import tvla.util.*;
import com.ibm.dk.dps.io.CPreProcessorStream;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Fri Aug 14 22:13:16 GMT-08:00 2009
  */
public class TVPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TVPParser() {super();}

  /** Constructor which sets the default scanner. */
  public TVPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\213\000\002\002\004\000\002\003\012\000\002\005" +
    "\002\000\002\005\005\000\002\036\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\005\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\045\005\000\002" +
    "\045\005\000\002\044\003\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\011\000\002\006\003\000\002\071\013\000" +
    "\002\004\003\000\002\061\002\000\002\061\004\000\002" +
    "\061\004\000\002\061\004\000\002\061\004\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\041\006\000" +
    "\002\017\003\000\002\017\005\000\002\020\002\000\002" +
    "\020\003\000\002\016\002\000\002\016\005\000\002\021" +
    "\002\000\002\021\005\000\002\046\012\000\002\047\014" +
    "\000\002\050\006\000\002\011\005\000\002\011\004\000" +
    "\002\035\004\000\002\022\003\000\002\022\005\000\002" +
    "\023\002\000\002\023\003\000\002\074\002\000\002\074" +
    "\004\000\002\074\007\000\002\074\010\000\002\073\002" +
    "\000\002\073\004\000\002\056\002\000\002\056\003\000" +
    "\002\057\006\000\002\060\003\000\002\060\003\000\002" +
    "\060\005\000\002\060\005\000\002\042\013\000\002\063" +
    "\002\000\002\063\005\000\002\063\004\000\002\070\013" +
    "\000\002\055\003\000\002\055\003\000\002\055\004\000" +
    "\002\055\004\000\002\067\011\000\002\067\013\000\002" +
    "\065\002\000\002\065\003\000\002\064\002\000\002\064" +
    "\004\000\002\012\012\000\002\015\002\000\002\015\007" +
    "\000\002\026\002\000\002\026\004\000\002\026\003\000" +
    "\002\027\002\000\002\027\004\000\002\027\003\000\002" +
    "\025\002\000\002\025\004\000\002\031\002\000\002\031" +
    "\004\000\002\034\002\000\002\034\004\000\002\033\002" +
    "\000\002\033\004\000\002\032\002\000\002\032\004\000" +
    "\002\032\003\000\002\030\002\000\002\030\004\000\002" +
    "\010\003\000\002\010\003\000\002\054\003\000\002\054" +
    "\005\000\002\007\003\000\002\007\004\000\002\013\020" +
    "\000\002\014\010\000\002\062\002\000\002\062\004\000" +
    "\002\066\006\000\002\066\011\000\002\040\003\000\002" +
    "\040\003\000\002\037\013\000\002\024\007\000\002\024" +
    "\007\000\002\024\003\000\002\024\016\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\004\000\002\024\011\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\006\000\002\024" +
    "\011\000\002\024\011\000\002\024\003\000\002\053\003" +
    "\000\002\053\005\000\002\052\002\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0144\000\030\007\uffea\010\uffea\011\uffea\012\uffea\042" +
    "\uffea\043\uffea\044\uffea\045\uffea\055\uffea\061\uffea\062\uffea" +
    "\001\002\000\004\002\u0146\001\002\000\030\007\u0103\010" +
    "\u0106\011\u0105\012\220\042\uffeb\043\u010c\044\u010d\045\u010a" +
    "\055\u0111\061\u0109\062\247\001\002\000\004\042\007\001" +
    "\002\000\004\042\010\001\002\000\006\042\uffb2\063\uffb2" +
    "\001\002\000\006\042\012\063\013\001\002\000\004\042" +
    "\355\001\002\000\004\005\015\001\002\000\006\042\uffb1" +
    "\063\uffb1\001\002\000\004\032\016\001\002\000\006\005" +
    "\017\033\uff78\001\002\000\010\033\uff7a\035\uff7a\050\uff7a" +
    "\001\002\000\004\033\024\001\002\000\010\033\uff77\035" +
    "\022\050\uff77\001\002\000\004\005\023\001\002\000\010" +
    "\033\uff79\035\uff79\050\uff79\001\002\000\004\036\025\001" +
    "\002\000\036\007\uffaf\012\uffaf\036\uffaf\037\uffaf\051\uffaf" +
    "\053\uffaf\054\uffaf\056\uffaf\057\uffaf\060\uffaf\062\uffaf\064" +
    "\uffaf\065\uffaf\066\uffaf\001\002\000\036\007\uffc8\012\uffc8" +
    "\036\uffc8\037\uffc8\051\031\053\uffc8\054\uffc8\056\uffc8\057" +
    "\uffc8\060\032\062\uffc8\064\uffc8\065\uffc8\066\uffc8\001\002" +
    "\000\004\037\030\001\002\000\006\042\uffb0\063\uffb0\001" +
    "\002\000\006\004\341\005\156\001\002\000\004\005\351" +
    "\001\002\000\032\007\uffa3\012\uffa3\036\uffa3\037\uffa3\053" +
    "\uffa3\054\uffa3\056\uffa3\057\034\062\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\001\002\000\030\005\051\013\047\014\046\015" +
    "\056\020\061\021\042\022\055\027\044\030\050\031\054" +
    "\032\043\001\002\000\030\007\uffa5\012\uffa5\036\uffa5\037" +
    "\uffa5\053\036\054\uffa5\056\uffa5\062\uffa5\064\uffa5\065\uffa5" +
    "\066\uffa5\001\002\000\030\005\051\013\047\014\046\015" +
    "\056\020\061\021\042\022\055\027\044\030\050\031\054" +
    "\032\043\001\002\000\026\007\uffa1\012\uffa1\036\uffa1\037" +
    "\uffa1\054\uffa1\056\041\062\uffa1\064\uffa1\065\uffa1\066\uffa1" +
    "\001\002\000\024\007\uffc6\012\220\036\uffc6\037\uffc6\054" +
    "\uffc6\062\uffc6\064\uffc6\065\uffc6\066\uffc6\001\002\000\030" +
    "\005\051\013\047\014\046\015\056\020\061\021\042\022" +
    "\055\027\044\030\050\031\054\032\043\001\002\000\004" +
    "\052\uff8d\001\002\000\030\005\051\013\047\014\046\015" +
    "\056\020\061\021\042\022\055\027\044\030\050\031\054" +
    "\032\043\001\002\000\106\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\032\ufff9\033\ufff9\035\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\047\ufff9" +
    "\050\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\061\ufff9\062" +
    "\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\001\002\000\106" +
    "\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012" +
    "\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\032\uff7b\033\uff7b" +
    "\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043" +
    "\uff7b\044\uff7b\045\uff7b\047\uff7b\050\uff7b\053\uff7b\054\uff7b" +
    "\055\uff7b\056\uff7b\061\uff7b\062\uff7b\064\uff7b\065\uff7b\066" +
    "\uff7b\067\uff7b\001\002\000\004\032\204\001\002\000\004" +
    "\032\200\001\002\000\106\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\032\ufff8\033\ufff8\035\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\047\ufff8" +
    "\050\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\061\ufff8\062" +
    "\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\001\002\000\060" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\023\uffd8\024\uffd8\025" +
    "\ufffd\026\ufffd\032\uffd8\036\uffd8\037\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\047\173\054\uffd8\055\uffd8\061\uffd8\062" +
    "\uffd8\064\uffd8\065\uffd8\066\uffd8\001\002\000\034\007\uffa0" +
    "\012\uffa0\016\124\017\122\020\125\021\123\036\uffa0\037" +
    "\uffa0\054\uffa0\062\uffa0\064\uffa0\065\uffa0\066\uffa0\001\002" +
    "\000\004\052\133\001\002\000\106\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\032\ufff7\033\ufff7\035\ufff7\036\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\047\ufff7\050\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\061" +
    "\ufff7\062\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\001\002" +
    "\000\030\005\051\013\047\014\046\015\056\020\061\021" +
    "\042\022\055\027\044\030\050\031\054\032\043\001\002" +
    "\000\004\032\107\001\002\000\010\023\070\024\071\032" +
    "\072\001\002\000\106\004\uff89\005\uff89\006\uff89\007\uff89" +
    "\010\uff89\011\uff89\012\uff89\016\uff89\017\uff89\020\uff89\021" +
    "\uff89\032\uff89\033\uff89\035\uff89\036\uff89\037\uff89\040\uff89" +
    "\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\047\uff89\050" +
    "\uff89\053\uff89\054\uff89\055\uff89\056\uff89\061\uff89\062\uff89" +
    "\064\uff89\065\uff89\066\uff89\067\uff89\001\002\000\004\052" +
    "\uff8e\001\002\000\006\025\063\026\064\001\002\000\004" +
    "\005\065\001\002\000\004\005\065\001\002\000\106\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\032\ufffd\033\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\044\ufffd\045\ufffd\047\ufffd\050\ufffd\053\ufffd\054\ufffd\055" +
    "\ufffd\056\ufffd\061\ufffd\062\ufffd\064\ufffd\065\ufffd\066\ufffd" +
    "\067\ufffd\001\002\000\106\004\uff7f\005\uff7f\006\uff7f\007" +
    "\uff7f\010\uff7f\011\uff7f\012\uff7f\016\uff7f\017\uff7f\020\uff7f" +
    "\021\uff7f\032\uff7f\033\uff7f\035\uff7f\036\uff7f\037\uff7f\040" +
    "\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\047\uff7f" +
    "\050\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\061\uff7f\062" +
    "\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f\001\002\000\106" +
    "\004\uff80\005\uff80\006\uff80\007\uff80\010\uff80\011\uff80\012" +
    "\uff80\016\uff80\017\uff80\020\uff80\021\uff80\032\uff80\033\uff80" +
    "\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043" +
    "\uff80\044\uff80\045\uff80\047\uff80\050\uff80\053\uff80\054\uff80" +
    "\055\uff80\056\uff80\061\uff80\062\uff80\064\uff80\065\uff80\066" +
    "\uff80\067\uff80\001\002\000\004\032\102\001\002\000\004" +
    "\032\075\001\002\000\006\005\017\033\uff78\001\002\000" +
    "\004\033\074\001\002\000\106\004\uff7e\005\uff7e\006\uff7e" +
    "\007\uff7e\010\uff7e\011\uff7e\012\uff7e\016\uff7e\017\uff7e\020" +
    "\uff7e\021\uff7e\032\uff7e\033\uff7e\035\uff7e\036\uff7e\037\uff7e" +
    "\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\047" +
    "\uff7e\050\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\061\uff7e" +
    "\062\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\001\002\000" +
    "\004\005\065\001\002\000\004\035\077\001\002\000\004" +
    "\005\065\001\002\000\004\033\101\001\002\000\106\004" +
    "\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c" +
    "\016\uff7c\017\uff7c\020\uff7c\021\uff7c\032\uff7c\033\uff7c\035" +
    "\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\047\uff7c\050\uff7c\053\uff7c\054\uff7c\055" +
    "\uff7c\056\uff7c\061\uff7c\062\uff7c\064\uff7c\065\uff7c\066\uff7c" +
    "\067\uff7c\001\002\000\004\005\065\001\002\000\004\035" +
    "\104\001\002\000\004\005\065\001\002\000\004\033\106" +
    "\001\002\000\106\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010" +
    "\uff7d\011\uff7d\012\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d" +
    "\032\uff7d\033\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041" +
    "\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\047\uff7d\050\uff7d" +
    "\053\uff7d\054\uff7d\055\uff7d\056\uff7d\061\uff7d\062\uff7d\064" +
    "\uff7d\065\uff7d\066\uff7d\067\uff7d\001\002\000\004\005\065" +
    "\001\002\000\004\035\111\001\002\000\004\005\065\001" +
    "\002\000\004\033\113\001\002\000\004\032\114\001\002" +
    "\000\004\005\065\001\002\000\004\035\116\001\002\000" +
    "\004\005\065\001\002\000\004\033\120\001\002\000\030" +
    "\005\051\013\047\014\046\015\056\020\061\021\042\022" +
    "\055\027\044\030\050\031\054\032\043\001\002\000\106" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012" +
    "\uff88\016\124\017\122\020\125\021\123\032\uff88\033\uff88" +
    "\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\044\uff88\045\uff88\047\uff88\050\uff88\053\uff88\054\uff88" +
    "\055\uff88\056\uff88\061\uff88\062\uff88\064\uff88\065\uff88\066" +
    "\uff88\067\uff88\001\002\000\030\005\051\013\047\014\046" +
    "\015\056\020\061\021\042\022\055\027\044\030\050\031" +
    "\054\032\043\001\002\000\030\005\051\013\047\014\046" +
    "\015\056\020\061\021\042\022\055\027\044\030\050\031" +
    "\054\032\043\001\002\000\030\005\051\013\047\014\046" +
    "\015\056\020\061\021\042\022\055\027\044\030\050\031" +
    "\054\032\043\001\002\000\030\005\051\013\047\014\046" +
    "\015\056\020\061\021\042\022\055\027\044\030\050\031" +
    "\054\032\043\001\002\000\106\004\uff86\005\uff86\006\uff86" +
    "\007\uff86\010\uff86\011\uff86\012\uff86\016\uff86\017\uff86\020" +
    "\uff86\021\123\032\uff86\033\uff86\035\uff86\036\uff86\037\uff86" +
    "\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\047" +
    "\uff86\050\uff86\053\uff86\054\uff86\055\uff86\056\uff86\061\uff86" +
    "\062\uff86\064\uff86\065\uff86\066\uff86\067\uff86\001\002\000" +
    "\106\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84" +
    "\012\uff84\016\uff84\017\122\020\125\021\123\032\uff84\033" +
    "\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84" +
    "\043\uff84\044\uff84\045\uff84\047\uff84\050\uff84\053\uff84\054" +
    "\uff84\055\uff84\056\uff84\061\uff84\062\uff84\064\uff84\065\uff84" +
    "\066\uff84\067\uff84\001\002\000\106\004\uff87\005\uff87\006" +
    "\uff87\007\uff87\010\uff87\011\uff87\012\uff87\016\uff87\017\uff87" +
    "\020\uff87\021\uff87\032\uff87\033\uff87\035\uff87\036\uff87\037" +
    "\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87" +
    "\047\uff87\050\uff87\053\uff87\054\uff87\055\uff87\056\uff87\061" +
    "\uff87\062\uff87\064\uff87\065\uff87\066\uff87\067\uff87\001\002" +
    "\000\106\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011" +
    "\uff85\012\uff85\016\uff85\017\uff85\020\125\021\123\032\uff85" +
    "\033\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042" +
    "\uff85\043\uff85\044\uff85\045\uff85\047\uff85\050\uff85\053\uff85" +
    "\054\uff85\055\uff85\056\uff85\061\uff85\062\uff85\064\uff85\065" +
    "\uff85\066\uff85\067\uff85\001\002\000\106\004\uff83\005\uff83" +
    "\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\016\uff83\017" +
    "\uff83\020\uff83\021\uff83\032\uff83\033\uff83\035\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\047\uff83\050\uff83\053\uff83\054\uff83\055\uff83\056\uff83" +
    "\061\uff83\062\uff83\064\uff83\065\uff83\066\uff83\067\uff83\001" +
    "\002\000\004\036\134\001\002\000\030\005\051\013\047" +
    "\014\046\015\056\020\061\021\042\022\055\027\044\030" +
    "\050\031\054\032\043\001\002\000\014\016\124\017\122" +
    "\020\125\021\123\041\136\001\002\000\004\005\137\001" +
    "\002\000\004\005\141\001\002\000\010\005\142\032\145" +
    "\036\144\001\002\000\010\005\uffed\032\uffed\036\uffed\001" +
    "\002\000\066\007\ufff4\010\ufff4\011\ufff4\012\ufff4\021\ufff4" +
    "\024\ufff4\033\ufff4\036\ufff4\037\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\051\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\064\ufff4\065" +
    "\ufff4\066\ufff4\001\002\000\012\021\147\024\150\037\177" +
    "\046\152\001\002\000\006\005\156\037\uffce\001\002\000" +
    "\010\005\142\032\145\036\144\001\002\000\012\021\147" +
    "\024\150\033\151\046\152\001\002\000\010\005\142\032" +
    "\145\036\144\001\002\000\010\005\142\032\145\036\144" +
    "\001\002\000\066\007\uffef\010\uffef\011\uffef\012\uffef\021" +
    "\uffef\024\uffef\033\uffef\036\uffef\037\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\051\uffef\053\uffef\054\uffef\055" +
    "\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\064\uffef" +
    "\065\uffef\066\uffef\001\002\000\010\005\142\032\145\036" +
    "\144\001\002\000\066\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\021\ufff1\024\ufff1\033\ufff1\036\ufff1\037\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\051\ufff1\053\ufff1\054\ufff1" +
    "\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\064" +
    "\ufff1\065\ufff1\066\ufff1\001\002\000\066\007\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\021\ufff2\024\ufff2\033\ufff2\036\ufff2\037" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\051\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\062\ufff2\064\ufff2\065\ufff2\066\ufff2\001\002\000\066" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\021\ufff0\024\150\033" +
    "\ufff0\036\ufff0\037\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\046\152\051\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\062\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\001\002\000\070\007\uffd8\010\uffd8\011\uffd8\012\uffd8\017" +
    "\uffd8\024\uffd8\032\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\047\173\050\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\061\uffd8\062\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\001\002\000\012\035\uffd0\037" +
    "\uffd0\041\uffd0\050\uffd0\001\002\000\004\037\171\001\002" +
    "\000\010\035\162\037\uffcd\041\163\001\002\000\004\005" +
    "\156\001\002\000\004\005\164\001\002\000\004\005\141" +
    "\001\002\000\010\005\142\032\145\036\144\001\002\000" +
    "\012\021\147\024\150\037\167\046\152\001\002\000\066" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\021\uffee\024\uffee\033" +
    "\uffee\036\uffee\037\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\046\uffee\051\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057" +
    "\uffee\060\uffee\061\uffee\062\uffee\064\uffee\065\uffee\066\uffee" +
    "\001\002\000\012\035\uffcf\037\uffcf\041\uffcf\050\uffcf\001" +
    "\002\000\066\007\ufff3\010\ufff3\011\ufff3\012\ufff3\021\ufff3" +
    "\024\ufff3\033\ufff3\036\ufff3\037\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\046\ufff3\051\ufff3\053\ufff3\054\ufff3\055\ufff3" +
    "\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\001\002\000\070\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\017\uffd1\023\uffd1\024\uffd1\032\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\050\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\061" +
    "\uffd1\062\uffd1\064\uffd1\065\uffd1\066\uffd1\001\002\000\006" +
    "\005\156\050\uffce\001\002\000\004\050\176\001\002\000" +
    "\006\035\162\050\uffcd\001\002\000\070\007\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\017\uffd7\023\uffd7\024\uffd7\032\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\050\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\061\uffd7\062\uffd7\064\uffd7\065\uffd7\066\uffd7\001\002" +
    "\000\106\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011" +
    "\uff8c\012\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\032\uff8c" +
    "\033\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\043\uff8c\044\uff8c\045\uff8c\047\uff8c\050\uff8c\053\uff8c" +
    "\054\uff8c\055\uff8c\056\uff8c\061\uff8c\062\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\067\uff8c\001\002\000\006\005\017\033\uff78" +
    "\001\002\000\004\033\202\001\002\000\030\005\051\013" +
    "\047\014\046\015\056\020\061\021\042\022\055\027\044" +
    "\030\050\031\054\032\043\001\002\000\106\004\uff8a\005" +
    "\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\016\124" +
    "\017\122\020\125\021\123\032\uff8a\033\uff8a\035\uff8a\036" +
    "\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a" +
    "\045\uff8a\047\uff8a\050\uff8a\053\uff8a\054\uff8a\055\uff8a\056" +
    "\uff8a\061\uff8a\062\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a" +
    "\001\002\000\006\005\017\033\uff78\001\002\000\004\033" +
    "\206\001\002\000\030\005\051\013\047\014\046\015\056" +
    "\020\061\021\042\022\055\027\044\030\050\031\054\032" +
    "\043\001\002\000\106\004\uff8b\005\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\011\uff8b\012\uff8b\016\124\017\122\020\125\021" +
    "\123\032\uff8b\033\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\047\uff8b\050" +
    "\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\061\uff8b\062\uff8b" +
    "\064\uff8b\065\uff8b\066\uff8b\067\uff8b\001\002\000\016\016" +
    "\124\017\122\020\125\021\123\033\212\040\211\001\002" +
    "\000\030\005\051\013\047\014\046\015\056\020\061\021" +
    "\042\022\055\027\044\030\050\031\054\032\043\001\002" +
    "\000\106\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81\011" +
    "\uff81\012\uff81\016\uff81\017\uff81\020\uff81\021\uff81\032\uff81" +
    "\033\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042" +
    "\uff81\043\uff81\044\uff81\045\uff81\047\uff81\050\uff81\053\uff81" +
    "\054\uff81\055\uff81\056\uff81\061\uff81\062\uff81\064\uff81\065" +
    "\uff81\066\uff81\067\uff81\001\002\000\014\016\124\017\122" +
    "\020\125\021\123\041\214\001\002\000\030\005\051\013" +
    "\047\014\046\015\056\020\061\021\042\022\055\027\044" +
    "\030\050\031\054\032\043\001\002\000\014\016\124\017" +
    "\122\020\125\021\123\033\216\001\002\000\106\004\uff82" +
    "\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82\016" +
    "\uff82\017\uff82\020\uff82\021\uff82\032\uff82\033\uff82\035\uff82" +
    "\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044" +
    "\uff82\045\uff82\047\uff82\050\uff82\053\uff82\054\uff82\055\uff82" +
    "\056\uff82\061\uff82\062\uff82\064\uff82\065\uff82\066\uff82\067" +
    "\uff82\001\002\000\022\007\244\036\uff9c\037\uff9c\054\uff9c" +
    "\062\uff9c\064\uff9c\065\uff9c\066\uff9c\001\002\000\004\036" +
    "\222\001\002\000\022\007\uffc5\036\uffc5\037\uffc5\054\uffc5" +
    "\062\uffc5\064\uffc5\065\uffc5\066\uffc5\001\002\000\032\005" +
    "\051\013\047\014\046\015\056\020\061\021\042\022\055" +
    "\027\044\030\050\031\054\032\043\043\226\001\002\000" +
    "\016\016\124\017\122\020\125\021\123\035\uffc3\037\uffc3" +
    "\001\002\000\006\035\236\037\242\001\002\000\006\035" +
    "\uffc2\037\uffc2\001\002\000\004\032\227\001\002\000\004" +
    "\005\230\001\002\000\004\005\141\001\002\000\010\005" +
    "\142\032\145\036\144\001\002\000\012\021\147\024\150" +
    "\033\233\046\152\001\002\000\004\036\234\001\002\000" +
    "\032\005\051\013\047\014\046\015\056\020\061\021\042" +
    "\022\055\027\044\030\050\031\054\032\043\043\226\001" +
    "\002\000\006\035\236\037\237\001\002\000\032\005\051" +
    "\013\047\014\046\015\056\020\061\021\042\022\055\027" +
    "\044\030\050\031\054\032\043\043\226\001\002\000\006" +
    "\035\uffbf\037\uffbf\001\002\000\016\016\124\017\122\020" +
    "\125\021\123\035\uffc1\037\uffc1\001\002\000\006\035\uffc0" +
    "\037\uffc0\001\002\000\044\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\036\uffc4\037\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\054\uffc4\055\uffc4\061\uffc4\062\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\001\002\000\020\036\uff92\037\uff92\054\uff92\062\uff92" +
    "\064\uff92\065\uff92\066\uff92\001\002\000\030\005\051\013" +
    "\047\014\046\015\056\020\061\021\042\022\055\027\044" +
    "\030\050\031\054\032\043\001\002\000\030\016\124\017" +
    "\122\020\125\021\123\036\uff9b\037\uff9b\054\uff9b\062\uff9b" +
    "\064\uff9b\065\uff9b\066\uff9b\001\002\000\020\036\uffad\037" +
    "\uffad\054\uffad\062\247\064\250\065\uffad\066\uffad\001\002" +
    "\000\032\005\051\013\047\014\046\015\056\020\061\021" +
    "\042\022\055\027\044\030\050\031\054\032\043\047\332" +
    "\001\002\000\044\005\051\013\047\014\046\015\056\020" +
    "\061\021\042\022\055\027\044\030\050\031\054\032\043" +
    "\036\uffab\037\uffab\054\uffab\062\uffab\065\uffab\066\uffab\001" +
    "\002\000\016\036\uffaa\037\uffaa\054\uffaa\062\uffaa\065\253" +
    "\066\uffaa\001\002\000\020\036\uff91\037\uff91\054\uff91\062" +
    "\uff91\064\uff91\065\uff91\066\uff91\001\002\000\042\005\051" +
    "\013\047\014\046\015\056\020\061\021\042\022\055\027" +
    "\044\030\050\031\054\032\043\036\uffa8\037\uffa8\054\uffa8" +
    "\062\uffa8\066\uffa8\001\002\000\014\036\255\037\uffbe\054" +
    "\uffbe\062\uffbe\066\uffbe\001\002\000\012\005\156\032\270" +
    "\037\272\043\274\001\002\000\012\037\uffa7\054\uffa7\062" +
    "\uffa7\066\260\001\002\000\010\037\uff92\054\uff92\062\uff92" +
    "\001\002\000\030\005\051\013\047\014\046\015\056\020" +
    "\061\021\042\022\055\027\044\030\050\031\054\032\043" +
    "\001\002\000\020\016\124\017\122\020\125\021\123\037" +
    "\uffa6\054\uffa6\062\uffa6\001\002\000\010\037\uff9f\054\264" +
    "\062\247\001\002\000\004\037\uff94\001\002\000\032\005" +
    "\051\013\047\014\046\015\056\020\061\021\042\022\055" +
    "\027\044\030\050\031\054\032\043\037\uff9d\001\002\000" +
    "\014\016\124\017\122\020\125\021\123\037\uff9e\001\002" +
    "\000\004\032\321\001\002\000\012\005\uffba\032\uffba\037" +
    "\uffba\043\uffba\001\002\000\004\005\156\001\002\000\012" +
    "\005\156\032\270\037\307\043\274\001\002\000\012\037" +
    "\uffbc\054\uffbc\062\uffbc\066\uffbc\001\002\000\012\005\uffb9" +
    "\032\uffb9\037\uffb9\043\uffb9\001\002\000\004\032\275\001" +
    "\002\000\004\005\276\001\002\000\004\005\141\001\002" +
    "\000\010\005\142\032\145\036\144\001\002\000\012\021" +
    "\147\024\150\033\301\046\152\001\002\000\004\036\302" +
    "\001\002\000\010\005\156\032\270\043\274\001\002\000" +
    "\012\005\156\032\270\037\305\043\274\001\002\000\012" +
    "\005\uffb8\032\uffb8\037\uffb8\043\uffb8\001\002\000\012\005" +
    "\uffbb\032\uffbb\037\uffbb\043\uffbb\001\002\000\012\005\uffb7" +
    "\032\uffb7\037\uffb7\043\uffb7\001\002\000\012\037\uffbd\054" +
    "\uffbd\062\uffbd\066\uffbd\001\002\000\004\032\311\001\002" +
    "\000\006\005\017\033\uff78\001\002\000\004\033\313\001" +
    "\002\000\004\033\314\001\002\000\004\034\315\001\002" +
    "\000\030\005\051\013\047\014\046\015\056\020\061\021" +
    "\042\022\055\027\044\030\050\031\054\032\043\001\002" +
    "\000\024\005\uffb4\016\124\017\122\020\125\021\123\032" +
    "\uffb4\037\uffb4\043\uffb4\067\320\001\002\000\012\005\uffb5" +
    "\032\uffb5\037\uffb5\043\uffb5\001\002\000\012\005\uffb3\032" +
    "\uffb3\037\uffb3\043\uffb3\001\002\000\006\005\017\033\uff78" +
    "\001\002\000\004\033\323\001\002\000\004\034\324\001" +
    "\002\000\030\005\051\013\047\014\046\015\056\020\061" +
    "\021\042\022\055\027\044\030\050\031\054\032\043\001" +
    "\002\000\024\005\uffb4\016\124\017\122\020\125\021\123" +
    "\032\uffb4\037\uffb4\043\uffb4\067\320\001\002\000\012\005" +
    "\uffb6\032\uffb6\037\uffb6\043\uffb6\001\002\000\024\016\124" +
    "\017\122\020\125\021\123\036\uffa9\037\uffa9\054\uffa9\062" +
    "\uffa9\066\uffa9\001\002\000\026\016\124\017\122\020\125" +
    "\021\123\036\uffac\037\uffac\054\uffac\062\uffac\065\uffac\066" +
    "\uffac\001\002\000\012\016\124\017\345\020\125\021\123" +
    "\001\002\000\030\005\051\013\047\014\046\015\056\020" +
    "\061\021\042\022\055\027\044\030\050\031\054\032\043" +
    "\001\002\000\014\016\124\017\122\020\125\021\123\050" +
    "\334\001\002\000\030\005\051\013\047\014\046\015\056" +
    "\020\061\021\042\022\055\027\044\030\050\031\054\032" +
    "\043\001\002\000\012\016\124\017\336\020\125\021\123" +
    "\001\002\000\032\004\341\005\051\013\047\014\046\015" +
    "\056\020\061\021\042\022\055\027\044\030\050\031\054" +
    "\032\043\001\002\000\052\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\023\070\024\071\032\072\036\ufffb\037\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\054\ufffb\055\ufffb\061\ufffb\062" +
    "\ufffb\064\ufffb\065\ufffb\066\ufffb\001\002\000\046\007\uff8f" +
    "\010\uff8f\011\uff8f\012\uff8f\024\342\036\uff8f\037\uff8f\042" +
    "\uff8f\043\uff8f\044\uff8f\045\uff8f\054\uff8f\055\uff8f\061\uff8f" +
    "\062\uff8f\064\uff8f\065\uff8f\066\uff8f\001\002\000\054\007" +
    "\ufffc\010\ufffc\011\ufffc\012\ufffc\024\ufffc\036\ufffc\037\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\045\ufffc\053\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\057\ufffc\061\ufffc\062\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\001\002\000\006\004\341\005\156\001\002\000" +
    "\054\007\ufffb\010\ufffb\011\ufffb\012\ufffb\024\ufffb\036\ufffb" +
    "\037\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\053\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\061\ufffb\062\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\001\002\000\054\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\024\ufffa\036\ufffa\037\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057" +
    "\ufffa\061\ufffa\062\ufffa\064\ufffa\065\ufffa\066\ufffa\001\002" +
    "\000\032\004\341\005\051\013\047\014\046\015\056\020" +
    "\061\021\042\022\055\027\044\030\050\031\054\032\043" +
    "\001\002\000\046\007\uff90\010\uff90\011\uff90\012\uff90\024" +
    "\342\036\uff90\037\uff90\042\uff90\043\uff90\044\uff90\045\uff90" +
    "\054\uff90\055\uff90\061\uff90\062\uff90\064\uff90\065\uff90\066" +
    "\uff90\001\002\000\036\007\uffa4\012\uffa4\016\124\017\122" +
    "\020\125\021\123\036\uffa4\037\uffa4\054\uffa4\056\uffa4\062" +
    "\uffa4\064\uffa4\065\uffa4\066\uffa4\001\002\000\040\007\uffa2" +
    "\012\uffa2\016\124\017\122\020\125\021\123\036\uffa2\037" +
    "\uffa2\053\uffa2\054\uffa2\056\uffa2\062\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\001\002\000\004\005\141\001\002\000\010\005" +
    "\142\032\145\036\144\001\002\000\044\007\uffae\012\uffae" +
    "\021\147\024\150\036\uffae\037\uffae\046\152\051\uffae\053" +
    "\uffae\054\uffae\056\uffae\057\uffae\060\uffae\062\uffae\064\uffae" +
    "\065\uffae\066\uffae\001\002\000\034\007\uffc7\012\uffc7\024" +
    "\342\036\uffc7\037\uffc7\053\uffc7\054\uffc7\056\uffc7\057\uffc7" +
    "\062\uffc7\064\uffc7\065\uffc7\066\uffc7\001\002\000\006\004" +
    "\357\005\356\001\002\000\014\002\uff9a\004\uff9a\005\uff9a" +
    "\035\uff9a\042\uff9a\001\002\000\014\002\uff99\004\uff99\005" +
    "\uff99\035\uff99\042\uff99\001\002\000\012\002\uff96\004\uff96" +
    "\005\uff96\042\uff96\001\002\000\012\002\uffff\004\357\005" +
    "\356\042\371\001\002\000\004\005\363\001\002\000\004" +
    "\032\364\001\002\000\006\005\017\033\uff78\001\002\000" +
    "\004\033\366\001\002\000\006\004\357\005\356\001\002" +
    "\000\012\002\uff93\004\uff93\005\uff93\042\uff93\001\002\000" +
    "\004\002\000\001\002\000\004\042\373\001\002\000\012" +
    "\002\uff95\004\uff95\005\uff95\042\uff95\001\002\000\006\004" +
    "\357\005\356\001\002\000\006\002\ufffe\035\376\001\002" +
    "\000\006\002\uff98\035\uff98\001\002\000\006\004\357\005" +
    "\356\001\002\000\006\002\uff97\035\uff97\001\002\000\032" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\037\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\055\uffe2\061\uffe2\062\uffe2\001\002" +
    "\000\032\007\uffe8\010\uffe8\011\uffe8\012\uffe8\037\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\055\uffe8\061\uffe8\062\uffe8" +
    "\001\002\000\032\007\uffe9\010\uffe9\011\uffe9\012\uffe9\037" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\055\uffe9\061\uffe9" +
    "\062\uffe9\001\002\000\004\005\u013f\001\002\000\032\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\037\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\055\uffe4\061\uffe4\062\uffe4\001\002\000" +
    "\030\005\051\013\047\014\046\015\056\020\061\021\042" +
    "\022\055\027\044\030\050\031\054\032\043\001\002\000" +
    "\004\005\u0123\001\002\000\032\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\037\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\055" +
    "\uffe0\061\uffe0\062\uffe0\001\002\000\032\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\037\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\055\uffe6\061\uffe6\062\uffe6\001\002\000\004\005\156" +
    "\001\002\000\004\005\u011e\001\002\000\032\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\037\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\045\uffe7\055\uffe7\061\uffe7\062\uffe7\001\002\000\004\032" +
    "\u0116\001\002\000\004\005\u0114\001\002\000\032\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\037\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\055\uffe1\061\uffe1\062\uffe1\001\002\000\032" +
    "\007\uffe3\010\uffe3\011\uffe3\012\uffe3\037\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\055\uffe3\061\uffe3\062\uffe3\001\002" +
    "\000\032\007\uffe5\010\uffe5\011\uffe5\012\uffe5\037\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\055\uffe5\061\uffe5\062\uffe5" +
    "\001\002\000\030\005\051\013\047\014\046\015\056\020" +
    "\061\021\042\022\055\027\044\030\050\031\054\032\043" +
    "\001\002\000\046\004\341\005\156\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\016\124\017\122\020\125\021\123\037\uffd2" +
    "\042\uffd2\043\uffd2\044\uffd2\045\uffd2\055\uffd2\061\uffd2\062" +
    "\uffd2\001\002\000\034\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\024\342\037\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\055" +
    "\uffd3\061\uffd3\062\uffd3\001\002\000\010\005\142\032\145" +
    "\036\144\001\002\000\040\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\021\147\024\150\037\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\152\055\ufff6\061\ufff6\062\ufff6\001\002\000" +
    "\004\005\u0117\001\002\000\004\005\141\001\002\000\010" +
    "\005\142\032\145\036\144\001\002\000\012\021\147\024" +
    "\150\033\u011a\046\152\001\002\000\004\036\u011b\001\002" +
    "\000\030\007\uffea\010\uffea\011\uffea\012\uffea\037\uffea\043" +
    "\uffea\044\uffea\045\uffea\055\uffea\061\uffea\062\uffea\001\002" +
    "\000\030\007\u0103\010\u0106\011\u0105\012\220\037\u011d\043" +
    "\u010c\044\u010d\045\u010a\055\u0111\061\u0109\062\247\001\002" +
    "\000\032\007\uffec\010\uffec\011\uffec\012\uffec\037\uffec\042" +
    "\uffec\043\uffec\044\uffec\045\uffec\055\uffec\061\uffec\062\uffec" +
    "\001\002\000\010\005\142\032\145\036\144\001\002\000" +
    "\040\007\ufff5\010\ufff5\011\ufff5\012\ufff5\021\147\024\150" +
    "\037\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\152\055" +
    "\ufff5\061\ufff5\062\ufff5\001\002\000\004\017\u0121\001\002" +
    "\000\030\005\051\013\047\014\046\015\056\020\061\021" +
    "\042\022\055\027\044\030\050\031\054\032\043\001\002" +
    "\000\042\007\uffdf\010\uffdf\011\uffdf\012\uffdf\016\124\017" +
    "\122\020\125\021\123\037\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\055\uffdf\061\uffdf\062\uffdf\001\002\000\006\032" +
    "\uffd8\047\173\001\002\000\004\032\u0125\001\002\000\006" +
    "\005\017\033\uff78\001\002\000\004\033\u0127\001\002\000" +
    "\004\034\u0128\001\002\000\030\005\051\013\047\014\046" +
    "\015\056\020\061\021\042\022\055\027\044\030\050\031" +
    "\054\032\043\001\002\000\050\005\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\016\124\017\122\020\125\021\123\036" +
    "\uffcc\037\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc" +
    "\055\uffcc\061\uffcc\062\uffcc\001\002\000\040\005\u012b\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\036\u012d\037\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\047\u012e\055\uffda\061\uffda\062" +
    "\uffda\001\002\000\042\005\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\032\u0139\036\uffcb\037\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\047\uffcb\055\uffcb\061\uffcb\062\uffcb\001\002" +
    "\000\032\007\uffd5\010\uffd5\011\uffd5\012\uffd5\037\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\055\uffd5\061\uffd5\062\uffd5" +
    "\001\002\000\012\027\044\030\050\031\054\037\uffdc\001" +
    "\002\000\006\005\017\050\uff78\001\002\000\004\050\u0130" +
    "\001\002\000\004\070\u0131\001\002\000\004\005\u0132\001" +
    "\002\000\040\005\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\036\uffc9\037\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\047" +
    "\uffc9\055\uffc9\061\uffc9\062\uffc9\001\002\000\004\037\u0138" +
    "\001\002\000\006\035\u0136\037\uffdb\001\002\000\006\035" +
    "\uffde\037\uffde\001\002\000\010\027\044\030\050\031\054" +
    "\001\002\000\006\035\uffdd\037\uffdd\001\002\000\032\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\037\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\055\uffd9\061\uffd9\062\uffd9\001\002\000" +
    "\004\005\017\001\002\000\006\033\u013b\035\022\001\002" +
    "\000\040\005\uffca\007\uffca\010\uffca\011\uffca\012\uffca\036" +
    "\uffca\037\uffca\042\uffca\043\uffca\044\uffca\045\uffca\047\uffca" +
    "\055\uffca\061\uffca\062\uffca\001\002\000\014\006\u013d\016" +
    "\124\017\122\020\125\021\123\001\002\000\030\005\051" +
    "\013\047\014\046\015\056\020\061\021\042\022\055\027" +
    "\044\030\050\031\054\032\043\001\002\000\042\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\016\124\017\122\020\125\021" +
    "\123\037\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\055\uffd4" +
    "\061\uffd4\062\uffd4\001\002\000\006\032\uffd8\047\173\001" +
    "\002\000\004\032\u0141\001\002\000\006\005\017\033\uff78" +
    "\001\002\000\004\033\u0143\001\002\000\040\005\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\036\uffcc\037\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\045\uffcc\047\uffcc\055\uffcc\061\uffcc\062" +
    "\uffcc\001\002\000\040\005\u012b\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\036\u012d\037\uffda\042\uffda\043\uffda\044\uffda\045" +
    "\uffda\047\u012e\055\uffda\061\uffda\062\uffda\001\002\000\032" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\037\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\055\uffd6\061\uffd6\062\uffd6\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0144\000\010\003\003\004\005\061\004\001\001\000" +
    "\002\001\001\000\026\011\u0106\041\u010d\045\u010e\046\u010f" +
    "\047\u0103\050\377\051\u0101\057\u010a\066\u0107\071\u0100\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\010" +
    "\001\001\000\004\012\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\052\017\053\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\026\015\025\001\001\000" +
    "\004\073\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\342\072\353\001\001\000\002\001\001\000" +
    "\004\034\034\001\001\000\016\024\347\035\056\036\061" +
    "\037\057\040\052\043\044\001\001\000\004\031\036\001" +
    "\001\000\016\024\346\035\056\036\061\037\057\040\052" +
    "\043\044\001\001\000\004\033\037\001\001\000\006\056" +
    "\216\057\220\001\001\000\016\024\051\035\056\036\061" +
    "\037\057\040\052\043\044\001\001\000\002\001\001\000" +
    "\016\024\207\035\056\036\061\037\057\040\052\043\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\024\131\035\056\036\061\037\057\040\052" +
    "\043\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\066\001\001\000\004\036\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\052\072\053\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\075\001\001" +
    "\000\002\001\001\000\004\036\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\102\001\001\000\002" +
    "\001\001\000\004\036\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\107\001\001\000\002\001\001" +
    "\000\004\036\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\114\001\001\000\002\001\001\000\004" +
    "\036\116\001\001\000\002\001\001\000\016\024\120\035" +
    "\056\036\061\037\057\040\052\043\044\001\001\000\002" +
    "\001\001\000\016\024\130\035\056\036\061\037\057\040" +
    "\052\043\044\001\001\000\016\024\127\035\056\036\061" +
    "\037\057\040\052\043\044\001\001\000\016\024\126\035" +
    "\056\036\061\037\057\040\052\043\044\001\001\000\016" +
    "\024\125\035\056\036\061\037\057\040\052\043\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\024\134\035\056\036\061\037\057\040\052\043\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\137\001\001\000\004\044\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\160\023" +
    "\157\035\156\001\001\000\004\044\145\001\001\000\002" +
    "\001\001\000\004\044\154\001\001\000\004\044\153\001" +
    "\001\000\002\001\001\000\004\044\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\167\001\001\000\002\001\001\000" +
    "\004\006\164\001\001\000\004\044\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\174\023\173\035\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\052\200\053\020\001\001" +
    "\000\002\001\001\000\016\024\202\035\056\036\061\037" +
    "\057\040\052\043\044\001\001\000\002\001\001\000\006" +
    "\052\204\053\020\001\001\000\002\001\001\000\016\024" +
    "\206\035\056\036\061\037\057\040\052\043\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\024\212\035" +
    "\056\036\061\037\057\040\052\043\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\024\214\035\056\036" +
    "\061\037\057\040\052\043\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\024\222\035\056\036\061" +
    "\037\057\040\052\042\224\043\044\060\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\230\001\001\000" +
    "\004\044\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\024\222\035\056\036\061\037\057\040\052\042" +
    "\224\043\044\060\234\001\001\000\002\001\001\000\020" +
    "\024\237\035\056\036\061\037\057\040\052\042\240\043" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\245\001\001\000" +
    "\016\024\244\035\056\036\061\037\057\040\052\043\044" +
    "\001\001\000\002\001\001\000\006\026\250\066\251\001" +
    "\001\000\016\024\330\035\056\036\061\037\057\040\052" +
    "\043\044\001\001\000\016\024\327\035\056\036\061\037" +
    "\057\040\052\043\044\001\001\000\004\027\253\001\001" +
    "\000\002\001\001\000\016\024\326\035\056\036\061\037" +
    "\057\040\052\043\044\001\001\000\004\063\255\001\001" +
    "\000\012\035\265\055\270\067\266\070\272\001\001\000" +
    "\004\025\256\001\001\000\004\062\261\001\001\000\016" +
    "\024\260\035\056\036\061\037\057\040\052\043\044\001" +
    "\001\000\002\001\001\000\006\032\262\066\251\001\001" +
    "\000\002\001\001\000\016\024\264\035\056\036\061\037" +
    "\057\040\052\043\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\307\001\001\000" +
    "\010\035\265\067\303\070\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\276\001\001\000\004\044\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\035\265\055\302\067" +
    "\266\070\272\001\001\000\010\035\265\067\303\070\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\052\311" +
    "\053\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\024\315\035\056\036\061\037\057" +
    "\040\052\043\044\001\001\000\004\065\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\052\321\053\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\024" +
    "\324\035\056\036\061\037\057\040\052\043\044\001\001" +
    "\000\004\065\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\024\332" +
    "\035\056\036\061\037\057\040\052\043\044\001\001\000" +
    "\002\001\001\000\016\024\334\035\056\036\061\037\057" +
    "\040\052\043\044\001\001\000\002\001\001\000\020\024" +
    "\130\035\336\036\061\037\057\040\052\043\044\072\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\342\072\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\024\130\035\336\036\061\037" +
    "\057\040\052\043\044\072\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\351\001" +
    "\001\000\004\044\352\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\360\010\361\014\357\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\367\010\361\014\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\052\364\053\020\001\001\000\002" +
    "\001\001\000\004\010\366\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\374\054\373\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\376\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\024\u013b\035\056\036\061" +
    "\037\057\040\052\043\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\u011f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\024\u0111\035\056\036\061\037\057\040" +
    "\052\043\044\001\001\000\006\035\342\072\u0112\001\001" +
    "\000\002\001\001\000\004\044\u0114\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u0117\001\001\000\004" +
    "\044\u0118\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\u011b\001\001\000\026\011\u0106\041\u010d\045\u010e" +
    "\046\u010f\047\u0103\050\377\051\u0101\057\u010a\066\u0107\071" +
    "\u0100\001\001\000\002\001\001\000\004\044\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\024\u0121\035" +
    "\056\036\061\037\057\040\052\043\044\001\001\000\002" +
    "\001\001\000\004\021\u0123\001\001\000\002\001\001\000" +
    "\006\052\u0125\053\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\024\u0128\035\056\036\061\037\057\040" +
    "\052\043\044\001\001\000\004\074\u0129\001\001\000\004" +
    "\016\u012b\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\u0133\020\u0132\043\u0134\001\001\000\006\052\u012e" +
    "\053\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u0136\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\u0139\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\024\u013d\035\056\036\061\037\057\040\052\043\044" +
    "\001\001\000\002\001\001\000\004\021\u013f\001\001\000" +
    "\002\001\001\000\006\052\u0141\053\020\001\001\000\002" +
    "\001\001\000\004\074\u0143\001\001\000\004\016\u0144\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TVPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TVPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TVPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    static TVPLex scanner;
    static CPreProcessorStream stream;

    public void report_error(String message, Object info) {
		Logger.println(message + " in line " + stream.getLine(scanner.line_count) + 
				" of file " + stream.getFile(scanner.line_count));
    }

    public static void configure(String filename, String path) 
					throws Exception {
		String infileName = filename;
		if (!infileName.endsWith(".tvp"))
			infileName = infileName + ".tvp";
		stream = new CPreProcessorStream(infileName);
		AddMacrosToPreProcessor.add(stream);

		// We can dump the result of applying the C preprocessor
		// to make debugging easier.
		if (ProgramProperties.getBooleanProperty("tvla.dumpPreprocessedTvp", false)) {
			FileWriter writer = new FileWriter(filename + ".cpp.tvp");
			int c;
			while ((c = stream.read()) != -1) {
				writer.write(c);
			}
			writer.flush();
			writer.close();
			stream = new CPreProcessorStream(infileName);
		}
		
		stream.setSearchPath(path);
		scanner = new TVPLex(new InputStreamReader(stream));
		new TVPParser(scanner).parse();
	
		// do cleanups
		scanner = null;
		stream = null;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TVPParser$actions {


	List globalMessages = new ArrayList();
	List globalFocusFormulae = new ArrayList();

  private final TVPParser parser;

  /** Constructor */
  CUP$TVPParser$actions(TVPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TVPParser$do_action(
    int                        CUP$TVPParser$act_num,
    java_cup.runtime.lr_parser CUP$TVPParser$parser,
    java.util.Stack            CUP$TVPParser$stack,
    int                        CUP$TVPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TVPParser$result;

      /* select the action based on the action number */
      switch (CUP$TVPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // optional_id_list ::= id_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = list; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(40/*optional_id_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // optional_id_list ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(40/*optional_id_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // id_list ::= id_list COMMA ID 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		  RESULT = list; RESULT.add(id); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(41/*id_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // id_list ::= ID 
            {
              List RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(id); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(41/*id_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // formula ::= kleene 
            {
              FormulaAST RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		Kleene k = (Kleene)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new ValueFormulaAST(k); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // formula ::= predicate PLUS LP var COMMA var RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 Var v1 = new Var("__v1"); 
		   Var v2 = new Var("__v2"); 
		   RESULT = new TCFormulaAST(l, r, v1, v2, 
					     new PredicateFormulaAST(p, v1, v2));
		
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // formula ::= predicate STAR LP var COMMA var RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 Var v1 = new Var("__v1"); 
		   Var v2 = new Var("__v2"); 
		   RESULT = new CompositeFormulaAST(new EqualityAST(l, r),
					       new TCFormulaAST(l, r, v1, v2, 
							     new PredicateFormulaAST(p, v1, v2)),
					       "OrFormula");
		
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // formula ::= predicate LP optional_id_list RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = new PredicateFormulaAST(p, VarAST.asVariables(args)); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // formula ::= var NEQ var 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT  = new CompositeFormulaAST(new EqualityAST(l, r)); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // formula ::= var EQ var 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT  = new EqualityAST(l, r); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // formula ::= LP formula RP 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = f; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // formula ::= LP formula QMARK formula COLON formula RP 
            {
              FormulaAST RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).right;
		FormulaAST fc = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).right;
		FormulaAST ft = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		FormulaAST ff = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = new IfFormulaAST(fc, ft, ff); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // formula ::= NOT formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // formula ::= formula IFF formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "EquivalenceFormula"); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // formula ::= formula IMPLIES formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f2, new CompositeFormulaAST(f1), "OrFormula"); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // formula ::= formula OR formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "OrFormula"); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // formula ::= formula AND formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "AndFormula"); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // formula ::= TC LP var COMMA var RP LP var COMMA var RP formula 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-9)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-9)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).right;
		Var sl = (Var)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).value;
		int srleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		Var sr = (Var)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new TCFormulaAST(l, r, sl, sr, f); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // formula ::= combine 
            {
              FormulaAST RESULT = null;
		int combleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int combright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		CombineAST comb = (CombineAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = comb; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // formula ::= EXISTS LP optional_id_list RP formula 
            {
              FormulaAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new QuantFormulaAST(VarAST.asVariables(list), f, "ExistQuantFormula"); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // formula ::= FORALL LP optional_id_list RP formula 
            {
              FormulaAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new QuantFormulaAST(VarAST.asVariables(list), f, "AllQuantFormula"); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(18/*formula*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // combine ::= binary_op COMBINE LCBR formula COLON ID in set_expr RCBR 
            {
              CombineAST RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = new CombineAST(op, f, id, e); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(29/*combine*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // binary_op ::= AND 
            {
              String RESULT = null;
		 RESULT = "AndFormula"; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(30/*binary_op*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // binary_op ::= OR 
            {
              String RESULT = null;
		 RESULT = "OrFormula"; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(30/*binary_op*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // report_message ::= MESSAGE LBR formula RBR formula IMPLIES message 
            {
              ReportMessageAST RESULT = null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).right;
		FormulaAST cf = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		MessageAST m = (MessageAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		RESULT = new ReportMessageAST(f, m, cf); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(52/*report_message*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // report_message ::= MESSAGE formula IMPLIES message 
            {
              ReportMessageAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		MessageAST m = (MessageAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		RESULT = new ReportMessageAST(f, m); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(52/*report_message*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // report_messages ::= report_messages report_message 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int messleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int messright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		ReportMessageAST mess = (ReportMessageAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		RESULT = prev; RESULT.add(mess); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(48/*report_messages*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // report_messages ::= 
            {
              List RESULT = null;
		RESULT = new ArrayList(); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(48/*report_messages*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // action_use ::= cfg_node ID LP optional_id_list RP cfg_node 
            {
              ActionAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).value;
		int macleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left;
		int macright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).right;
		String mac = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new ActionAST(label, ActionMacroAST.get(mac).expand(args), next);
		
              CUP$TVPParser$result = new java_cup.runtime.Symbol(10/*action_use*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // action_def ::= parameters title frame_pre compose frame focus_done precond report_messages new clone optional_update retain report_messages decompose 
            {
              ActionDefAST RESULT = null;
		int psleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-13)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-13)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-13)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-12)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-12)).right;
		MessageAST t = (MessageAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-12)).value;
		int fr1left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-11)).left;
		int fr1right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-11)).right;
		FormulaAST fr1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-11)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-10)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-10)).right;
		FormulaAST co = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-10)).value;
		int fr2left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-9)).left;
		int fr2right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-9)).right;
		FormulaAST fr2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).right;
		FormulaAST p = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).right;
		List m = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).right;
		FormulaAST n = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).right;
		FormulaAST c = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).right;
		List u = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		FormulaAST r = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List pm = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST d = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 f.addAll(globalFocusFormulae); m.addAll(globalMessages);
                   RESULT = new ActionDefAST(t, f, p, m, n, c, u, r, pm, co, d, ps, fr1, fr2); 
                
              CUP$TVPParser$result = new java_cup.runtime.Symbol(9/*action_def*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-13)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // code_part ::= code_part action_use 
            {
              Object RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		Object prev = (Object)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		ActionAST current = (ActionAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 current.generate(); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(5/*code_part*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // code_part ::= action_use 
            {
              Object RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		ActionAST first = (ActionAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 first.generate(); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(5/*code_part*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cfg_node_list ::= cfg_node_list COMMA cfg_node 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		String node = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		  RESULT = list; RESULT.add(node); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(42/*cfg_node_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cfg_node_list ::= cfg_node 
            {
              List RESULT = null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		String node = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(node); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(42/*cfg_node_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cfg_node ::= STRING 
            {
              String RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = label; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(6/*cfg_node*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cfg_node ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = id; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(6/*cfg_node*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // precond ::= PRED formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = f; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(22/*precond*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // precond ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(22/*precond*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // decompose ::= DECOMPOSE 
            {
              FormulaAST RESULT = null;
		 RESULT = new ValueFormulaAST(Kleene.trueKleene); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(24/*decompose*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // decompose ::= DECOMPOSE formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = f; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(24/*decompose*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // decompose ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(24/*decompose*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // frame ::= FRAME formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = f; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(25/*frame*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // frame ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(25/*frame*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // frame_pre ::= FRAME_PRE formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = f; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(26/*frame_pre*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // frame_pre ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(26/*frame_pre*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // compose ::= COMPOSE formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = f; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(23/*compose*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // compose ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(23/*compose*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // retain ::= RETAIN formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = f; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(19/*retain*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // retain ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(19/*retain*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // clone ::= CLONE 
            {
              FormulaAST RESULT = null;
		 RESULT = new ValueFormulaAST(Kleene.trueKleene); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(21/*clone*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // clone ::= CLONE formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = f; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(21/*clone*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // clone ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(21/*clone*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // new ::= NEW 
            {
              FormulaAST RESULT = null;
		 RESULT = new ValueFormulaAST(Kleene.trueKleene); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(20/*new*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // new ::= NEW formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = f; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(20/*new*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(20/*new*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parameters ::= parameters PARAM ID in set_expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		SetAST set = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = list; RESULT.add(new Parameter(id, set, RESULT)); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(11/*parameters*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parameters ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(11/*parameters*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // macro ::= ACTION ID LP optional_id_list RP LCBR action_def RCBR 
            {
              MacroAST RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		ActionDefAST def = (ActionDefAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = new ActionMacroAST(name, args, def); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(8/*macro*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // macros ::= macros macro 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		MacroAST single = (MacroAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = list; RESULT.add(single); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(50/*macros*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // macros ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(50/*macros*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // optional_auto ::= AUTO 
            {
              Boolean RESULT = null;
		 RESULT = Boolean.TRUE; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(51/*optional_auto*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // optional_auto ::= 
            {
              Boolean RESULT = null;
		 RESULT = Boolean.FALSE; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(51/*optional_auto*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asgn ::= LP predicate LP optional_id_list RP RP ASSIGN formula optional_auto 
            {
              UpdateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new UpdateAST(p, f, VarAST.asVariables(args), a.booleanValue()); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(53/*asgn*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asgn ::= predicate LP optional_id_list RP ASSIGN formula optional_auto 
            {
              UpdateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new UpdateAST(p, f, VarAST.asVariables(args), a.booleanValue()); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(53/*asgn*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asgns ::= asgns asgn_foreach 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		ForeachAST a = (ForeachAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = prev; RESULT.add(a); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(43/*asgns*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asgns ::= asgns asgn 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		UpdateAST a = (UpdateAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = prev; RESULT.add(a); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(43/*asgns*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asgns ::= asgn_foreach 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		ForeachAST a = (ForeachAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(a); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(43/*asgns*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asgns ::= asgn 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		UpdateAST a = (UpdateAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(a); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(43/*asgns*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asgn_foreach ::= FOREACH LP ID in set_expr RP LCBR asgns RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(54/*asgn_foreach*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // optional_update ::= LCBR RCBR 
            {
              List RESULT = null;
		RESULT = new ArrayList(); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(49/*optional_update*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // optional_update ::= LCBR asgns RCBR 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = a; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(49/*optional_update*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // optional_update ::= 
            {
              List RESULT = null;
		RESULT = new ArrayList(); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(49/*optional_update*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // focus_foreach ::= FOREACH LP ID in set_expr RP LCBR focus_formulae RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(32/*focus_foreach*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // focus_formulae ::= focus_formulae COMMA focus_foreach 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		ForeachAST fe = (ForeachAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = prev; RESULT.add(fe); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(46/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // focus_formulae ::= focus_formulae COMMA formula 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = prev; RESULT.add(f); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(46/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // focus_formulae ::= focus_foreach 
            {
              List RESULT = null;
		int feleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		ForeachAST fe = (ForeachAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(fe); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(46/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // focus_formulae ::= formula 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(f); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(46/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // focus ::= FOCUS LCBR focus_formulae RCBR 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = f; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(45/*focus*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // focus_done ::= focus 
            {
              List RESULT = null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		List fs = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = fs; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(44/*focus_done*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // focus_done ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(44/*focus_done*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // title ::= TITLE message 
            {
              MessageAST RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		MessageAST str = (MessageAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = str; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(57/*title*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // title ::= 
            {
              MessageAST RESULT = null;
		 RESULT = new MessageStringAST(""); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(57/*title*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // optional_dependency ::= optional_dependency LBR optional_id_list RBR ARROW ID 
            {
              PredicatePropertiesAST RESULT = null;
		int odleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).right;
		List lhs = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		String rhs = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 
				RESULT = od;
				RESULT.addFunctionalDependency(lhs,rhs);
			
              CUP$TVPParser$result = new java_cup.runtime.Symbol(58/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // optional_dependency ::= optional_dependency ID LP id_list RP 
            {
              PredicatePropertiesAST RESULT = null;
		int odleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 
				RESULT = od;
				RESULT.addProperty(id, params); 
			
              CUP$TVPParser$result = new java_cup.runtime.Symbol(58/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // optional_dependency ::= optional_dependency ID 
            {
              PredicatePropertiesAST RESULT = null;
		int odleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 
				RESULT = od;
				RESULT.addProperty(id); 
			
              CUP$TVPParser$result = new java_cup.runtime.Symbol(58/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // optional_dependency ::= 
            {
              PredicatePropertiesAST RESULT = null;
		
				RESULT = new PredicatePropertiesAST();
			
              CUP$TVPParser$result = new java_cup.runtime.Symbol(58/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // optional_predicate_list ::= predicate_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = list; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(17/*optional_predicate_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // optional_predicate_list ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(17/*optional_predicate_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // predicate_list ::= predicate_list COMMA predicate 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int predleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		PredicateAST pred = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		  RESULT = list; RESULT.add(pred); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(16/*predicate_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // predicate_list ::= predicate 
            {
              List RESULT = null;
		int predleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		PredicateAST pred = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(pred); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(16/*predicate_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // predicate ::= ID optional_params 
            {
              PredicateAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = PredicateAST.getPredicateAST(id, params); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(27/*predicate*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decomp_name ::= DECOMP_NAME formula 
            {
              DecompositionNameAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new DecompositionNameAST(f); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(7/*decomp_name*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // decomp_name ::= DECOMP_NAME formula message 
            {
              DecompositionNameAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		MessageAST str = (MessageAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new DecompositionNameAST(f, str); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(7/*decomp_name*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cons_rule ::= CONSISTENCY_RULE formula IMPLIES_T formula 
            {
              ConstraintAST RESULT = null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		FormulaAST body = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST head = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new ConstraintAST(body, head); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(38/*cons_rule*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instrum_pred_def ::= INS_PRED ID optional_params LP optional_id_list RP ASSIGN formula optional_dependency show_attr 
            {
              InstrumPredicateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int odleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 
                od.setArity(args.size());
				RESULT = new InstrumPredicateAST(p, params, 
								 VarAST.asVariables(args), 
								 f, od, attr);
				
              CUP$TVPParser$result = new java_cup.runtime.Symbol(37/*instrum_pred_def*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // core_pred_def ::= PRED ID optional_params LP optional_id_list RP optional_dependency show_attr 
            {
              CorePredicateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).value;
		int odleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		
                od.setArity(args.size());
				RESULT = new CorePredicateAST(p, params, args, args.size(), od, attr);
				
              CUP$TVPParser$result = new java_cup.runtime.Symbol(36/*core_pred_def*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // optional_params ::= LBR optional_predicate_list RBR 
            {
              List RESULT = null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = params; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(15/*optional_params*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // optional_params ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(15/*optional_params*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // show_attr ::= LCBR optional_show_attr_list RCBR 
            {
              Set RESULT = null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = attr; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(12/*show_attr*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // show_attr ::= 
            {
              Set RESULT = null;
		 RESULT = null; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(12/*show_attr*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // optional_show_attr_list ::= show_attr_list 
            {
              Set RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		Set l = (Set)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = l; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(14/*optional_show_attr_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // optional_show_attr_list ::= 
            {
              Set RESULT = null;
		 RESULT = new HashSet(); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(14/*optional_show_attr_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // show_attr_list ::= show_attr_list COMMA kleene 
            {
              Set RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		Set list = (Set)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		Kleene a = (Kleene)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = list; RESULT.add(a); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(13/*show_attr_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // show_attr_list ::= kleene 
            {
              Set RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		Kleene a = (Kleene)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new HashSet(); RESULT.add(a); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(13/*show_attr_list*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // close_cycle ::= CLOSE_CYCLE predicate IMPLIES formula 
            {
              CloseCycleAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int dnameleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int dnameright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		FormulaAST dname = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new CloseCycleAST(p, dname); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(31/*close_cycle*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // decl ::= decomp_name 
            {
              AST RESULT = null;
		int dnleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int dnright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		DecompositionNameAST dn = (DecompositionNameAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = dn; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(39/*decl*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decl ::= close_cycle 
            {
              AST RESULT = null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		CloseCycleAST cc = (CloseCycleAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = cc; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(39/*decl*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decl ::= cons_rule 
            {
              AST RESULT = null;
		int consleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		ConstraintAST cons = (ConstraintAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = cons; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(39/*decl*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // decl ::= set_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		SetDefAST def = (SetDefAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = def; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(39/*decl*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // decl ::= instrum_pred_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		InstrumPredicateAST def = (InstrumPredicateAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = def; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(39/*decl*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // decl ::= core_pred_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		CorePredicateAST def = (CorePredicateAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = def; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(39/*decl*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decls ::= decls report_message 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int messleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int messright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		ReportMessageAST mess = (ReportMessageAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = list; globalMessages.add(mess); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(47/*decls*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decls ::= decls focus 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		List fs = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = list; globalFocusFormulae.addAll(fs); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(47/*decls*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decls ::= decls decl_foreach 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		ForeachAST f = (ForeachAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = list; RESULT.add(f); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(47/*decls*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decls ::= decls decl 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		AST single = (AST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = list; RESULT.add(single); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(47/*decls*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decls ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(47/*decls*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decls_done ::= decls 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 
		 for (Iterator i = list.iterator(); i.hasNext(); ) {
		     AST ast = (AST) i.next();
		     if (ast instanceof ForeachAST) {
			ForeachAST foreach = (ForeachAST) ast;
			for (Iterator j = foreach.evaluate().iterator(); j.hasNext(); ) {
			   AST generatedAst = (AST) j.next();
			   generatedAst.generate();
			}
		     } else {
			ast.generate();
		     }
		 }
		 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(2/*decls_done*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // decl_foreach ::= FOREACH LP ID in set_expr RP LCBR decls RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(55/*decl_foreach*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // in ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 if (!id.equals("in")) 
		parser.report_fatal_error("expected 'in'", null); 
	
              CUP$TVPParser$result = new java_cup.runtime.Symbol(4/*in*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // set_expr ::= LCBR predicate_list COLON ID in set_expr RCBR 
            {
              SetAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = new SetComprehensionAST(list, id, e); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(34/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // set_expr ::= LP set_expr RP 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = e1; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(34/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // set_expr ::= set_expr AND set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new SetAndAST(e1, e2); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(34/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // set_expr ::= set_expr MINUS set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new SetMinusAST(e1, e2); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(34/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // set_expr ::= set_expr PLUS set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new SetPlusAST(e1, e2); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(34/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // set_expr ::= LCBR optional_predicate_list RCBR 
            {
              SetAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		 RESULT = new SetConstantAST(list); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(34/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // set_expr ::= ID 
            {
              SetAST RESULT = null;
		int setleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		String set = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new SetUseAST(set); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(34/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // set_def ::= PSET ID set_expr 
            {
              SetDefAST RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		SetAST elements = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new SetDefAST(name, new ArrayList(elements.getMembers()), true) ; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(35/*set_def*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // set_def ::= SET ID set_expr 
            {
              SetDefAST RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		SetAST elements = (SetAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new SetDefAST(name, new ArrayList(elements.getMembers())) ; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(35/*set_def*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // kleene ::= UNKNOWN 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.unknownKleene; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(33/*kleene*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // kleene ::= FALSE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.falseKleene; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(33/*kleene*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // kleene ::= TRUE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.trueKleene; 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(33/*kleene*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // message ::= message PLUS message 
            {
              MessageAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).right;
		MessageAST l = (MessageAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		MessageAST r = (MessageAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		RESULT = new MessageCompositeAST(l, r); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(56/*message*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // message ::= predicate 
            {
              MessageAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		RESULT = new MessagePredicateAST(p); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(56/*message*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // message ::= STRING 
            {
              MessageAST RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		RESULT = new MessageStringAST(str); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(56/*message*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var ::= ID 
            {
              Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 RESULT = new Var(id); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(28/*var*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // to_print ::= PERCENT PERCENT cfg_node_list 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right;
		List p = (List)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).value;
		 AnalysisGraph.activeGraph.setPrintableLocations(p); 
              CUP$TVPParser$result = new java_cup.runtime.Symbol(3/*to_print*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // to_print ::= 
            {
              Object RESULT = null;

              CUP$TVPParser$result = new java_cup.runtime.Symbol(3/*to_print*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // tvp ::= decls_done PERCENT PERCENT macros PERCENT PERCENT code_part to_print 
            {
              Object RESULT = null;

              CUP$TVPParser$result = new java_cup.runtime.Symbol(1/*tvp*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          return CUP$TVPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= tvp EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).value;
		RESULT = start_val;
              CUP$TVPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVPParser$stack.elementAt(CUP$TVPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$TVPParser$parser.done_parsing();
          return CUP$TVPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

