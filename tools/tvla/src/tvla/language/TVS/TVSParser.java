
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Aug 05 15:28:26 GMT-08:00 2009
//----------------------------------------------------

package tvla.language.TVS;

import tvla.core.*;
import tvla.language.*;
import tvla.logic.*;
import tvla.predicates.*;
import tvla.transitionSystem.*;
import tvla.util.*;
import tvla.analysis.multithreading.*;
import tvla.analysis.multithreading.buchi.*;
import com.ibm.dk.dps.io.CPreProcessorStream;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Wed Aug 05 15:28:26 GMT-08:00 2009
  */
public class TVSParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TVSParser() {super();}

  /** Constructor which sets the default scanner. */
  public TVSParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\004\003\000\002\004\004\000\002\013\010" +
    "\000\002\005\002\000\002\005\004\000\002\005\005\000" +
    "\002\042\002\000\002\014\010\000\002\043\002\000\002" +
    "\014\012\000\002\015\006\000\002\015\007\000\002\035" +
    "\002\000\002\035\006\000\002\035\007\000\002\034\002" +
    "\000\002\034\005\000\002\033\005\000\002\033\003\000" +
    "\002\012\003\000\002\012\005\000\002\007\003\000\002" +
    "\007\005\000\002\010\003\000\002\010\005\000\002\036" +
    "\006\000\002\036\010\000\002\037\003\000\002\040\003" +
    "\000\002\041\003\000\002\017\003\000\002\020\003\000" +
    "\002\020\004\000\002\020\004\000\002\020\005\000\002" +
    "\032\003\000\002\032\003\000\002\016\007\000\002\027" +
    "\002\000\002\027\004\000\002\021\003\000\002\021\006" +
    "\000\002\011\003\000\002\011\005\000\002\044\002\000" +
    "\002\026\010\000\002\026\005\000\002\024\002\000\002" +
    "\024\003\000\002\025\003\000\002\025\005\000\002\023" +
    "\004\000\002\023\006\000\002\023\006\000\002\030\002" +
    "\000\002\030\004\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\006\002\000\002\006\004\000\002" +
    "\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\020\002\ufffb\004\ufffb\012\ufffb\020\ufffb\026" +
    "\010\027\ufffb\032\ufffb\001\002\000\006\002\uffff\026\010" +
    "\001\002\000\006\002\ufffe\026\ufffe\001\002\000\016\002" +
    "\000\004\ufff6\012\ufff8\020\017\027\ufff8\032\ufff8\001\002" +
    "\000\004\002\167\001\002\000\006\005\011\006\012\001" +
    "\002\000\004\013\uffdb\001\002\000\004\013\uffda\001\002" +
    "\000\004\013\014\001\002\000\004\014\015\001\002\000" +
    "\016\004\ufffb\012\ufffb\015\ufffb\020\ufffb\027\ufffb\032\ufffb" +
    "\001\002\000\016\004\ufff6\012\ufff8\015\023\020\017\027" +
    "\ufff8\032\ufff8\001\002\000\012\004\ufff6\012\ufff8\027\ufff8" +
    "\032\ufff8\001\002\000\020\002\ufffa\004\ufffa\012\ufffa\015" +
    "\ufffa\020\ufffa\027\ufffa\032\ufffa\001\002\000\004\004\157" +
    "\001\002\000\010\012\uffc3\027\uffc3\032\uffc3\001\002\000" +
    "\006\002\ufffc\026\ufffc\001\002\000\010\012\ufff2\027\025" +
    "\032\026\001\002\000\004\006\156\001\002\000\004\013" +
    "\134\001\002\000\010\012\uffc2\027\uffc2\032\uffc2\001\002" +
    "\000\004\012\031\001\002\000\004\013\127\001\002\000" +
    "\004\025\034\001\002\000\022\002\uffef\004\uffef\012\uffef" +
    "\015\uffef\020\uffef\027\uffef\032\uffef\033\117\001\002\000" +
    "\004\013\035\001\002\000\004\014\036\001\002\000\006" +
    "\005\uffd8\015\uffd8\001\002\000\006\005\040\015\042\001" +
    "\002\000\012\013\uffd6\020\uffd6\021\111\022\uffd6\001\002" +
    "\000\004\013\044\001\002\000\022\002\uffd9\004\uffd9\012" +
    "\uffd9\015\uffd9\020\uffd9\027\uffd9\032\uffd9\033\uffd9\001\002" +
    "\000\006\005\uffd7\015\uffd7\001\002\000\012\007\046\010" +
    "\050\011\047\014\uffd2\001\002\000\004\014\052\001\002" +
    "\000\010\005\uffc6\015\uffc6\020\uffc6\001\002\000\010\005" +
    "\uffc4\015\uffc4\020\uffc4\001\002\000\010\005\uffc5\015\uffc5" +
    "\020\uffc5\001\002\000\006\005\uffd0\015\uffd0\001\002\000" +
    "\012\005\053\015\uffcf\021\062\030\055\001\002\000\022" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\031\uffdf\001\002\000\020\015\uffe0\016\066\017\065" +
    "\020\uffe0\023\uffe0\024\uffe0\031\uffe0\001\002\000\006\005" +
    "\053\021\062\001\002\000\006\015\uffcd\020\uffcd\001\002" +
    "\000\012\015\uffc8\020\uffc8\023\075\024\076\001\002\000" +
    "\006\015\uffce\020\073\001\002\000\004\015\072\001\002" +
    "\000\006\005\053\021\062\001\002\000\006\020\067\022" +
    "\070\001\002\000\012\016\066\017\065\020\uffe7\022\uffe7" +
    "\001\002\000\022\015\uffdd\016\uffdd\017\uffdd\020\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\031\uffdd\001\002\000\022\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\022\uffde\023\uffde\024\uffde\031" +
    "\uffde\001\002\000\006\005\053\021\062\001\002\000\022" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\031\uffdc\001\002\000\012\016\066\017\065\020\uffe6" +
    "\022\uffe6\001\002\000\006\005\uffd1\015\uffd1\001\002\000" +
    "\010\005\053\021\062\030\055\001\002\000\006\015\uffcc" +
    "\020\uffcc\001\002\000\010\007\046\010\050\011\047\001" +
    "\002\000\006\005\053\021\062\001\002\000\006\015\uffcb" +
    "\020\uffcb\001\002\000\010\015\uffc8\020\uffc8\023\075\001" +
    "\002\000\006\015\uffca\020\uffca\001\002\000\006\015\uffc7" +
    "\020\uffc7\001\002\000\006\020\105\031\106\001\002\000" +
    "\010\015\uffe9\020\uffe9\031\uffe9\001\002\000\006\005\053" +
    "\021\062\001\002\000\010\015\uffc8\020\uffc8\023\075\001" +
    "\002\000\006\015\uffc9\020\uffc9\001\002\000\010\015\uffe8" +
    "\020\uffe8\031\uffe8\001\002\000\004\005\040\001\002\000" +
    "\006\020\uffd4\022\uffd4\001\002\000\006\020\114\022\115" +
    "\001\002\000\004\005\040\001\002\000\010\013\uffd5\020" +
    "\uffd5\022\uffd5\001\002\000\006\020\uffd3\022\uffd3\001\002" +
    "\000\004\013\121\001\002\000\020\002\ufff7\004\ufff7\012" +
    "\ufff7\015\ufff7\020\ufff7\027\ufff7\032\ufff7\001\002\000\006" +
    "\005\122\030\124\001\002\000\020\002\uffec\004\uffec\012" +
    "\uffec\015\uffec\020\uffec\027\uffec\032\uffec\001\002\000\020" +
    "\002\uffee\004\uffee\012\uffee\015\uffee\020\uffee\027\uffee\032" +
    "\uffee\001\002\000\004\005\125\001\002\000\004\031\126" +
    "\001\002\000\020\002\uffed\004\uffed\012\uffed\015\uffed\020" +
    "\uffed\027\uffed\032\uffed\001\002\000\004\014\130\001\002" +
    "\000\010\005\053\015\132\021\062\001\002\000\006\015" +
    "\133\020\105\001\002\000\004\025\ufff4\001\002\000\004" +
    "\025\ufff3\001\002\000\004\014\135\001\002\000\006\005" +
    "\136\015\142\001\002\000\004\030\uffe3\001\002\000\004" +
    "\030\146\001\002\000\006\015\uffeb\020\uffeb\001\002\000" +
    "\006\015\144\020\143\001\002\000\004\012\ufff1\001\002" +
    "\000\004\005\136\001\002\000\004\012\ufff0\001\002\000" +
    "\006\015\uffea\020\uffea\001\002\000\004\005\147\001\002" +
    "\000\006\020\uffe2\031\uffe2\001\002\000\006\020\151\031" +
    "\152\001\002\000\004\005\153\001\002\000\006\015\uffe5" +
    "\020\uffe5\001\002\000\004\031\uffe1\001\002\000\004\031" +
    "\155\001\002\000\006\015\uffe4\020\uffe4\001\002\000\010" +
    "\012\uffc1\027\uffc1\032\uffc1\001\002\000\004\013\160\001" +
    "\002\000\004\014\161\001\002\000\004\006\162\001\002" +
    "\000\004\015\163\001\002\000\004\012\031\001\002\000" +
    "\004\025\034\001\002\000\020\002\ufff5\004\ufff5\012\ufff5" +
    "\015\ufff5\020\ufff5\027\ufff5\032\ufff5\001\002\000\020\002" +
    "\ufff9\004\ufff9\012\ufff9\015\ufff9\020\ufff9\027\ufff9\032\ufff9" +
    "\001\002\000\004\002\001\001\002\000\006\002\ufffd\026" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\012\003\006\004\003\005\005\013\004\001" +
    "\001\000\004\013\167\001\001\000\002\001\001\000\010" +
    "\014\017\042\021\043\020\001\001\000\002\001\001\000" +
    "\004\032\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\015\001" +
    "\001\000\010\014\017\042\021\043\020\001\001\000\010" +
    "\014\165\042\021\043\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\023\001\001\000\002\001\001" +
    "\000\006\022\026\035\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\031\001\001" +
    "\000\002\001\001\000\004\016\032\001\001\000\004\034" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\036\001\001\000\006\021\040\026\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\050\044\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\056\020\053\023\055\024" +
    "\060\025\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\102\017\103\020\053\001\001\000\002\001" +
    "\001\000\004\030\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\062\020\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\056\020\053\023\073" +
    "\001\001\000\002\001\001\000\004\031\101\001\001\000" +
    "\006\017\077\020\053\001\001\000\002\001\001\000\004" +
    "\030\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\107\020\053" +
    "\001\001\000\004\030\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\112\021\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\130\017\103\020" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\140\036\137\037" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\144\037\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\163\001\001\000\004\016" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TVSParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TVSParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TVSParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    static TVSLex scanner;
    static CPreProcessorStream stream;

    static BuchiAutomaton property;
    public void report_error(String message, Object info) {
	Logger.println(message + " in line " + stream.getLine(scanner.line_count) + 
			" of file " + stream.getFile(scanner.line_count));
    }
    
     /** Reads a list of locations from a TVS formatted input file.
     * @author Roman Manevich
     */
    @SuppressWarnings("unchecked")
    public static List<Location> readLocations(String file) throws Exception {
		String infileName = file;
		if (!infileName.endsWith(".tvs")) {
			infileName = infileName + ".tvs";
		}
		stream = new CPreProcessorStream(infileName);
		AddMacrosToPreProcessor.add(stream);
		
		scanner = new TVSLex(new InputStreamReader(stream));
		TVSParser parser = new TVSParser(scanner);
		List<Location> answer = (List<Location>) parser.parse().value;

		// do cleanups
		scanner = null;
		stream = null;

		return answer;
    }	

    /** Reads a list of structures from a TVS formatted input file.
     * @author Tal Lev-Ami
     */
    @SuppressWarnings("unchecked")
    public static List<HighLevelTVS> readStructures(String file) throws Exception {
		String infileName = file;
		if (!infileName.endsWith(".tvs")) {
			infileName = infileName + ".tvs";
		}
		stream = new CPreProcessorStream(infileName);
		AddMacrosToPreProcessor.add(stream);

		// We can dump the result of applying the C preprocessor
		// to make debugging easier.
		if (ProgramProperties.getBooleanProperty("tvla.dumpPreprocessedTvs", false)) {
			FileWriter writer = new FileWriter(infileName + ".cpp.tvs");
			int c;
			while ((c = stream.read()) != -1) {
				writer.write(c);
			}
			writer.flush();
			writer.close();
			stream = new CPreProcessorStream(infileName);
		}
		
		scanner = new TVSLex(new InputStreamReader(stream));
		TVSParser parser = new TVSParser(scanner);
		List<HighLevelTVS> answer = (List<HighLevelTVS>) parser.parse().value;

		// do cleanups
		scanner = null;
		stream = null;

		return answer;
	}
		
	/** @author Eran Yahav
	*/	
    public void initRunnableFromReady(TVS st) {
         for (Iterator i = st.nodes().iterator(); i.hasNext(); ) {
            Node n = (Node) i.next();
            if (st.eval(Vocabulary.isThread, n) == Kleene.trueKleene &&
				st.eval(Vocabulary.ready, n) == Kleene.trueKleene)
                st.update(Vocabulary.runnable, n, Kleene.unknownKleene);
        }
    }
    
	/** @author Eran Yahav
	*/	
    public static void setProperty(BuchiAutomaton ba) {
        property = ba;
    }

	/** @author Eran Yahav
	*/	
    public void setInitialState(TVS st,String stateName) {
        Predicate initStatePredicate = null;
        if (property != null) {
            if (stateName != null)
                initStatePredicate = property.getState(stateName).predicate();
            else
                initStatePredicate = property.getState(property.initialState()).predicate();
            
            st.update(initStatePredicate, Kleene.trueKleene);
        }    
    }	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TVSParser$actions {


    TVS structure;
    String predicateName;
    Predicate predicate;
    Map nodes = new HashMap();
    List locations;
    Map structuresMessages = new HashMap();

  private final TVSParser parser;

  /** Constructor */
  CUP$TVSParser$actions(TVSParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TVSParser$do_action(
    int                        CUP$TVSParser$act_num,
    java_cup.runtime.lr_parser CUP$TVSParser$parser,
    java.util.Stack            CUP$TVSParser$stack,
    int                        CUP$TVSParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TVSParser$result;

      /* select the action based on the action number */
      switch (CUP$TVSParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // message ::= MESSAGE STRING 
            {
              String RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = str; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(16/*message*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // messages ::= messages message 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		int msgleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int msgright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String msg = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = list; RESULT.add(msg); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(4/*messages*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // messages ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(4/*messages*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // val ::= UNKNOWN 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.unknownKleene; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(23/*val*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // val ::= FALSE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.falseKleene; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(23/*val*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // val ::= TRUE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.trueKleene; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(23/*val*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value ::= COLON val 
            {
              Kleene RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		Kleene v = (Kleene)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = v; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(22/*value*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // value ::= 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.trueKleene; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(22/*value*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // entry ::= LP node_list RP value 
            {
              Object RESULT = null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).right;
		List nl = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		Kleene v = (Kleene)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		
		if (predicate == null) {
			predicate = Vocabulary.getPredicateByName(predicateName);
			if (predicate == null || predicate.arity() != nl.size())
				parser.report_fatal_error("Predicate " + predicateName + 
				" was used but not declared as a " + nl.size() + "-ary predicate", null);
		}
		List nodeList = new ArrayList();
		String nodeName;
		for(ListIterator li = nl.listIterator(); li.hasNext();) {
			nodeName = (String)li.next();
			Node currNode = (Node) nodes.get(nodeName);
			if (currNode != null) {
				nodeList.add(currNode);
			} 
			else {
				parser.report_fatal_error("Node " + nodeName + " was not declared.", null); 
			}
		}
		NodeTuple nodeTuple = NodeTuple.createTuple(nodeList);
		structure.update(predicate,nodeTuple,v);
	
              CUP$TVSParser$result = new java_cup.runtime.Symbol(17/*entry*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // entry ::= node ARROW node value 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		Kleene k = (Kleene)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 if (predicate == null) {
	    predicate = Vocabulary.getPredicateByName(predicateName);
	    if (predicate == null || predicate.arity() != 2)
			parser.report_fatal_error("Predicate " + predicateName + 
			" was used but not declared as a binary predicate", null);
	   } 
	   else if (predicate.arity() != 2) {
		parser.report_fatal_error("Using " + predicate.arity() + 
					  "-ary predicate with binary assignments", null);
	   }
	   Node left = (Node) nodes.get(l);
	   if (left == null)
		parser.report_fatal_error("Node " + l + " was not declared.", null); 
	   Node right = (Node) nodes.get(r);
	   if (right == null)
		parser.report_fatal_error("Node " + r + " was not declared.", null); 
	   structure.update(predicate, left, right, k);
	
              CUP$TVSParser$result = new java_cup.runtime.Symbol(17/*entry*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // entry ::= node value 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		Kleene k = (Kleene)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 if (predicate == null) {
	    predicate = Vocabulary.getPredicateByName(predicateName);
	    if (predicate == null || predicate.arity() != 1)
			parser.report_fatal_error("Predicate " + predicateName + 
			" was used but not declared as a unary predicate", null);
	   } 
	   else if (predicate.arity() != 1) {
		parser.report_fatal_error("Using " + predicate.arity() + 
					  "-ary predicate with unary assignments", null);
	   }
	   Node node = (Node) nodes.get(n);
	   if (node == null)
		parser.report_fatal_error("Node " + n + " was not declared.", null); 
	   structure.update(predicate, node, k);
	
              CUP$TVSParser$result = new java_cup.runtime.Symbol(17/*entry*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // entry_list ::= entry_list COMMA entry 
            {
              Object RESULT = null;

              CUP$TVSParser$result = new java_cup.runtime.Symbol(19/*entry_list*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // entry_list ::= entry 
            {
              Object RESULT = null;

              CUP$TVSParser$result = new java_cup.runtime.Symbol(19/*entry_list*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // optional_entry_list ::= entry_list 
            {
              Object RESULT = null;

              CUP$TVSParser$result = new java_cup.runtime.Symbol(18/*optional_entry_list*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // optional_entry_list ::= 
            {
              Object RESULT = null;

              CUP$TVSParser$result = new java_cup.runtime.Symbol(18/*optional_entry_list*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pred_val ::= pred ASSIGN val 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		Kleene k = (Kleene)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		  Predicate nullaryPredicate = Vocabulary.getPredicateByName(p);
	    if (nullaryPredicate == null || nullaryPredicate.arity() != 0)
			parser.report_fatal_error("Predicate " + p + 
			" was used but not declared as a nullary predicate", null);
	    structure.update(nullaryPredicate, k); 
	
              CUP$TVSParser$result = new java_cup.runtime.Symbol(20/*pred_val*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // pred_val ::= pred ASSIGN NT$2 LCBR optional_entry_list RCBR 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-5)).value;
		 predicate = null; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(20/*pred_val*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$2 ::= 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
 predicateName = p; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(34/*NT$2*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // pred_list ::= pred_list COMMA pred 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = prev; RESULT.add(p); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(7/*pred_list*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // pred_list ::= pred 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(p); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(7/*pred_list*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // pred ::= ID LBR pred_list RBR 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		 RESULT = id + "[";
	     String sep = "";
	     for (Iterator i = list.iterator(); i.hasNext(); ) {
		String e = (String) i.next();
		RESULT = RESULT + sep + e;
		sep = ",";
	     }
	     RESULT = RESULT + "]";
	  
              CUP$TVSParser$result = new java_cup.runtime.Symbol(15/*pred*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pred ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = id; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(15/*pred*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pred_vals ::= pred_vals pred_val 
            {
              Object RESULT = null;

              CUP$TVSParser$result = new java_cup.runtime.Symbol(21/*pred_vals*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pred_vals ::= 
            {
              Object RESULT = null;

              CUP$TVSParser$result = new java_cup.runtime.Symbol(21/*pred_vals*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // iota ::= PREDICATES ASSIGN LCBR pred_vals RCBR 
            {
              Object RESULT = null;

              CUP$TVSParser$result = new java_cup.runtime.Symbol(12/*iota*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // label ::= STRING 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = id; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(24/*label*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // label ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = id; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(24/*label*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // element ::= LBR element_list RBR 
            {
              String RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		 RESULT = "[";
	     String sep = "";
	     for (Iterator i = list.iterator(); i.hasNext(); ) {
		String e = (String) i.next();
		RESULT = RESULT + sep + e;
		sep = ",";
	     }
	     RESULT = RESULT + "]";
	  
              CUP$TVSParser$result = new java_cup.runtime.Symbol(14/*element*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // element ::= element ZERO 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		 RESULT = e + ".0"; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(14/*element*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // element ::= element ONE 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		 RESULT = e + ".1"; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(14/*element*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // element ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = id; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(14/*element*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // node ::= element 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = e; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(13/*node*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // thread_label ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = id; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(31/*thread_label*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // thread_type ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = id; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(30/*thread_type*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // thread_name ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = id; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(29/*thread_name*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // thread_inst ::= thread_name LP thread_type COMMA thread_label RP 
            {
              ThreadAST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-5)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		 RESULT = new ThreadAST(e,tt,tl); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(28/*thread_inst*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // thread_inst ::= thread_name LP thread_type RP 
            {
              ThreadAST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		 RESULT = new ThreadAST(e,tt); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(28/*thread_inst*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // element_list ::= element_list COMMA element 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = prev; RESULT.add(e); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(6/*element_list*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // element_list ::= element 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(e); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(6/*element_list*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // node_list ::= node_list COMMA node 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = prev; RESULT.add(e); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(5/*node_list*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // node_list ::= node 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(e); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(5/*node_list*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // thread_list ::= thread_list COMMA thread_inst 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		ThreadAST t = (ThreadAST)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = prev; RESULT.add(t); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(8/*thread_list*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // thread_list ::= thread_inst 
            {
              List RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		ThreadAST t = (ThreadAST)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(t); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(8/*thread_list*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // state_node ::= ID 
            {
              String RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = label; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(25/*state_node*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // state_node ::= LP ID RP 
            {
              String RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		 RESULT = label; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(25/*state_node*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // optional_aut_init ::= AUTINIT ASSIGN state_node 
            {
              String RESULT = null;
		int init_stateleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int init_stateright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String init_state = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = init_state; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(26/*optional_aut_init*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optional_aut_init ::= 
            {
              String RESULT = null;

              CUP$TVSParser$result = new java_cup.runtime.Symbol(26/*optional_aut_init*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // threads ::= THREADS ASSIGN LCBR thread_list RCBR 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		
        for (Iterator i = list.iterator(); i.hasNext(); ) {
			ThreadAST t = (ThreadAST) i.next();
			String e = t.threadName();
			Node node = (Node) nodes.get(e);
			if (node == null) { 
				node = TVMCMacros.newThreadNode(structure, t.entryLabel());
				nodes.put(e, node);
			}
        }
    
              CUP$TVSParser$result = new java_cup.runtime.Symbol(27/*threads*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // threads ::= THREADS ASSIGN LCBR RCBR 
            {
              Object RESULT = null;

              CUP$TVSParser$result = new java_cup.runtime.Symbol(27/*threads*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // threads ::= 
            {
              Object RESULT = null;

              CUP$TVSParser$result = new java_cup.runtime.Symbol(27/*threads*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nodes ::= NODES ASSIGN LCBR node_list RCBR 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		
		for (Iterator i = list.iterator(); i.hasNext(); ) {
			String e = (String)i.next();
			Node node = (Node) nodes.get(e);
			if (node == null) {	
				node = structure.newNode();
				nodes.put(e, node);
			}
			else {
				node = structure.newNode();
				nodes.put(e, node);
			}
	    }
	
              CUP$TVSParser$result = new java_cup.runtime.Symbol(11/*nodes*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nodes ::= NODES ASSIGN LCBR RCBR 
            {
              Object RESULT = null;

              CUP$TVSParser$result = new java_cup.runtime.Symbol(11/*nodes*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // structure ::= NT$1 DESCRIPTION ASSIGN LCBR STRING RCBR nodes iota 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-7)).value;

              CUP$TVSParser$result = new java_cup.runtime.Symbol(10/*structure*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Object RESULT = null;
 structure = TVSFactory.getInstance().makeEmptyTVS(); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(33/*NT$1*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // structure ::= NT$0 messages threads nodes iota optional_aut_init 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-5)).value;
		int msgsleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-4)).left;
		int msgsright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-4)).right;
		List msgs = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-4)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
			if (msgs.isEmpty() == false) 
						structuresMessages.put(structure, msgs);
					parser.initRunnableFromReady(structure);
					parser.setInitialState(structure,is);
				
              CUP$TVSParser$result = new java_cup.runtime.Symbol(10/*structure*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT = null;
 structure = TVSFactory.getInstance().makeEmptyTVS(); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(32/*NT$0*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // structures ::= structures COMMA structure 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).value;
		 RESULT = list; RESULT.add(structure); structure = null; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(3/*structures*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // structures ::= structures structure 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		 RESULT = list; RESULT.add(structure); structure = null; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(3/*structures*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // structures ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(3/*structures*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // location ::= LOCATION label ASSIGN LCBR structures RCBR 
            {
              Location RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-4)).value;
		int storesleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int storesright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		List stores = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		 RESULT = new Location(name); 
		   for (Iterator i = stores.iterator(); i.hasNext(); )
		       RESULT.structures.mergeWith( (HighLevelTVS)i.next() );
		   RESULT.addMessages(structuresMessages);
		   structuresMessages = new HashMap();
		
              CUP$TVSParser$result = new java_cup.runtime.Symbol(9/*location*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // locations ::= locations location 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		int locleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT=locations; RESULT.add(loc); 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(2/*locations*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // locations ::= location 
            {
              List RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 if (locations == null)
			locations = new ArrayList();
		   locations.add(loc); 
		   RESULT = locations;
		
              CUP$TVSParser$result = new java_cup.runtime.Symbol(2/*locations*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tvs ::= locations 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = l; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(1/*tvs*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // tvs ::= structures 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).value;
		 RESULT = s; 
              CUP$TVSParser$result = new java_cup.runtime.Symbol(1/*tvs*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          return CUP$TVSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= tvs EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).right;
		List start_val = (List)((java_cup.runtime.Symbol) CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).value;
		RESULT = start_val;
              CUP$TVSParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVSParser$stack.elementAt(CUP$TVSParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$TVSParser$parser.done_parsing();
          return CUP$TVSParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

