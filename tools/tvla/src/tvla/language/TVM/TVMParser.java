
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Aug 14 19:09:52 GMT-08:00 2009
//----------------------------------------------------

package tvla.language.TVM;

import tvla.logic.*;
import tvla.formulae.*;
import tvla.language.*;
import tvla.language.TVP.*;
import tvla.util.*;
import com.ibm.dk.dps.io.CPreProcessorStream;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Aug 14 19:09:52 GMT-08:00 2009
  */
public class TVMParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TVMParser() {super();}

  /** Constructor which sets the default scanner. */
  public TVMParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\076\015\000\002\070" +
    "\002\000\002\070\003\000\002\073\002\000\002\073\005" +
    "\000\002\032\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\005\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\037\007\000\002\036" +
    "\003\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\003\000" +
    "\002\004\003\000\002\057\013\000\002\003\003\000\002" +
    "\051\002\000\002\051\004\000\002\051\004\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\020\003\000\002\020\005\000\002\021\002\000" +
    "\002\021\003\000\002\017\002\000\002\017\005\000\002" +
    "\022\002\000\002\022\005\000\002\040\012\000\002\041" +
    "\014\000\002\042\006\000\002\031\004\000\002\077\002" +
    "\000\002\077\004\000\002\077\010\000\002\061\002\000" +
    "\002\061\004\000\002\030\002\000\002\030\003\000\002" +
    "\030\004\000\002\047\002\000\002\047\006\000\002\050" +
    "\003\000\002\050\005\000\002\053\002\000\002\053\005" +
    "\000\002\053\004\000\002\056\013\000\002\046\003\000" +
    "\002\046\003\000\002\046\004\000\002\046\004\000\002" +
    "\046\003\000\002\055\010\000\002\055\012\000\002\067" +
    "\002\000\002\067\004\000\002\007\012\000\002\025\002" +
    "\000\002\025\004\000\002\025\003\000\002\026\002\000" +
    "\002\026\004\000\002\026\003\000\002\071\002\000\002" +
    "\071\004\000\002\062\002\000\002\062\004\000\002\064" +
    "\002\000\002\064\004\000\002\063\002\000\002\063\004" +
    "\000\002\024\002\000\002\024\004\000\002\075\002\000" +
    "\002\075\003\000\002\027\002\000\002\027\004\000\002" +
    "\006\003\000\002\006\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\004\000\002\005\004\000\002\011\007" +
    "\000\002\012\007\000\002\013\003\000\002\013\003\000" +
    "\002\013\004\000\002\013\004\000\002\010\021\000\002" +
    "\066\006\000\002\065\003\000\002\065\004\000\002\014" +
    "\010\000\002\014\010\000\002\014\010\000\002\016\003" +
    "\000\002\016\004\000\002\015\006\000\002\072\003\000" +
    "\002\072\004\000\002\074\004\000\002\074\004\000\002" +
    "\052\002\000\002\052\004\000\002\054\006\000\002\034" +
    "\003\000\002\034\003\000\002\033\013\000\002\023\007" +
    "\000\002\023\007\000\002\023\003\000\002\023\016\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\004\000\002\023\011\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\006" +
    "\000\002\023\011\000\002\023\011\000\002\023\003\000" +
    "\002\045\003\000\002\045\005\000\002\044\002\000\002" +
    "\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\016\007\uffe8\010\uffe8\011\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\001\002\000\016\007\u011c\010\u0116\011\u0113" +
    "\042\uffe9\043\u011b\044\u0117\001\002\000\004\042\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\001\001\002" +
    "\000\004\042\011\001\002\000\006\042\uffbe\053\uffbe\001" +
    "\002\000\006\042\013\053\014\001\002\000\004\042\322" +
    "\001\002\000\004\005\016\001\002\000\006\042\uffbd\053" +
    "\uffbd\001\002\000\004\032\017\001\002\000\006\005\020" +
    "\033\uff74\001\002\000\012\033\uff76\035\uff76\037\uff76\047" +
    "\uff76\001\002\000\004\033\025\001\002\000\012\033\uff73" +
    "\035\023\037\uff73\047\uff73\001\002\000\004\005\024\001" +
    "\002\000\012\033\uff75\035\uff75\037\uff75\047\uff75\001\002" +
    "\000\004\036\026\001\002\000\040\007\uffd2\012\uffd2\036" +
    "\uffd2\037\uffd2\050\030\052\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\064\uffd2\072\uffd2\073\uffd2\001" +
    "\002\000\036\007\uffcd\012\046\036\uffcd\037\uffcd\052\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\061\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\072\uffcd\073\uffcd\001\002\000\006\004\035\005\033" +
    "\001\002\000\004\037\032\001\002\000\006\042\uffbc\053" +
    "\uffbc\001\002\000\044\007\uffdb\012\uffdb\024\uffdb\032\uffdb" +
    "\036\uffdb\037\uffdb\046\042\052\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\072\uffdb\073\uffdb" +
    "\001\002\000\040\007\ufff9\012\ufff9\024\ufff9\036\ufff9\037" +
    "\ufff9\052\ufff9\054\ufff9\055\ufff9\056\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\064\ufff9\072\ufff9\073\ufff9\001\002\000\040\007" +
    "\ufffa\012\ufffa\024\ufffa\036\ufffa\037\ufffa\052\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\072" +
    "\ufffa\073\ufffa\001\002\000\040\007\uffd1\012\uffd1\024\037" +
    "\036\uffd1\037\uffd1\052\uffd1\054\uffd1\055\uffd1\056\uffd1\061" +
    "\uffd1\062\uffd1\063\uffd1\064\uffd1\072\uffd1\073\uffd1\001\002" +
    "\000\006\004\035\005\033\001\002\000\040\007\ufff8\012" +
    "\ufff8\024\ufff8\036\ufff8\037\ufff8\052\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\072\ufff8\073" +
    "\ufff8\001\002\000\044\007\uffd6\012\uffd6\023\uffd6\024\uffd6" +
    "\032\uffd6\036\uffd6\037\uffd6\052\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\072\uffd6\073\uffd6" +
    "\001\002\000\004\005\020\001\002\000\006\035\023\047" +
    "\044\001\002\000\044\007\uffda\012\uffda\023\uffda\024\uffda" +
    "\032\uffda\036\uffda\037\uffda\052\uffda\054\uffda\055\uffda\056" +
    "\uffda\061\uffda\062\uffda\063\uffda\064\uffda\072\uffda\073\uffda" +
    "\001\002\000\034\007\215\036\uffa9\037\uffa9\052\uffa9\054" +
    "\uffa9\055\uffa9\056\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9" +
    "\072\uffa9\073\uffa9\001\002\000\004\036\047\001\002\000" +
    "\032\003\065\005\063\013\066\014\053\015\057\020\056" +
    "\021\052\022\061\027\062\030\064\031\072\032\060\001" +
    "\002\000\010\023\175\024\176\032\177\001\002\000\016" +
    "\016\106\017\104\020\107\021\105\035\uffcb\037\uffcb\001" +
    "\002\000\004\051\uff89\001\002\000\004\032\171\001\002" +
    "\000\004\051\142\001\002\000\006\035\137\037\140\001" +
    "\002\000\004\051\uff8a\001\002\000\004\032\124\001\002" +
    "\000\032\003\065\005\063\013\066\014\053\015\057\020" +
    "\056\021\052\022\061\027\062\030\064\031\072\032\060" +
    "\001\002\000\032\003\065\005\063\013\066\014\053\015" +
    "\057\020\056\021\052\022\061\027\062\030\064\031\072" +
    "\032\060\001\002\000\104\002\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\032\ufff7\033\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\046\ufff7\052\ufff7\054\ufff7" +
    "\055\ufff7\056\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\070" +
    "\ufff7\071\ufff7\072\ufff7\073\ufff7\001\002\000\046\023\uffdb" +
    "\024\uffdb\025\ufffb\026\ufffb\032\uffdb\036\uffdb\037\uffdb\046" +
    "\042\052\uffdb\054\uffdb\055\uffdb\056\uffdb\061\uffdb\062\uffdb" +
    "\063\uffdb\064\uffdb\072\uffdb\073\uffdb\001\002\000\104\002" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\032\ufff6\033\ufff6\035\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\046\ufff6\052\ufff6\054\ufff6\055\ufff6\056\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6" +
    "\001\002\000\104\002\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\032\ufff4" +
    "\033\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\046\ufff4\052\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\070\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\001\002\000\004\032\100\001\002" +
    "\000\006\025\073\026\074\001\002\000\104\002\uff85\005" +
    "\uff85\006\uff85\007\uff85\010\uff85\011\uff85\016\uff85\017\uff85" +
    "\020\uff85\021\uff85\032\uff85\033\uff85\035\uff85\036\uff85\037" +
    "\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\046\uff85" +
    "\052\uff85\054\uff85\055\uff85\056\uff85\061\uff85\062\uff85\063" +
    "\uff85\064\uff85\070\uff85\071\uff85\072\uff85\073\uff85\001\002" +
    "\000\104\002\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011" +
    "\uff77\016\uff77\017\uff77\020\uff77\021\uff77\032\uff77\033\uff77" +
    "\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043" +
    "\uff77\044\uff77\046\uff77\052\uff77\054\uff77\055\uff77\056\uff77" +
    "\061\uff77\062\uff77\063\uff77\064\uff77\070\uff77\071\uff77\072" +
    "\uff77\073\uff77\001\002\000\104\002\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\032\ufff5\033\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\044\ufff5\046\ufff5\052\ufff5\054" +
    "\ufff5\055\ufff5\056\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5" +
    "\070\ufff5\071\ufff5\072\ufff5\073\ufff5\001\002\000\004\005" +
    "\075\001\002\000\004\005\075\001\002\000\104\002\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\032\ufffb\033\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\046" +
    "\ufffb\052\ufffb\054\ufffb\055\ufffb\056\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\064\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\001" +
    "\002\000\104\002\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b" +
    "\011\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\032\uff7b\033" +
    "\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b" +
    "\043\uff7b\044\uff7b\046\uff7b\052\uff7b\054\uff7b\055\uff7b\056" +
    "\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b\070\uff7b\071\uff7b" +
    "\072\uff7b\073\uff7b\001\002\000\104\002\uff7c\005\uff7c\006" +
    "\uff7c\007\uff7c\010\uff7c\011\uff7c\016\uff7c\017\uff7c\020\uff7c" +
    "\021\uff7c\032\uff7c\033\uff7c\035\uff7c\036\uff7c\037\uff7c\040" +
    "\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\046\uff7c\052\uff7c" +
    "\054\uff7c\055\uff7c\056\uff7c\061\uff7c\062\uff7c\063\uff7c\064" +
    "\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\001\002\000\006" +
    "\005\020\033\uff74\001\002\000\004\033\102\001\002\000" +
    "\032\003\065\005\063\013\066\014\053\015\057\020\056" +
    "\021\052\022\061\027\062\030\064\031\072\032\060\001" +
    "\002\000\104\002\uff86\005\uff86\006\uff86\007\uff86\010\uff86" +
    "\011\uff86\016\106\017\104\020\107\021\105\032\uff86\033" +
    "\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86" +
    "\043\uff86\044\uff86\046\uff86\052\uff86\054\uff86\055\uff86\056" +
    "\uff86\061\uff86\062\uff86\063\uff86\064\uff86\070\uff86\071\uff86" +
    "\072\uff86\073\uff86\001\002\000\032\003\065\005\063\013" +
    "\066\014\053\015\057\020\056\021\052\022\061\027\062" +
    "\030\064\031\072\032\060\001\002\000\032\003\065\005" +
    "\063\013\066\014\053\015\057\020\056\021\052\022\061" +
    "\027\062\030\064\031\072\032\060\001\002\000\032\003" +
    "\065\005\063\013\066\014\053\015\057\020\056\021\052" +
    "\022\061\027\062\030\064\031\072\032\060\001\002\000" +
    "\032\003\065\005\063\013\066\014\053\015\057\020\056" +
    "\021\052\022\061\027\062\030\064\031\072\032\060\001" +
    "\002\000\104\002\uff82\005\uff82\006\uff82\007\uff82\010\uff82" +
    "\011\uff82\016\uff82\017\uff82\020\uff82\021\105\032\uff82\033" +
    "\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82" +
    "\043\uff82\044\uff82\046\uff82\052\uff82\054\uff82\055\uff82\056" +
    "\uff82\061\uff82\062\uff82\063\uff82\064\uff82\070\uff82\071\uff82" +
    "\072\uff82\073\uff82\001\002\000\104\002\uff80\005\uff80\006" +
    "\uff80\007\uff80\010\uff80\011\uff80\016\uff80\017\104\020\107" +
    "\021\105\032\uff80\033\uff80\035\uff80\036\uff80\037\uff80\040" +
    "\uff80\041\uff80\042\uff80\043\uff80\044\uff80\046\uff80\052\uff80" +
    "\054\uff80\055\uff80\056\uff80\061\uff80\062\uff80\063\uff80\064" +
    "\uff80\070\uff80\071\uff80\072\uff80\073\uff80\001\002\000\104" +
    "\002\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\016" +
    "\uff83\017\uff83\020\uff83\021\uff83\032\uff83\033\uff83\035\uff83" +
    "\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044" +
    "\uff83\046\uff83\052\uff83\054\uff83\055\uff83\056\uff83\061\uff83" +
    "\062\uff83\063\uff83\064\uff83\070\uff83\071\uff83\072\uff83\073" +
    "\uff83\001\002\000\104\002\uff81\005\uff81\006\uff81\007\uff81" +
    "\010\uff81\011\uff81\016\uff81\017\uff81\020\107\021\105\032" +
    "\uff81\033\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81" +
    "\042\uff81\043\uff81\044\uff81\046\uff81\052\uff81\054\uff81\055" +
    "\uff81\056\uff81\061\uff81\062\uff81\063\uff81\064\uff81\070\uff81" +
    "\071\uff81\072\uff81\073\uff81\001\002\000\104\002\uff7f\005" +
    "\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\016\uff7f\017\uff7f" +
    "\020\uff7f\021\uff7f\032\uff7f\033\uff7f\035\uff7f\036\uff7f\037" +
    "\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\046\uff7f" +
    "\052\uff7f\054\uff7f\055\uff7f\056\uff7f\061\uff7f\062\uff7f\063" +
    "\uff7f\064\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\001\002" +
    "\000\016\016\106\017\104\020\107\021\105\033\116\040" +
    "\117\001\002\000\104\002\uff7d\005\uff7d\006\uff7d\007\uff7d" +
    "\010\uff7d\011\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\032" +
    "\uff7d\033\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d" +
    "\042\uff7d\043\uff7d\044\uff7d\046\uff7d\052\uff7d\054\uff7d\055" +
    "\uff7d\056\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\070\uff7d" +
    "\071\uff7d\072\uff7d\073\uff7d\001\002\000\032\003\065\005" +
    "\063\013\066\014\053\015\057\020\056\021\052\022\061" +
    "\027\062\030\064\031\072\032\060\001\002\000\014\016" +
    "\106\017\104\020\107\021\105\041\121\001\002\000\032" +
    "\003\065\005\063\013\066\014\053\015\057\020\056\021" +
    "\052\022\061\027\062\030\064\031\072\032\060\001\002" +
    "\000\014\016\106\017\104\020\107\021\105\033\123\001" +
    "\002\000\104\002\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e" +
    "\011\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\032\uff7e\033" +
    "\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e" +
    "\043\uff7e\044\uff7e\046\uff7e\052\uff7e\054\uff7e\055\uff7e\056" +
    "\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\070\uff7e\071\uff7e" +
    "\072\uff7e\073\uff7e\001\002\000\004\005\075\001\002\000" +
    "\004\035\126\001\002\000\004\005\075\001\002\000\004" +
    "\033\130\001\002\000\004\032\131\001\002\000\004\005" +
    "\075\001\002\000\004\035\133\001\002\000\004\005\075" +
    "\001\002\000\004\033\135\001\002\000\032\003\065\005" +
    "\063\013\066\014\053\015\057\020\056\021\052\022\061" +
    "\027\062\030\064\031\072\032\060\001\002\000\104\002" +
    "\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84\016\106" +
    "\017\104\020\107\021\105\032\uff84\033\uff84\035\uff84\036" +
    "\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84" +
    "\046\uff84\052\uff84\054\uff84\055\uff84\056\uff84\061\uff84\062" +
    "\uff84\063\uff84\064\uff84\070\uff84\071\uff84\072\uff84\073\uff84" +
    "\001\002\000\032\003\065\005\063\013\066\014\053\015" +
    "\057\020\056\021\052\022\061\027\062\030\064\031\072" +
    "\032\060\001\002\000\034\007\uffcc\036\uffcc\037\uffcc\052" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\064\uffcc\072\uffcc\073\uffcc\001\002\000\016\016\106\017" +
    "\104\020\107\021\105\035\uffca\037\uffca\001\002\000\004" +
    "\036\143\001\002\000\032\003\065\005\063\013\066\014" +
    "\053\015\057\020\056\021\052\022\061\027\062\030\064" +
    "\031\072\032\060\001\002\000\014\016\106\017\104\020" +
    "\107\021\105\041\145\001\002\000\004\005\146\001\002" +
    "\000\004\005\147\001\002\000\012\003\uffeb\005\uffeb\032" +
    "\uffeb\036\uffeb\001\002\000\012\003\153\005\151\032\155" +
    "\036\154\001\002\000\014\021\ufff2\024\ufff2\033\ufff2\037" +
    "\ufff2\045\ufff2\001\002\000\012\021\157\024\160\037\170" +
    "\045\162\001\002\000\014\021\uffec\024\uffec\033\uffec\037" +
    "\uffec\045\uffec\001\002\000\006\005\020\037\uff74\001\002" +
    "\000\012\003\153\005\151\032\155\036\154\001\002\000" +
    "\012\021\157\024\160\033\161\045\162\001\002\000\012" +
    "\003\153\005\151\032\155\036\154\001\002\000\012\003" +
    "\153\005\151\032\155\036\154\001\002\000\014\021\uffed" +
    "\024\uffed\033\uffed\037\uffed\045\uffed\001\002\000\012\003" +
    "\153\005\151\032\155\036\154\001\002\000\014\021\uffef" +
    "\024\uffef\033\uffef\037\uffef\045\uffef\001\002\000\014\021" +
    "\ufff0\024\ufff0\033\ufff0\037\ufff0\045\ufff0\001\002\000\014" +
    "\021\uffee\024\160\033\uffee\037\uffee\045\162\001\002\000" +
    "\004\037\167\001\002\000\014\021\ufff1\024\ufff1\033\ufff1" +
    "\037\ufff1\045\ufff1\001\002\000\104\002\uff88\005\uff88\006" +
    "\uff88\007\uff88\010\uff88\011\uff88\016\uff88\017\uff88\020\uff88" +
    "\021\uff88\032\uff88\033\uff88\035\uff88\036\uff88\037\uff88\040" +
    "\uff88\041\uff88\042\uff88\043\uff88\044\uff88\046\uff88\052\uff88" +
    "\054\uff88\055\uff88\056\uff88\061\uff88\062\uff88\063\uff88\064" +
    "\uff88\070\uff88\071\uff88\072\uff88\073\uff88\001\002\000\006" +
    "\005\020\033\uff74\001\002\000\004\033\173\001\002\000" +
    "\032\003\065\005\063\013\066\014\053\015\057\020\056" +
    "\021\052\022\061\027\062\030\064\031\072\032\060\001" +
    "\002\000\104\002\uff87\005\uff87\006\uff87\007\uff87\010\uff87" +
    "\011\uff87\016\106\017\104\020\107\021\105\032\uff87\033" +
    "\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87" +
    "\043\uff87\044\uff87\046\uff87\052\uff87\054\uff87\055\uff87\056" +
    "\uff87\061\uff87\062\uff87\063\uff87\064\uff87\070\uff87\071\uff87" +
    "\072\uff87\073\uff87\001\002\000\004\032\207\001\002\000" +
    "\004\032\202\001\002\000\006\005\020\033\uff74\001\002" +
    "\000\004\033\201\001\002\000\104\002\uff7a\005\uff7a\006" +
    "\uff7a\007\uff7a\010\uff7a\011\uff7a\016\uff7a\017\uff7a\020\uff7a" +
    "\021\uff7a\032\uff7a\033\uff7a\035\uff7a\036\uff7a\037\uff7a\040" +
    "\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\046\uff7a\052\uff7a" +
    "\054\uff7a\055\uff7a\056\uff7a\061\uff7a\062\uff7a\063\uff7a\064" +
    "\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\001\002\000\004" +
    "\005\075\001\002\000\004\035\204\001\002\000\004\005" +
    "\075\001\002\000\004\033\206\001\002\000\104\002\uff78" +
    "\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\016\uff78\017" +
    "\uff78\020\uff78\021\uff78\032\uff78\033\uff78\035\uff78\036\uff78" +
    "\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\046" +
    "\uff78\052\uff78\054\uff78\055\uff78\056\uff78\061\uff78\062\uff78" +
    "\063\uff78\064\uff78\070\uff78\071\uff78\072\uff78\073\uff78\001" +
    "\002\000\004\005\075\001\002\000\004\035\211\001\002" +
    "\000\004\005\075\001\002\000\004\033\213\001\002\000" +
    "\104\002\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79" +
    "\016\uff79\017\uff79\020\uff79\021\uff79\032\uff79\033\uff79\035" +
    "\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79" +
    "\044\uff79\046\uff79\052\uff79\054\uff79\055\uff79\056\uff79\061" +
    "\uff79\062\uff79\063\uff79\064\uff79\070\uff79\071\uff79\072\uff79" +
    "\073\uff79\001\002\000\032\036\uff8d\037\uff8d\052\uff8d\054" +
    "\uff8d\055\uff8d\056\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d" +
    "\072\uff8d\073\uff8d\001\002\000\032\003\065\005\063\013" +
    "\066\014\053\015\057\020\056\021\052\022\061\027\062" +
    "\030\064\031\072\032\060\001\002\000\042\016\106\017" +
    "\104\020\107\021\105\036\uffa8\037\uffa8\052\uffa8\054\uffa8" +
    "\055\uffa8\056\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\072" +
    "\uffa8\073\uffa8\001\002\000\032\036\uffbb\037\uffbb\052\220" +
    "\054\221\055\uffbb\056\uffbb\061\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\072\uffbb\073\uffbb\001\002\000\032\003\065\005\063" +
    "\013\066\014\053\015\057\020\056\021\052\022\061\027" +
    "\062\030\064\031\072\032\060\001\002\000\060\003\065" +
    "\005\063\013\066\014\053\015\057\020\056\021\052\022" +
    "\061\027\062\030\064\031\072\032\060\036\uffb9\037\uffb9" +
    "\052\uffb9\055\uffb9\056\uffb9\061\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\072\uffb9\073\uffb9\001\002\000\030\036\uffb8\037\uffb8" +
    "\052\uffb8\055\225\056\uffb8\061\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\072\uffb8\073\uffb8\001\002\000\032\036\uff8c\037\uff8c" +
    "\052\uff8c\054\uff8c\055\uff8c\056\uff8c\061\uff8c\062\uff8c\063" +
    "\uff8c\064\uff8c\072\uff8c\073\uff8c\001\002\000\026\036\uffb3" +
    "\037\uffb3\052\uffb3\056\uffb3\061\227\062\uffb3\063\uffb3\064" +
    "\uffb3\072\uffb3\073\uffb3\001\002\000\056\003\065\005\063" +
    "\013\066\014\053\015\057\020\056\021\052\022\061\027" +
    "\062\030\064\031\072\032\060\036\uffb6\037\uffb6\052\uffb6" +
    "\056\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\072\uffb6\073" +
    "\uffb6\001\002\000\036\016\106\017\104\020\107\021\105" +
    "\036\uffb7\037\uffb7\052\uffb7\056\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\064\uffb7\072\uffb7\073\uffb7\001\002\000\032\003\065" +
    "\005\063\013\066\014\053\015\057\020\056\021\052\022" +
    "\061\027\062\030\064\031\072\032\060\001\002\000\024" +
    "\036\uffaf\037\uffaf\052\uffaf\056\uffaf\062\231\063\uffaf\064" +
    "\uffaf\072\uffaf\073\uffaf\001\002\000\032\003\065\005\063" +
    "\013\066\014\053\015\057\020\056\021\052\022\061\027" +
    "\062\030\064\031\072\032\060\001\002\000\022\036\uffb1" +
    "\037\uffb1\052\uffb1\056\uffb1\063\233\064\uffb1\072\uffb1\073" +
    "\uffb1\001\002\000\032\003\065\005\063\013\066\014\053" +
    "\015\057\020\056\021\052\022\061\027\062\030\064\031" +
    "\072\032\060\001\002\000\020\036\uffb5\037\uffb5\052\uffb5" +
    "\056\uffb5\064\235\072\uffb5\073\uffb5\001\002\000\004\005" +
    "\311\001\002\000\016\036\uffd0\037\uffd0\052\uffd0\056\uffd0" +
    "\072\237\073\uffd0\001\002\000\044\003\065\005\063\013" +
    "\066\014\053\015\057\020\056\021\052\022\061\027\062" +
    "\030\064\031\072\032\060\036\uffcf\037\uffcf\052\uffcf\056" +
    "\uffcf\073\uffcf\001\002\000\014\036\uffab\037\uffab\052\uffab" +
    "\056\uffab\073\241\001\002\000\012\036\uffaa\037\uffaa\052" +
    "\uffaa\056\uffaa\001\002\000\012\036\243\037\uffc9\052\uffc9" +
    "\056\uffc9\001\002\000\014\003\255\005\033\032\251\037" +
    "\253\043\256\001\002\000\010\037\uffad\052\uffad\056\246" +
    "\001\002\000\006\037\uff8d\052\uff8d\001\002\000\032\003" +
    "\065\005\063\013\066\014\053\015\057\020\056\021\052" +
    "\022\061\027\062\030\064\031\072\032\060\001\002\000" +
    "\016\016\106\017\104\020\107\021\105\037\uffac\052\uffac" +
    "\001\002\000\006\037\uff9b\052\220\001\002\000\004\005" +
    "\033\001\002\000\012\005\uffc5\032\uffc5\037\uffc5\043\uffc5" +
    "\001\002\000\010\037\uffc7\052\uffc7\056\uffc7\001\002\000" +
    "\012\005\033\032\251\037\300\043\256\001\002\000\012" +
    "\005\uffc1\032\uffc1\037\uffc1\043\uffc1\001\002\000\004\032" +
    "\266\001\002\000\004\032\261\001\002\000\012\005\uffc4" +
    "\032\uffc4\037\uffc4\043\uffc4\001\002\000\006\005\020\033" +
    "\uff74\001\002\000\004\033\263\001\002\000\004\034\264" +
    "\001\002\000\032\003\065\005\063\013\066\014\053\015" +
    "\057\020\056\021\052\022\061\027\062\030\064\031\072" +
    "\032\060\001\002\000\022\005\uffc0\016\106\017\104\020" +
    "\107\021\105\032\uffc0\037\uffc0\043\uffc0\001\002\000\004" +
    "\005\267\001\002\000\004\005\147\001\002\000\012\003" +
    "\153\005\151\032\155\036\154\001\002\000\012\021\157" +
    "\024\160\033\272\045\162\001\002\000\004\036\273\001" +
    "\002\000\012\003\255\005\033\032\251\043\256\001\002" +
    "\000\012\005\033\032\251\037\276\043\256\001\002\000" +
    "\012\005\uffc3\032\uffc3\037\uffc3\043\uffc3\001\002\000\012" +
    "\005\uffc6\032\uffc6\037\uffc6\043\uffc6\001\002\000\012\005" +
    "\uffc2\032\uffc2\037\uffc2\043\uffc2\001\002\000\010\037\uffc8" +
    "\052\uffc8\056\uffc8\001\002\000\004\032\302\001\002\000" +
    "\006\005\020\033\uff74\001\002\000\004\033\304\001\002" +
    "\000\004\033\305\001\002\000\004\034\306\001\002\000" +
    "\032\003\065\005\063\013\066\014\053\015\057\020\056" +
    "\021\052\022\061\027\062\030\064\031\072\032\060\001" +
    "\002\000\022\005\uffbf\016\106\017\104\020\107\021\105" +
    "\032\uffbf\037\uffbf\043\uffbf\001\002\000\024\016\106\017" +
    "\104\020\107\021\105\036\uffce\037\uffce\052\uffce\056\uffce" +
    "\073\uffce\001\002\000\016\036\uffb4\037\uffb4\052\uffb4\056" +
    "\uffb4\072\uffb4\073\uffb4\001\002\000\030\016\106\017\104" +
    "\020\107\021\105\036\uffb0\037\uffb0\052\uffb0\056\uffb0\064" +
    "\uffb0\072\uffb0\073\uffb0\001\002\000\032\016\106\017\104" +
    "\020\107\021\105\036\uffae\037\uffae\052\uffae\056\uffae\063" +
    "\uffae\064\uffae\072\uffae\073\uffae\001\002\000\034\016\106" +
    "\017\104\020\107\021\105\036\uffb2\037\uffb2\052\uffb2\056" +
    "\uffb2\062\uffb2\063\uffb2\064\uffb2\072\uffb2\073\uffb2\001\002" +
    "\000\040\016\106\017\104\020\107\021\105\036\uffba\037" +
    "\uffba\052\uffba\055\uffba\056\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\072\uffba\073\uffba\001\002\000\012\016\106\017" +
    "\317\020\107\021\105\001\002\000\034\003\065\004\035" +
    "\005\063\013\066\014\053\015\057\020\056\021\052\022" +
    "\061\027\062\030\064\031\072\032\060\001\002\000\040" +
    "\023\175\024\176\032\177\036\ufff9\037\ufff9\052\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\072\ufff9\073\ufff9\001\002\000\034\024\037\036\uff8b\037" +
    "\uff8b\052\uff8b\054\uff8b\055\uff8b\056\uff8b\061\uff8b\062\uff8b" +
    "\063\uff8b\064\uff8b\072\uff8b\073\uff8b\001\002\000\006\057" +
    "\327\060\323\001\002\000\004\005\u010e\001\002\000\010" +
    "\042\uffa5\057\uffa5\060\uffa5\001\002\000\010\042\370\057" +
    "\327\060\323\001\002\000\010\042\uffa4\057\uffa4\060\uffa4" +
    "\001\002\000\004\005\330\001\002\000\004\036\331\001" +
    "\002\000\010\004\334\005\332\065\337\001\002\000\016" +
    "\004\uffa7\005\uffa7\037\uffa7\065\uffa7\066\uffa7\067\uffa7\001" +
    "\002\000\012\004\uff9e\005\uff9e\037\uff9e\065\uff9e\001\002" +
    "\000\016\004\uffa6\005\uffa6\037\uffa6\065\uffa6\066\uffa6\067" +
    "\uffa6\001\002\000\012\004\uff9f\005\uff9f\037\uff9f\065\uff9f" +
    "\001\002\000\012\004\334\005\332\037\367\065\337\001" +
    "\002\000\004\036\360\001\002\000\010\005\341\066\342" +
    "\067\343\001\002\000\004\032\354\001\002\000\004\032" +
    "\350\001\002\000\004\032\344\001\002\000\032\003\065" +
    "\005\063\013\066\014\053\015\057\020\056\021\052\022" +
    "\061\027\062\030\064\031\072\032\060\001\002\000\014" +
    "\016\106\017\104\020\107\021\105\033\346\001\002\000" +
    "\006\004\334\005\332\001\002\000\012\004\uff95\005\uff95" +
    "\037\uff95\065\uff95\001\002\000\032\003\065\005\063\013" +
    "\066\014\053\015\057\020\056\021\052\022\061\027\062" +
    "\030\064\031\072\032\060\001\002\000\014\016\106\017" +
    "\104\020\107\021\105\033\352\001\002\000\006\004\334" +
    "\005\332\001\002\000\012\004\uff96\005\uff96\037\uff96\065" +
    "\uff96\001\002\000\006\005\020\033\uff74\001\002\000\004" +
    "\033\356\001\002\000\006\004\334\005\332\001\002\000" +
    "\012\004\uff97\005\uff97\037\uff97\065\uff97\001\002\000\006" +
    "\004\334\005\332\001\002\000\010\004\334\005\332\037" +
    "\364\001\002\000\010\004\uff99\005\uff99\037\uff99\001\002" +
    "\000\010\004\uff98\005\uff98\037\uff98\001\002\000\012\004" +
    "\uff9a\005\uff9a\037\uff9a\065\uff9a\001\002\000\012\004\uff9c" +
    "\005\uff9c\037\uff9c\065\uff9c\001\002\000\012\004\uff9d\005" +
    "\uff9d\037\uff9d\065\uff9d\001\002\000\010\042\uffa1\057\uffa1" +
    "\060\uffa1\001\002\000\004\042\373\001\002\000\010\042" +
    "\uffa3\057\uffa3\060\uffa3\001\002\000\010\042\uffa2\057\uffa2" +
    "\060\uffa2\001\002\000\010\002\uffff\005\374\042\uffff\001" +
    "\002\000\004\032\u010b\001\002\000\010\002\ufffe\005\374" +
    "\042\ufffe\001\002\000\006\002\ufffd\042\u0101\001\002\000" +
    "\010\002\uff94\005\uff94\042\uff94\001\002\000\004\002\000" +
    "\001\002\000\004\042\u0102\001\002\000\006\070\u0103\071" +
    "\u0104\001\002\000\032\003\065\005\063\013\066\014\053" +
    "\015\057\020\056\021\052\022\061\027\062\030\064\031" +
    "\072\032\060\001\002\000\032\003\065\005\063\013\066" +
    "\014\053\015\057\020\056\021\052\022\061\027\062\030" +
    "\064\031\072\032\060\001\002\000\010\002\ufffc\070\u0103" +
    "\071\u0104\001\002\000\010\002\uff91\070\uff91\071\uff91\001" +
    "\002\000\010\002\uff90\070\uff90\071\uff90\001\002\000\020" +
    "\002\uff8e\016\106\017\104\020\107\021\105\070\uff8e\071" +
    "\uff8e\001\002\000\020\002\uff8f\016\106\017\104\020\107" +
    "\021\105\070\uff8f\071\uff8f\001\002\000\010\002\uff93\005" +
    "\uff93\042\uff93\001\002\000\006\005\020\033\uff74\001\002" +
    "\000\004\033\u010d\001\002\000\010\002\uff92\005\uff92\042" +
    "\uff92\001\002\000\004\036\u010f\001\002\000\010\004\334" +
    "\005\332\065\337\001\002\000\012\004\334\005\332\037" +
    "\u0111\065\337\001\002\000\010\042\uffa0\057\uffa0\060\uffa0" +
    "\001\002\000\020\007\uffe5\010\uffe5\011\uffe5\037\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\001\002\000\032\003\065\005\063" +
    "\013\066\014\053\015\057\020\056\021\052\022\061\027" +
    "\062\030\064\031\072\032\060\001\002\000\020\007\uffe4" +
    "\010\uffe4\011\uffe4\037\uffe4\042\uffe4\043\uffe4\044\uffe4\001" +
    "\002\000\020\007\uffe2\010\uffe2\011\uffe2\037\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\001\002\000\004\005\u013d\001\002\000" +
    "\004\005\u0139\001\002\000\020\007\uffe3\010\uffe3\011\uffe3" +
    "\037\uffe3\042\uffe3\043\uffe3\044\uffe3\001\002\000\020\007" +
    "\uffe7\010\uffe7\011\uffe7\037\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\001\002\000\020\007\uffe6\010\uffe6\011\uffe6\037\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\001\002\000\004\032\u0131\001\002" +
    "\000\004\005\u011d\001\002\000\006\032\uffdb\046\042\001" +
    "\002\000\004\032\u011f\001\002\000\006\005\020\033\uff74" +
    "\001\002\000\004\033\u0121\001\002\000\026\005\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\036\uffd5\037\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\046\uffd5\001\002\000\026\005\u0123\007\uffdd\010" +
    "\uffdd\011\uffdd\036\u0125\037\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\046\u0126\001\002\000\026\005\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\036\uffd4\037\uffd4\042\uffd4\043\uffd4\044\uffd4\046\uffd4" +
    "\001\002\000\020\007\uffd9\010\uffd9\011\uffd9\037\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\001\002\000\014\003\065\027\062" +
    "\030\064\031\072\037\uffdf\001\002\000\006\005\020\047" +
    "\uff74\001\002\000\004\047\u0128\001\002\000\004\074\u0129" +
    "\001\002\000\004\005\u012a\001\002\000\026\005\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\036\uffd3\037\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\046\uffd3\001\002\000\006\035\u012f\037\uffde\001" +
    "\002\000\004\037\u012e\001\002\000\006\035\uffe1\037\uffe1" +
    "\001\002\000\020\007\uffdc\010\uffdc\011\uffdc\037\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\001\002\000\012\003\065\027\062" +
    "\030\064\031\072\001\002\000\006\035\uffe0\037\uffe0\001" +
    "\002\000\004\005\u0132\001\002\000\004\005\147\001\002" +
    "\000\012\003\153\005\151\032\155\036\154\001\002\000" +
    "\012\021\157\024\160\033\u0135\045\162\001\002\000\004" +
    "\036\u0136\001\002\000\016\007\uffe8\010\uffe8\011\uffe8\037" +
    "\uffe8\043\uffe8\044\uffe8\001\002\000\016\007\u011c\010\u0116" +
    "\011\u0113\037\u0138\043\u011b\044\u0117\001\002\000\020\007" +
    "\uffea\010\uffea\011\uffea\037\uffea\042\uffea\043\uffea\044\uffea" +
    "\001\002\000\004\036\u013a\001\002\000\006\005\020\037" +
    "\uff74\001\002\000\004\037\u013c\001\002\000\020\007\ufff3" +
    "\010\ufff3\011\ufff3\037\ufff3\042\ufff3\043\ufff3\044\ufff3\001" +
    "\002\000\006\032\uffdb\046\042\001\002\000\004\032\u013f" +
    "\001\002\000\006\005\020\033\uff74\001\002\000\004\033" +
    "\u0141\001\002\000\004\034\u0142\001\002\000\032\003\065" +
    "\005\063\013\066\014\053\015\057\020\056\021\052\022" +
    "\061\027\062\030\064\031\072\032\060\001\002\000\036" +
    "\005\uffd5\007\uffd5\010\uffd5\011\uffd5\016\106\017\104\020" +
    "\107\021\105\036\uffd5\037\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\046\uffd5\001\002\000\026\005\u0123\007\uffdd\010\uffdd\011" +
    "\uffdd\036\u0125\037\uffdd\042\uffdd\043\uffdd\044\uffdd\046\u0126" +
    "\001\002\000\020\007\uffd8\010\uffd8\011\uffd8\037\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\001\002\000\014\006\u0147\016\106" +
    "\017\104\020\107\021\105\001\002\000\032\003\065\005" +
    "\063\013\066\014\053\015\057\020\056\021\052\022\061" +
    "\027\062\030\064\031\072\032\060\001\002\000\030\007" +
    "\uffd7\010\uffd7\011\uffd7\016\106\017\104\020\107\021\105" +
    "\037\uffd7\042\uffd7\043\uffd7\044\uffd7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\010\003\004\051\003\076\005\001\001\000" +
    "\016\037\u0117\040\u0111\041\u0113\042\u0114\043\u0118\057\u0119" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\067\011\001\001\000\004" +
    "\007\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\020\045\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\030\061\026\001\001\000\004\047\044\001" +
    "\001\000\006\031\033\060\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\033" +
    "\060\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\213\001\001\000\002\001\001\000\020\023" +
    "\050\031\047\032\066\033\067\034\053\035\070\050\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\023\114\031" +
    "\047\032\066\033\067\034\053\035\070\001\001\000\016" +
    "\023\113\031\047\032\066\033\067\034\053\035\070\001" +
    "\001\000\002\001\001\000\004\022\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\076\001\001\000\004\032\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\044\100\045\021\001\001\000\002\001\001\000\016\023" +
    "\102\031\047\032\066\033\067\034\053\035\070\001\001" +
    "\000\002\001\001\000\016\023\112\031\047\032\066\033" +
    "\067\034\053\035\070\001\001\000\016\023\111\031\047" +
    "\032\066\033\067\034\053\035\070\001\001\000\016\023" +
    "\110\031\047\032\066\033\067\034\053\035\070\001\001" +
    "\000\016\023\107\031\047\032\066\033\067\034\053\035" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\023\117\031\047\032\066" +
    "\033\067\034\053\035\070\001\001\000\002\001\001\000" +
    "\016\023\121\031\047\032\066\033\067\034\053\035\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\124\001\001\000\002\001\001\000\004\032\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\131\001" +
    "\001\000\002\001\001\000\004\032\133\001\001\000\002" +
    "\001\001\000\016\023\135\031\047\032\066\033\067\034" +
    "\053\035\070\001\001\000\002\001\001\000\016\023\140" +
    "\031\047\032\066\033\067\034\053\035\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\023\143\031\047\032\066\033\067\034\053\035\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\147" +
    "\001\001\000\002\001\001\000\004\036\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\044\165\045\021\001\001\000\004\036\155\001\001\000" +
    "\002\001\001\000\004\036\164\001\001\000\004\036\163" +
    "\001\001\000\002\001\001\000\004\036\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\171\045\021\001\001\000\002\001\001\000\016\023\173" +
    "\031\047\032\066\033\067\034\053\035\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\044\177\045\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\202\001\001\000\002\001\001\000\004" +
    "\032\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\207\001\001\000\002\001\001\000\004\032\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\216\001\001\000\016\023\215\031\047\032\066\033\067" +
    "\034\053\035\070\001\001\000\002\001\001\000\006\025" +
    "\221\054\222\001\001\000\016\023\315\031\047\032\066" +
    "\033\067\034\053\035\070\001\001\000\016\023\314\031" +
    "\047\032\066\033\067\034\053\035\070\001\001\000\004" +
    "\026\223\001\001\000\002\001\001\000\004\062\227\001" +
    "\001\000\016\023\225\031\047\032\066\033\067\034\053" +
    "\035\070\001\001\000\002\001\001\000\016\023\313\031" +
    "\047\032\066\033\067\034\053\035\070\001\001\000\004" +
    "\063\231\001\001\000\016\023\312\031\047\032\066\033" +
    "\067\034\053\035\070\001\001\000\004\064\233\001\001" +
    "\000\016\023\311\031\047\032\066\033\067\034\053\035" +
    "\070\001\001\000\004\071\235\001\001\000\002\001\001" +
    "\000\004\030\237\001\001\000\016\023\307\031\047\032" +
    "\066\033\067\034\053\035\070\001\001\000\004\075\241" +
    "\001\001\000\002\001\001\000\004\053\243\001\001\000" +
    "\012\031\256\046\253\055\251\056\257\001\001\000\004" +
    "\024\244\001\001\000\004\052\247\001\001\000\016\023" +
    "\246\031\047\032\066\033\067\034\053\035\070\001\001" +
    "\000\002\001\001\000\004\054\222\001\001\000\004\031" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\256\055\274\056\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\044\261\045\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\023\264\031\047\032\066\033\067\034\053" +
    "\035\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\267\001\001\000\004\036\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\031\256\046\273\055" +
    "\251\056\257\001\001\000\010\031\256\055\274\056\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\302" +
    "\045\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\023\306\031\047\032\066\033\067" +
    "\034\053\035\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\023\112\031\317\032\066\033\067\034\053\035\070" +
    "\060\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\324\011\323\012\325\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\370\012\371\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\337\013\335\014\334\066\332\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\337\014\365\066\364\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\023\344\031\047\032\066\033" +
    "\067\034\053\035\070\001\001\000\002\001\001\000\004" +
    "\006\346\001\001\000\002\001\001\000\016\023\350\031" +
    "\047\032\066\033\067\034\053\035\070\001\001\000\002" +
    "\001\001\000\004\006\352\001\001\000\002\001\001\000" +
    "\006\044\354\045\021\001\001\000\002\001\001\000\004" +
    "\006\356\001\001\000\002\001\001\000\010\006\337\014" +
    "\361\065\360\001\001\000\006\006\337\014\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\376\016\374\070\375\001\001\000\002\001\001\000\004" +
    "\015\u0109\001\001\000\004\073\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\072\u0104" +
    "\074\u0105\001\001\000\016\023\u0108\031\047\032\066\033" +
    "\067\034\053\035\070\001\001\000\016\023\u0107\031\047" +
    "\032\066\033\067\034\053\035\070\001\001\000\004\074" +
    "\u0106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\u010b\045\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\337\013\u010f\014\334\066" +
    "\332\001\001\000\010\006\337\014\365\066\364\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\023\u0145\031" +
    "\047\032\066\033\067\034\053\035\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u011d\001" +
    "\001\000\002\001\001\000\006\044\u011f\045\021\001\001" +
    "\000\002\001\001\000\004\077\u0121\001\001\000\004\017" +
    "\u0123\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\u012a\021\u012b\035\u012c\001\001\000\006\044\u0126\045" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u012f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u0132\001\001\000\004\036\u0133\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u0136\001\001\000\016\037" +
    "\u0117\040\u0111\041\u0113\042\u0114\043\u0118\057\u0119\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\u013a\045" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u013d\001\001\000\002\001\001\000\006\044\u013f\045" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\023\u0142\031\047\032\066\033\067\034\053\035\070\001" +
    "\001\000\004\077\u0143\001\001\000\004\017\u0144\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\023\u0147\031" +
    "\047\032\066\033\067\034\053\035\070\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TVMParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TVMParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TVMParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    static TVMLex scanner;
    static String entry;
    static CPreProcessorStream stream;

    public void report_error(String message, Object info) {
    Logger.println(message + " in line " + stream.getLine(scanner.line_count) + 
            " of file " + stream.getFile(scanner.line_count));
    }

    public static TVMAST configure(String filename, String path) 
                    throws Exception {
	    String infileName = filename + ".tvm";
		stream = new CPreProcessorStream(infileName);
		AddMacrosToPreProcessor.add(stream);

		stream.setSearchPath(path);
		scanner = new TVMLex(new InputStreamReader(stream));
		TVMAST answer = (TVMAST)(new TVMParser(scanner).parse().value);
		return answer;
    }
    
    public static String getEntry() {
            return entry;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TVMParser$actions {
  private final TVMParser parser;

  /** Constructor */
  CUP$TVMParser$actions(TVMParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TVMParser$do_action(
    int                        CUP$TVMParser$act_num,
    java_cup.runtime.lr_parser CUP$TVMParser$parser,
    java.util.Stack            CUP$TVMParser$stack,
    int                        CUP$TVMParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TVMParser$result;

      /* select the action based on the action number */
      switch (CUP$TVMParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // optional_id_list ::= id_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = list; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(34/*optional_id_list*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // optional_id_list ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(34/*optional_id_list*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // id_list ::= id_list COMMA ID 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		  RESULT = list; RESULT.add(id); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(35/*id_list*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // id_list ::= ID 
            {
              List RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(id); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(35/*id_list*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // formula ::= kleene 
            {
              FormulaAST RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		Kleene k = (Kleene)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ValueFormulaAST(k); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // formula ::= predicate PLUS LP var COMMA var RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 Var v1 = new Var("__v1"); 
           Var v2 = new Var("__v2"); 
           RESULT = new TCFormulaAST(l, r, v1, v2, 
                         new PredicateFormulaAST(p, v1, v2));
        
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // formula ::= predicate STAR LP var COMMA var RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 Var v1 = new Var("__v1"); 
           Var v2 = new Var("__v2"); 
           RESULT = new CompositeFormulaAST(new EqualityAST(l, r),
                           new TCFormulaAST(l, r, v1, v2, 
                                 new PredicateFormulaAST(p, v1, v2)),
                           "OrFormula");
        
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // formula ::= predicate LP optional_id_list RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = new PredicateFormulaAST(p, VarAST.asVariables(args)); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // formula ::= var NEQ var 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT  = new CompositeFormulaAST(new EqualityAST(l, r)); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // formula ::= var EQ var 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT  = new EqualityAST(l, r); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // formula ::= LP formula RP 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = f; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // formula ::= LP formula QMARK formula COLON formula RP 
            {
              FormulaAST RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).right;
		FormulaAST fc = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).right;
		FormulaAST ft = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		FormulaAST ff = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = new IfFormulaAST(fc, ft, ff); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // formula ::= NOT formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // formula ::= formula IFF formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "EquivalenceFormula"); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // formula ::= formula IMPLIES formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f2, new CompositeFormulaAST(f1), "OrFormula"); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // formula ::= formula OR formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "OrFormula"); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // formula ::= formula AND formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "AndFormula"); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // formula ::= TC LP var COMMA var RP LP var COMMA var RP formula 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-9)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-9)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).right;
		Var sl = (Var)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).value;
		int srleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		Var sr = (Var)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new TCFormulaAST(l, r, sl, sr, f); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // formula ::= combine 
            {
              FormulaAST RESULT = null;
		int combleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int combright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		CombineAST comb = (CombineAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = comb; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // formula ::= EXISTS LP optional_id_list RP formula 
            {
              FormulaAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new QuantFormulaAST(VarAST.asVariables(list), f, "ExistQuantFormula"); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // formula ::= FORALL LP optional_id_list RP formula 
            {
              FormulaAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new QuantFormulaAST(VarAST.asVariables(list), f, "AllQuantFormula"); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // combine ::= binary_op COMBINE LCBR formula COLON ID in set_expr RCBR 
            {
              CombineAST RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-8)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = new CombineAST(op, f, id, e); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(25/*combine*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // binary_op ::= AND 
            {
              String RESULT = null;
		 RESULT = "AndFormula"; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(26/*binary_op*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // binary_op ::= OR 
            {
              String RESULT = null;
		 RESULT = "OrFormula"; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(26/*binary_op*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // report_message ::= MESSAGE formula IMPLIES message 
            {
              ReportMessageAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		MessageAST m = (MessageAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		RESULT = new ReportMessageAST(f, m); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(42/*report_message*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // report_messages ::= report_messages report_message 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int messleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int messright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		ReportMessageAST mess = (ReportMessageAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		RESULT = prev; RESULT.add(mess); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(40/*report_messages*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // report_messages ::= 
            {
              List RESULT = null;
		RESULT = new ArrayList(); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(40/*report_messages*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // output_modifier ::= OEXCLUDE formula 
            {
              OutputModifierAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new OutputModifierAST(f,false); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(58/*output_modifier*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // output_modifier ::= OINCLUDE formula 
            {
              OutputModifierAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new OutputModifierAST(f,true); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(58/*output_modifier*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // output_modifiers ::= output_modifiers output_modifier 
            {
              OutputModifierSectionAST RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		OutputModifierSectionAST prev = (OutputModifierSectionAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		OutputModifierAST current = (OutputModifierAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = prev; RESULT.add(current); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(56/*output_modifiers*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // output_modifiers ::= output_modifier 
            {
              OutputModifierSectionAST RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		OutputModifierAST first = (OutputModifierAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new OutputModifierSectionAST(); RESULT.add(first); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(56/*output_modifiers*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // global_action ::= ID LP optional_id_list RP 
            {
              GlobalActionAST RESULT = null;
		int macleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left;
		int macright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).right;
		String mac = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = new GlobalActionAST(ActionMacroAST.get(mac).expand(args)); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(11/*global_action*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // property_list ::= property_list global_action 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		GlobalActionAST current = (GlobalActionAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = prev; RESULT.add(current); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(12/*property_list*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // property_list ::= global_action 
            {
              List RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		GlobalActionAST first = (GlobalActionAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(first); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(12/*property_list*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // action_use ::= cfg_node HARDASSERT LP formula RP cfg_node 
            {
              ActionAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new AssertionAST(label,f,true,next); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(10/*action_use*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // action_use ::= cfg_node ASSERT LP formula RP cfg_node 
            {
              ActionAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new AssertionAST(label,f,false,next); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(10/*action_use*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // action_use ::= cfg_node ID LP optional_id_list RP cfg_node 
            {
              ActionAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).value;
		int macleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).left;
		int macright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).right;
		String mac = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ActionAST(label, ActionMacroAST.get(mac).expand(args), next);
        
              CUP$TVMParser$result = new java_cup.runtime.Symbol(10/*action_use*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // action_list ::= action_list action_use 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		ActionAST current = (ActionAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		  RESULT = prev; RESULT.add(current); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(51/*action_list*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // action_list ::= action_use 
            {
              List RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		ActionAST first = (ActionAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(first); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(51/*action_list*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // atomic_block ::= ATOMIC LCBR action_list RCBR 
            {
              AtomicBlockAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = new AtomicBlockAST(list); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(52/*atomic_block*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // action_def ::= title focus precond report_messages new clone tstart twait tstop tnew halting explicitatupd optional_update retain report_messages 
            {
              ActionDefAST RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-14)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-14)).right;
		MessageAST t = (MessageAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-14)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-13)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-13)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-13)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-12)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-12)).right;
		FormulaAST p = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-12)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-11)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-11)).right;
		List m = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-11)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-10)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-10)).right;
		FormulaAST n = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-9)).right;
		FormulaAST c = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-8)).right;
		FormulaAST s = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-8)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).right;
		FormulaAST w = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).right;
		FormulaAST st = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).right;
		ThreadUseAST tn = (ThreadUseAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).right;
		FormulaAST h = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		List u = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		FormulaAST r = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		List pm = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ActionDefAST(t, f, p, m, n, c, u, r, pm, s, w, st, tn, h, e); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(6/*action_def*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-14)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // body_code ::= body_code atomic_block 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		AtomicBlockAST current = (AtomicBlockAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		  RESULT = prev; RESULT.addAll(current.getActions()); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(9/*body_code*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // body_code ::= body_code action_use 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		ActionAST current = (ActionAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		  RESULT = prev; RESULT.add(current); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(9/*body_code*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // body_code ::= atomic_block 
            {
              List RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		AtomicBlockAST first = (AtomicBlockAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.addAll(first.getActions()); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(9/*body_code*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // body_code ::= action_use 
            {
              List RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		ActionAST first = (ActionAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(first); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(9/*body_code*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // method_def ::= METHOD ID LCBR body_code RCBR 
            {
              MethodDefAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List actions = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = new MethodDefAST(id,actions); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(8/*method_def*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // thread_def ::= THREAD ID LCBR body_code RCBR 
            {
              ThreadDefAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List actions = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = new ThreadDefAST(id,actions); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(7/*thread_def*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // code_part ::= code_part method_def 
            {
              ProgramAST RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		ProgramAST prev = (ProgramAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		MethodDefAST current = (MethodDefAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = prev; RESULT.addMethod(current); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(3/*code_part*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // code_part ::= code_part thread_def 
            {
              ProgramAST RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		ProgramAST prev = (ProgramAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		ThreadDefAST current = (ThreadDefAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = prev; RESULT.addThread(current); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(3/*code_part*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // code_part ::= method_def 
            {
              ProgramAST RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		MethodDefAST first = (MethodDefAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ProgramAST(); RESULT.addMethod(first); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(3/*code_part*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // code_part ::= thread_def 
            {
              ProgramAST RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		ThreadDefAST first = (ThreadDefAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ProgramAST(); RESULT.addThread(first); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(3/*code_part*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cfg_node ::= STRING 
            {
              String RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = label; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(4/*cfg_node*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cfg_node ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = id; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(4/*cfg_node*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // precond ::= PRED formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = f; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(21/*precond*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // precond ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(21/*precond*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // explicitatupd ::= EXPLICITAT 
            {
              Boolean RESULT = null;
		 RESULT = Boolean.TRUE; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(59/*explicitatupd*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // explicitatupd ::= 
            {
              Boolean RESULT = null;
		 RESULT = Boolean.FALSE; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(59/*explicitatupd*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // retain ::= RETAIN formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = f; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(18/*retain*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // retain ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(18/*retain*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // twait ::= TWAIT formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = f; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(49/*twait*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // twait ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(49/*twait*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tstop ::= TSTOP formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = f; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(50/*tstop*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tstop ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(50/*tstop*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tstart ::= TSTART formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = f; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(48/*tstart*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tstart ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(48/*tstart*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tnew ::= TNEW ID 
            {
              ThreadUseAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ThreadUseAST(id); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(55/*tnew*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tnew ::= 
            {
              ThreadUseAST RESULT = null;
		 RESULT = null; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(55/*tnew*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // clone ::= CLONE 
            {
              FormulaAST RESULT = null;
		 RESULT = new ValueFormulaAST(Kleene.trueKleene); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(20/*clone*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // clone ::= CLONE formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = f; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(20/*clone*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // clone ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(20/*clone*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // new ::= NEW 
            {
              FormulaAST RESULT = null;
		 RESULT = new ValueFormulaAST(Kleene.trueKleene); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(19/*new*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // new ::= NEW formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = f; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(19/*new*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // new ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(19/*new*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // macro ::= ACTION ID LP optional_id_list RP LCBR action_def RCBR 
            {
              MacroAST RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		ActionDefAST def = (ActionDefAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = new ActionMacroAST(name, args, def); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(5/*macro*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // macros ::= macros macro 
            {
              MacroSectionAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		MacroSectionAST list = (MacroSectionAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		MacroAST single = (MacroAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = list; RESULT.addMacro(single); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(53/*macros*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // macros ::= 
            {
              MacroSectionAST RESULT = null;
		 RESULT = new MacroSectionAST(); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(53/*macros*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // asgn ::= LP predicate LP optional_id_list RP RP ASSIGN formula 
            {
              UpdateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new UpdateAST(p, f, VarAST.asVariables(args)); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(43/*asgn*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asgn ::= predicate LP optional_id_list RP ASSIGN formula 
            {
              UpdateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new UpdateAST(p, f, VarAST.asVariables(args)); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(43/*asgn*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asgns ::= error 
            {
              List RESULT = null;
		 parser.report_error("Illegal assignment ",null); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(36/*asgns*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asgns ::= asgns asgn_foreach 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		ForeachAST a = (ForeachAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = prev; RESULT.add(a); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(36/*asgns*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asgns ::= asgns asgn 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		UpdateAST a = (UpdateAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = prev; RESULT.add(a); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(36/*asgns*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asgns ::= asgn_foreach 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		ForeachAST a = (ForeachAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(a); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(36/*asgns*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asgns ::= asgn 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		UpdateAST a = (UpdateAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(a); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(36/*asgns*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asgn_foreach ::= FOREACH LP ID in set_expr RP LCBR asgns RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(44/*asgn_foreach*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // optional_update ::= LCBR RCBR 
            {
              List RESULT = null;
		RESULT = new ArrayList(); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(41/*optional_update*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // optional_update ::= LCBR asgns RCBR 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = a; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(41/*optional_update*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // optional_update ::= 
            {
              List RESULT = null;
		RESULT = new ArrayList(); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(41/*optional_update*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // focus_formulae ::= focus_formulae COMMA formula 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = prev; RESULT.add(f); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(38/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // focus_formulae ::= formula 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(f); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(38/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // focus ::= FOCUS LCBR focus_formulae RCBR 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = f; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(37/*focus*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // focus ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(37/*focus*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // halting ::= AHALT formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = f; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(22/*halting*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // halting ::= AHALT 
            {
              FormulaAST RESULT = null;
		 RESULT = new ValueFormulaAST(Kleene.trueKleene); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(22/*halting*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // halting ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(22/*halting*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // title ::= TITLE message 
            {
              MessageAST RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		MessageAST str = (MessageAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = str; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(47/*title*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // title ::= 
            {
              MessageAST RESULT = null;
		 RESULT = new MessageStringAST(""); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(47/*title*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // optional_dependency ::= optional_dependency LBR optional_id_list RBR ARROW ID 
            {
              PredicatePropertiesAST RESULT = null;
		int odleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).right;
		List lhs = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String rhs = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 
				RESULT = od;
				RESULT.addFunctionalDependency(lhs,rhs);
			
              CUP$TVMParser$result = new java_cup.runtime.Symbol(61/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // optional_dependency ::= optional_dependency ID 
            {
              PredicatePropertiesAST RESULT = null;
		int odleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 
				RESULT = od;
				RESULT.addProperty(id); 
			
              CUP$TVMParser$result = new java_cup.runtime.Symbol(61/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // optional_dependency ::= 
            {
              PredicatePropertiesAST RESULT = null;
		
				RESULT = new PredicatePropertiesAST();
			
              CUP$TVMParser$result = new java_cup.runtime.Symbol(61/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // predicate ::= ID optional_params 
            {
              PredicateAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = PredicateAST.getPredicateAST(id, params); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(23/*predicate*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cons_rule ::= CONSISTENCY_RULE formula IMPLIES_T formula 
            {
              ConstraintAST RESULT = null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		FormulaAST body = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		FormulaAST head = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new ConstraintAST(body, head); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(32/*cons_rule*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instrum_pred_def ::= INS_PRED ID optional_params LP optional_id_list RP ASSIGN formula optional_dependency show_attr 
            {
              InstrumPredicateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-8)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int odleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 
                od.setArity(args.size());
                RESULT = new InstrumPredicateAST(p, params, 
                                 VarAST.asVariables(args), 
                                 f, od, attr);
             
              CUP$TVMParser$result = new java_cup.runtime.Symbol(31/*instrum_pred_def*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // core_pred_def ::= PRED ID optional_params LP optional_id_list RP optional_dependency show_attr 
            {
              CorePredicateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).value;
		int odleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		  
            od.setArity(args.size());
            RESULT = new CorePredicateAST(p, params, args, args.size(), od, attr);
         
              CUP$TVMParser$result = new java_cup.runtime.Symbol(30/*core_pred_def*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // optional_params ::= LBR id_list RBR 
            {
              List RESULT = null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = params; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(16/*optional_params*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // optional_params ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(16/*optional_params*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // show_attr ::= LCBR optional_show_attr_list RCBR 
            {
              Set RESULT = null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = attr; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(13/*show_attr*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // show_attr ::= 
            {
              Set RESULT = null;
		 RESULT = null; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(13/*show_attr*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // optional_show_attr_list ::= show_attr_list 
            {
              Set RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		Set l = (Set)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = l; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(15/*optional_show_attr_list*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // optional_show_attr_list ::= 
            {
              Set RESULT = null;
		 RESULT = new HashSet(); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(15/*optional_show_attr_list*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // show_attr_list ::= show_attr_list COMMA kleene 
            {
              Set RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		Set list = (Set)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		Kleene a = (Kleene)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = list; RESULT.add(a); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(14/*show_attr_list*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // show_attr_list ::= kleene 
            {
              Set RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		Kleene a = (Kleene)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new HashSet(); RESULT.add(a); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(14/*show_attr_list*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decl ::= cons_rule 
            {
              AST RESULT = null;
		int consleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		ConstraintAST cons = (ConstraintAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = cons; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(33/*decl*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // decl ::= set_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		SetDefAST def = (SetDefAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = def; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(33/*decl*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // decl ::= instrum_pred_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		InstrumPredicateAST def = (InstrumPredicateAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = def; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(33/*decl*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // decl ::= core_pred_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		CorePredicateAST def = (CorePredicateAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = def; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(33/*decl*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decls ::= decls decl_foreach 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		ForeachAST f = (ForeachAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = list; RESULT.add(f); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(39/*decls*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decls ::= decls decl 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		AST single = (AST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = list; RESULT.add(single); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(39/*decls*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decls ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(39/*decls*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decls_done ::= decls 
            {
              DeclarationsAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new DeclarationsAST(list); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(1/*decls_done*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decl_foreach ::= FOREACH LP ID in set_expr RP LCBR decls RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(45/*decl_foreach*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // in ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 if (!id.equals("in")) 
        parser.report_fatal_error("expected 'in'", null); 
    
              CUP$TVMParser$result = new java_cup.runtime.Symbol(2/*in*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // set_expr ::= error 
            {
              SetAST RESULT = null;
		 parser.report_error("Illegal set expression",null); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // set_expr ::= LP set_expr RP 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = e1; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // set_expr ::= set_expr AND set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new SetAndAST(e1, e2); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // set_expr ::= set_expr MINUS set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new SetMinusAST(e1, e2); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // set_expr ::= set_expr PLUS set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new SetPlusAST(e1, e2); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // set_expr ::= LCBR optional_id_list RCBR 
            {
              SetAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = new SetConstantAST(list); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // set_expr ::= ID 
            {
              SetAST RESULT = null;
		int setleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String set = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new SetUseAST(set); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // set_def ::= SET ID LCBR optional_id_list RCBR 
            {
              SetDefAST RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-3)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		List members = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		 RESULT = new SetDefAST(name, members); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(29/*set_def*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // kleene ::= error 
            {
              Kleene RESULT = null;
		 parser.report_error("Illegal Kleene value",null); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(27/*kleene*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // kleene ::= UNKNOWN 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.unknownKleene; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(27/*kleene*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // kleene ::= FALSE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.falseKleene; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(27/*kleene*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // kleene ::= TRUE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.trueKleene; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(27/*kleene*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // message ::= message PLUS message 
            {
              MessageAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).right;
		MessageAST l = (MessageAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		MessageAST r = (MessageAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		RESULT = new MessageCompositeAST(l, r); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(46/*message*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // message ::= predicate 
            {
              MessageAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		RESULT = new MessagePredicateAST(p); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(46/*message*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // message ::= STRING 
            {
              MessageAST RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		RESULT = new MessageStringAST(str); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(46/*message*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var ::= ID 
            {
              Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new Var(id); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(24/*var*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // to_print ::= PERCENT PERCENT output_modifiers 
            {
              OutputModifierSectionAST RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		OutputModifierSectionAST o = (OutputModifierSectionAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = o; 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(57/*to_print*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // to_print ::= 
            {
              OutputModifierSectionAST RESULT = null;

              CUP$TVMParser$result = new java_cup.runtime.Symbol(57/*to_print*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // properties ::= property_list 
            {
              PropertiesAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new PropertiesAST(list); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(54/*properties*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // properties ::= 
            {
              PropertiesAST RESULT = null;
		 RESULT = new PropertiesAST(Collections.EMPTY_LIST); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(54/*properties*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // tvm ::= decls_done PERCENT PERCENT macros PERCENT PERCENT code_part PERCENT PERCENT properties to_print 
            {
              TVMAST RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-10)).right;
		DeclarationsAST d = (DeclarationsAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-10)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).right;
		MacroSectionAST m = (MacroSectionAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-7)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).right;
		ProgramAST cp = (ProgramAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		PropertiesAST p = (PropertiesAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right;
		OutputModifierSectionAST tp = (OutputModifierSectionAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).value;
		 RESULT = new TVMAST(d,m,cp,p,tp); 
              CUP$TVMParser$result = new java_cup.runtime.Symbol(60/*tvm*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-10)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          return CUP$TVMParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= tvm EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).right;
		TVMAST start_val = (TVMAST)((java_cup.runtime.Symbol) CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).value;
		RESULT = start_val;
              CUP$TVMParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TVMParser$stack.elementAt(CUP$TVMParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$TVMParser$parser.done_parsing();
          return CUP$TVMParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

