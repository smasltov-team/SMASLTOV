
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jun 23 07:07:12 GMT 2004
//----------------------------------------------------

package tvla.language.BUC;

import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import tvla.formulae.Var;
import tvla.language.AddMacrosToPreProcessor;
import tvla.language.TVM.DeclarationsAST;
import tvla.language.TVP.AST;
import tvla.language.TVP.CombineAST;
import tvla.language.TVP.CompositeFormulaAST;
import tvla.language.TVP.EqualityAST;
import tvla.language.TVP.ForeachAST;
import tvla.language.TVP.FormulaAST;
import tvla.language.TVP.IfFormulaAST;
import tvla.language.TVP.InstrumPredicateAST;
import tvla.language.TVP.PredicateAST;
import tvla.language.TVP.PredicateFormulaAST;
import tvla.language.TVP.PredicatePropertiesAST;
import tvla.language.TVP.QuantFormulaAST;
import tvla.language.TVP.SetAST;
import tvla.language.TVP.SetAndAST;
import tvla.language.TVP.SetConstantAST;
import tvla.language.TVP.SetMinusAST;
import tvla.language.TVP.SetPlusAST;
import tvla.language.TVP.SetUseAST;
import tvla.language.TVP.TCFormulaAST;
import tvla.language.TVP.ValueFormulaAST;
import tvla.language.TVP.VarAST;
import tvla.logic.Kleene;
import tvla.util.HashSetFactory;
import tvla.util.Logger;

import com.ibm.dk.dps.io.CPreProcessorStream;

/** CUP v0.10k generated parser.
  * @version Wed Jun 23 07:07:12 GMT 2004
  */
public class BUCParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public BUCParser() {super();}

  /** Constructor which sets the default scanner. */
  public BUCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\004\006\000\002\020" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\025\007\000\002\024\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\005\003\000\002\033\013\000\002\003" +
    "\003\000\002\032\002\000\002\032\004\000\002\032\004" +
    "\000\002\027\003\000\002\027\003\000\002\013\003\000" +
    "\002\013\005\000\002\014\002\000\002\014\003\000\002" +
    "\012\002\000\002\012\005\000\002\015\002\000\002\015" +
    "\005\000\002\026\012\000\002\017\004\000\002\035\002" +
    "\000\002\035\004\000\002\035\010\000\002\006\010\000" +
    "\002\034\003\000\002\034\004\000\002\011\005\000\002" +
    "\010\004\000\002\007\005\000\002\007\003\000\002\022" +
    "\003\000\002\022\003\000\002\021\013\000\002\016\007" +
    "\000\002\016\007\000\002\016\003\000\002\016\016\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\004\000\002\016\011\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\006" +
    "\000\002\016\011\000\002\016\011\000\002\016\003\000" +
    "\002\031\003\000\002\031\005\000\002\030\002\000\002" +
    "\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\012\005\ufff1\035\ufff1\036\ufff1\037\ufff1\001" +
    "\002\000\012\005\047\035\ufff2\036\052\037\051\001\002" +
    "\000\004\002\043\001\002\000\004\035\007\001\002\000" +
    "\004\035\010\001\002\000\004\045\012\001\002\000\004" +
    "\002\000\001\002\000\004\004\013\001\002\000\004\031" +
    "\014\001\002\000\004\012\015\001\002\000\006\004\017" +
    "\025\021\001\002\000\006\004\017\025\021\001\002\000" +
    "\010\004\uffd9\025\uffd9\032\uffd9\001\002\000\004\004\031" +
    "\001\002\000\004\004\026\001\002\000\010\004\017\025" +
    "\021\032\024\001\002\000\010\004\uffde\025\uffde\032\uffde" +
    "\001\002\000\004\002\uffdf\001\002\000\010\004\uffdd\025" +
    "\uffdd\032\uffdd\001\002\000\004\026\027\001\002\000\010" +
    "\004\uffda\025\uffda\032\uffda\001\002\000\006\004\017\025" +
    "\021\001\002\000\010\004\uffe6\025\uffe6\041\033\001\002" +
    "\000\012\004\uffe3\016\uffe3\017\uffe3\025\uffe3\001\002\000" +
    "\004\004\034\001\002\000\012\026\uffc4\030\uffc4\032\uffc4" +
    "\042\uffc4\001\002\000\006\030\036\042\037\001\002\000" +
    "\004\004\040\001\002\000\012\004\uffe5\016\uffe5\017\uffe5" +
    "\025\uffe5\001\002\000\012\026\uffc3\030\uffc3\032\uffc3\042" +
    "\uffc3\001\002\000\010\004\uffdc\025\uffdc\032\uffdc\001\002" +
    "\000\006\004\uffdb\025\uffdb\001\002\000\004\002\001\001" +
    "\002\000\014\005\ufff0\032\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\001\002\000\014\005\uffee\032\uffee\035\uffee\036\uffee\037" +
    "\uffee\001\002\000\014\005\uffed\032\uffed\035\uffed\036\uffed" +
    "\037\uffed\001\002\000\004\004\106\001\002\000\014\005" +
    "\uffef\032\uffef\035\uffef\036\uffef\037\uffef\001\002\000\004" +
    "\004\102\001\002\000\004\025\053\001\002\000\004\004" +
    "\054\001\002\000\004\004\056\001\002\000\010\004\057" +
    "\025\062\031\061\001\002\000\010\004\ufff4\025\ufff4\031" +
    "\ufff4\001\002\000\014\014\ufffa\017\ufffa\026\ufffa\032\ufffa" +
    "\040\ufffa\001\002\000\012\014\064\017\065\026\076\040" +
    "\067\001\002\000\006\004\034\032\uffc2\001\002\000\010" +
    "\004\057\025\062\031\061\001\002\000\012\014\064\017" +
    "\065\026\066\040\067\001\002\000\010\004\057\025\062" +
    "\031\061\001\002\000\010\004\057\025\062\031\061\001" +
    "\002\000\014\014\ufff5\017\ufff5\026\ufff5\032\ufff5\040\ufff5" +
    "\001\002\000\010\004\057\025\062\031\061\001\002\000" +
    "\014\014\ufff7\017\ufff7\026\ufff7\032\ufff7\040\ufff7\001\002" +
    "\000\014\014\ufff8\017\ufff8\026\ufff8\032\ufff8\040\ufff8\001" +
    "\002\000\014\014\ufff6\017\065\026\ufff6\032\ufff6\040\067" +
    "\001\002\000\004\032\075\001\002\000\010\026\uffc1\030" +
    "\036\032\uffc1\001\002\000\014\014\ufff9\017\ufff9\026\ufff9" +
    "\032\ufff9\040\ufff9\001\002\000\004\031\077\001\002\000" +
    "\012\005\ufff1\032\ufff1\036\ufff1\037\ufff1\001\002\000\012" +
    "\005\047\032\101\036\052\037\051\001\002\000\014\005" +
    "\ufff3\032\ufff3\035\ufff3\036\ufff3\037\ufff3\001\002\000\004" +
    "\031\103\001\002\000\006\004\034\032\uffc2\001\002\000" +
    "\004\032\105\001\002\000\014\005\ufffb\032\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\001\002\000\004\025\107\001\002\000" +
    "\004\026\110\001\002\000\004\027\111\001\002\000\030" +
    "\004\123\006\117\007\116\010\126\013\131\014\112\015" +
    "\125\022\114\023\120\024\124\025\113\001\002\000\004" +
    "\043\uffd7\001\002\000\030\004\123\006\117\007\116\010" +
    "\126\013\131\014\112\015\125\022\114\023\120\024\124" +
    "\025\113\001\002\000\044\004\ufffe\005\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\026\ufffe\030\ufffe\031\ufffe\032\ufffe" +
    "\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\041\ufffe\042" +
    "\ufffe\001\002\000\040\004\uffc5\005\uffc5\011\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\026\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\041\uffc5\001\002\000\004" +
    "\025\236\001\002\000\004\025\232\001\002\000\044\004" +
    "\ufffd\005\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\026\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\041\ufffd\042\ufffd\001\002\000\004\043\222" +
    "\001\002\000\032\004\uffe2\005\uffe2\011\174\012\172\013" +
    "\175\014\173\031\uffe2\032\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\041\uffe2\001\002\000\016\016\uffe6\017\uffe6\020\uffff\021" +
    "\uffff\025\uffe6\041\033\001\002\000\044\004\ufffc\005\ufffc" +
    "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\026\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\041\ufffc\042\ufffc\001\002\000\030\004\123\006\117\007" +
    "\116\010\126\013\131\014\112\015\125\022\114\023\120" +
    "\024\124\025\113\001\002\000\004\025\157\001\002\000" +
    "\010\016\140\017\141\025\142\001\002\000\040\004\uffd3" +
    "\005\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\026\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\041\uffd3\001\002\000\004\043\uffd8\001\002\000\006\020" +
    "\133\021\134\001\002\000\004\004\135\001\002\000\004" +
    "\004\135\001\002\000\042\004\uffff\005\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\026\uffff\030\uffff\031\uffff\032\uffff" +
    "\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\041\uffff\001" +
    "\002\000\040\004\uffc9\005\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\026\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\041\uffc9\001\002\000\040\004\uffca" +
    "\005\uffca\011\uffca\012\uffca\013\uffca\014\uffca\026\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\041\uffca\001\002\000\004\025\152\001\002\000\004\025" +
    "\145\001\002\000\006\004\034\026\uffc2\001\002\000\004" +
    "\026\144\001\002\000\040\004\uffc8\005\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\026\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\041\uffc8\001\002\000" +
    "\004\004\135\001\002\000\004\030\147\001\002\000\004" +
    "\004\135\001\002\000\004\026\151\001\002\000\040\004" +
    "\uffc6\005\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\026\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\041\uffc6\001\002\000\004\004\135\001\002\000\004" +
    "\030\154\001\002\000\004\004\135\001\002\000\004\026" +
    "\156\001\002\000\040\004\uffc7\005\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\026\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\041\uffc7\001\002\000\004" +
    "\004\135\001\002\000\004\030\161\001\002\000\004\004" +
    "\135\001\002\000\004\026\163\001\002\000\004\025\164" +
    "\001\002\000\004\004\135\001\002\000\004\030\166\001" +
    "\002\000\004\004\135\001\002\000\004\026\170\001\002" +
    "\000\030\004\123\006\117\007\116\010\126\013\131\014" +
    "\112\015\125\022\114\023\120\024\124\025\113\001\002" +
    "\000\040\004\uffd2\005\uffd2\011\174\012\172\013\175\014" +
    "\173\026\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\041\uffd2\001\002\000\030\004\123\006" +
    "\117\007\116\010\126\013\131\014\112\015\125\022\114" +
    "\023\120\024\124\025\113\001\002\000\030\004\123\006" +
    "\117\007\116\010\126\013\131\014\112\015\125\022\114" +
    "\023\120\024\124\025\113\001\002\000\030\004\123\006" +
    "\117\007\116\010\126\013\131\014\112\015\125\022\114" +
    "\023\120\024\124\025\113\001\002\000\030\004\123\006" +
    "\117\007\116\010\126\013\131\014\112\015\125\022\114" +
    "\023\120\024\124\025\113\001\002\000\040\004\uffd0\005" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\173\026\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\041" +
    "\uffd0\001\002\000\040\004\uffce\005\uffce\011\uffce\012\172" +
    "\013\175\014\173\026\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\041\uffce\001\002\000\040" +
    "\004\uffd1\005\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\026" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\041\uffd1\001\002\000\040\004\uffcf\005\uffcf\011" +
    "\uffcf\012\uffcf\013\175\014\173\026\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\041\uffcf\001" +
    "\002\000\040\004\uffcd\005\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\026\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\041\uffcd\001\002\000\022\004\204" +
    "\005\uffe8\031\206\032\uffe8\035\uffe8\036\uffe8\037\uffe8\041" +
    "\207\001\002\000\022\004\uffe1\005\uffe1\031\uffe1\032\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\041\uffe1\001\002\000\014\005" +
    "\uffe4\032\uffe4\035\uffe4\036\uffe4\037\uffe4\001\002\000\006" +
    "\004\034\032\uffc2\001\002\000\012\022\114\023\120\024" +
    "\124\042\uffea\001\002\000\004\042\215\001\002\000\006" +
    "\030\213\042\uffe9\001\002\000\006\030\uffec\042\uffec\001" +
    "\002\000\010\022\114\023\120\024\124\001\002\000\006" +
    "\030\uffeb\042\uffeb\001\002\000\014\005\uffe7\032\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\001\002\000\004\032\217\001\002" +
    "\000\004\044\220\001\002\000\004\004\221\001\002\000" +
    "\022\004\uffe0\005\uffe0\031\uffe0\032\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\041\uffe0\001\002\000\004\031\223\001\002\000" +
    "\030\004\123\006\117\007\116\010\126\013\131\014\112" +
    "\015\125\022\114\023\120\024\124\025\113\001\002\000" +
    "\014\011\174\012\172\013\175\014\173\034\225\001\002" +
    "\000\004\004\226\001\002\000\004\004\056\001\002\000" +
    "\010\004\057\025\062\031\061\001\002\000\012\014\064" +
    "\017\065\032\231\040\067\001\002\000\040\004\uffd6\005" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\026\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\041" +
    "\uffd6\001\002\000\006\004\034\026\uffc2\001\002\000\004" +
    "\026\234\001\002\000\030\004\123\006\117\007\116\010" +
    "\126\013\131\014\112\015\125\022\114\023\120\024\124" +
    "\025\113\001\002\000\040\004\uffd4\005\uffd4\011\174\012" +
    "\172\013\175\014\173\026\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\001\002\000" +
    "\006\004\034\026\uffc2\001\002\000\004\026\240\001\002" +
    "\000\030\004\123\006\117\007\116\010\126\013\131\014" +
    "\112\015\125\022\114\023\120\024\124\025\113\001\002" +
    "\000\040\004\uffd5\005\uffd5\011\174\012\172\013\175\014" +
    "\173\026\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\041\uffd5\001\002\000\016\011\174\012" +
    "\172\013\175\014\173\026\244\033\243\001\002\000\030" +
    "\004\123\006\117\007\116\010\126\013\131\014\112\015" +
    "\125\022\114\023\120\024\124\025\113\001\002\000\040" +
    "\004\uffcb\005\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\026" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\041\uffcb\001\002\000\014\011\174\012\172\013" +
    "\175\014\173\034\246\001\002\000\030\004\123\006\117" +
    "\007\116\010\126\013\131\014\112\015\125\022\114\023" +
    "\120\024\124\025\113\001\002\000\014\011\174\012\172" +
    "\013\175\014\173\026\250\001\002\000\040\004\uffcc\005" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\026\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\041" +
    "\uffcc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\010\003\005\004\004\032\003\001\001\000" +
    "\012\025\045\026\044\027\043\033\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\015\001\001\000\004\007\041\001" +
    "\001\000\010\007\017\011\022\034\021\001\001\000\002" +
    "\001\001\000\004\017\027\001\001\000\002\001\001\000" +
    "\006\007\017\011\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\040\001\001\000\004\015\031\001\001" +
    "\000\002\001\001\000\004\031\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\054" +
    "\001\001\000\004\024\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\072\031\073" +
    "\001\001\000\004\024\062\001\001\000\002\001\001\000" +
    "\004\024\071\001\001\000\004\024\070\001\001\000\002" +
    "\001\001\000\004\024\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\077\001\001\000\012\025\045\026\044\027\043\033\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\103\031\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\121\017\126\020\131\021\127\022\120\023\114" +
    "\001\001\000\002\001\001\000\016\016\241\017\126\020" +
    "\131\021\127\022\120\023\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\202\001\001" +
    "\000\004\015\031\001\001\000\002\001\001\000\016\016" +
    "\201\017\126\020\131\021\127\022\120\023\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\136\001\001" +
    "\000\004\020\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\142\031\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\145\001\001\000\002\001\001" +
    "\000\004\020\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\152\001\001\000\002\001\001\000\004" +
    "\020\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\157\001\001\000\002\001\001\000\004\020\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\164\001\001\000\002\001\001\000\004\020\166\001\001" +
    "\000\002\001\001\000\016\016\170\017\126\020\131\021" +
    "\127\022\120\023\114\001\001\000\002\001\001\000\016" +
    "\016\200\017\126\020\131\021\127\022\120\023\114\001" +
    "\001\000\016\016\177\017\126\020\131\021\127\022\120" +
    "\023\114\001\001\000\016\016\176\017\126\020\131\021" +
    "\127\022\120\023\114\001\001\000\016\016\175\017\126" +
    "\020\131\021\127\022\120\023\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\215\031\073\001\001" +
    "\000\010\013\210\014\207\023\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\223\017\126\020\131\021" +
    "\127\022\120\023\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\226\001\001\000\004\024\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\232" +
    "\031\073\001\001\000\002\001\001\000\016\016\234\017" +
    "\126\020\131\021\127\022\120\023\114\001\001\000\002" +
    "\001\001\000\006\030\236\031\073\001\001\000\002\001" +
    "\001\000\016\016\240\017\126\020\131\021\127\022\120" +
    "\023\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\244\017\126\020\131\021\127\022\120\023\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\016" +
    "\246\017\126\020\131\021\127\022\120\023\114\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$BUCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$BUCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$BUCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    static BUCLex scanner;
    static String entry;
    static CPreProcessorStream stream;

    public void report_error(String message, Object info) {
    Logger.println(message + " in line " + stream.getLine(scanner.line_count) + 
            " of file " + stream.getFile(scanner.line_count));
    }

    public static BuchiAutomatonAST configure(String filename, String path) 
                    throws Exception {
    String infileName = filename + ".buc";
    stream = new CPreProcessorStream(infileName);
	AddMacrosToPreProcessor.add(stream);

    stream.setSearchPath(path);
    scanner = new BUCLex(new InputStreamReader(stream));
   
    return (BuchiAutomatonAST)(new BUCParser(scanner).parse().value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$BUCParser$actions {
  private final BUCParser parser;

  /** Constructor */
  CUP$BUCParser$actions(BUCParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$BUCParser$do_action(
    int                        CUP$BUCParser$act_num,
    java_cup.runtime.lr_parser CUP$BUCParser$parser,
    java.util.Stack            CUP$BUCParser$stack,
    int                        CUP$BUCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$BUCParser$result;

      /* select the action based on the action number */
      switch (CUP$BUCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // optional_id_list ::= id_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = list; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(22/*optional_id_list*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // optional_id_list ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(22/*optional_id_list*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // id_list ::= id_list COMMA ID 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		  RESULT = list; RESULT.add(id); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(23/*id_list*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // id_list ::= ID 
            {
              List RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(id); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(23/*id_list*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // formula ::= kleene 
            {
              FormulaAST RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		Kleene k = (Kleene)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new ValueFormulaAST(k); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // formula ::= predicate PLUS LP var COMMA var RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 Var v1 = new Var("__v1"); 
           Var v2 = new Var("__v2"); 
           RESULT = new TCFormulaAST(l, r, v1, v2, 
                         new PredicateFormulaAST(p, v1, v2));
        
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // formula ::= predicate STAR LP var COMMA var RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 Var v1 = new Var("__v1"); 
           Var v2 = new Var("__v2"); 
           RESULT = new CompositeFormulaAST(new EqualityAST(l, r),
                           new TCFormulaAST(l, r, v1, v2, 
                                 new PredicateFormulaAST(p, v1, v2)),
                           "OrFormula");
        
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // formula ::= predicate LP optional_id_list RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 RESULT = new PredicateFormulaAST(p, VarAST.asVariables(args)); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // formula ::= var NEQ var 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT  = new CompositeFormulaAST(new EqualityAST(l, r)); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // formula ::= var EQ var 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT  = new EqualityAST(l, r); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // formula ::= LP formula RP 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 RESULT = f; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // formula ::= LP formula QMARK formula COLON formula RP 
            {
              FormulaAST RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-5)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-5)).right;
		FormulaAST fc = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-5)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).right;
		FormulaAST ft = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		FormulaAST ff = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 RESULT = new IfFormulaAST(fc, ft, ff); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // formula ::= NOT formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // formula ::= formula IFF formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "EquivalenceFormula"); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // formula ::= formula IMPLIES formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f2, new CompositeFormulaAST(f1), "OrFormula"); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // formula ::= formula OR formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "OrFormula"); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // formula ::= formula AND formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "AndFormula"); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // formula ::= TC LP var COMMA var RP LP var COMMA var RP formula 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-9)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-9)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-7)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-7)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-4)).right;
		Var sl = (Var)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-4)).value;
		int srleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		Var sr = (Var)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new TCFormulaAST(l, r, sl, sr, f); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // formula ::= combine 
            {
              FormulaAST RESULT = null;
		int combleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int combright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		CombineAST comb = (CombineAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = comb; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // formula ::= EXISTS LP optional_id_list RP formula 
            {
              FormulaAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new QuantFormulaAST(VarAST.asVariables(list), f, "ExistQuantFormula"); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // formula ::= FORALL LP optional_id_list RP formula 
            {
              FormulaAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new QuantFormulaAST(VarAST.asVariables(list), f, "AllQuantFormula"); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(12/*formula*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // combine ::= binary_op COMBINE LCBR formula COLON ID in set_expr RCBR 
            {
              CombineAST RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-8)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-5)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 RESULT = new CombineAST(op, f, id, e); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(15/*combine*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // binary_op ::= AND 
            {
              String RESULT = null;
		 RESULT = "AndFormula"; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(16/*binary_op*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // binary_op ::= OR 
            {
              String RESULT = null;
		 RESULT = "OrFormula"; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(16/*binary_op*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // state_node ::= ID 
            {
              BuchiStateAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new BuchiStateAST(label,false); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(5/*state_node*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // state_node ::= LP ID RP 
            {
              BuchiStateAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 RESULT = new BuchiStateAST(label,true); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(5/*state_node*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // initial_state ::= IMPLIES state_node 
            {
              BuchiStateAST RESULT = null;
		int sourceleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int sourceright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		BuchiStateAST source = (BuchiStateAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = source; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(6/*initial_state*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // transition ::= state_node predicate state_node 
            {
              BuchiTransitionAST RESULT = null;
		int sourceleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int sourceright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		BuchiStateAST source = (BuchiStateAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		PredicateAST label = (PredicateAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		int targetleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		BuchiStateAST target = (BuchiStateAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new BuchiTransitionAST(source, label, target);
        
              CUP$BUCParser$result = new java_cup.runtime.Symbol(7/*transition*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // transition_list ::= transition_list transition 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		BuchiTransitionAST current = (BuchiTransitionAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		  RESULT = prev; RESULT.add(current); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(26/*transition_list*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // transition_list ::= transition 
            {
              List RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		BuchiTransitionAST first = (BuchiTransitionAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(first); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(26/*transition_list*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // buchi_aut ::= BUCHI ID LCBR initial_state transition_list RCBR 
            {
              BuchiAutomatonAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-4)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		BuchiStateAST init = (BuchiStateAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		List actions = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 RESULT = new BuchiAutomatonAST(id,init,actions); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(4/*buchi_aut*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optional_dependency ::= optional_dependency LCBR optional_id_list RCBR ARROW ID 
            {
              PredicatePropertiesAST RESULT = null;
		int odleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-5)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-5)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-5)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).right;
		List lhs = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		String rhs = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 
				RESULT = od;
				RESULT.addFunctionalDependency(lhs,rhs);
			
              CUP$BUCParser$result = new java_cup.runtime.Symbol(27/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // optional_dependency ::= optional_dependency ID 
            {
              PredicatePropertiesAST RESULT = null;
		int odleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 
				RESULT = od;
				RESULT.addProperty(id); 
			
              CUP$BUCParser$result = new java_cup.runtime.Symbol(27/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // optional_dependency ::= 
            {
              PredicatePropertiesAST RESULT = null;
		
				RESULT = new PredicatePropertiesAST();
			
              CUP$BUCParser$result = new java_cup.runtime.Symbol(27/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // predicate ::= ID optional_params 
            {
              PredicateAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = PredicateAST.getPredicateAST(id, params); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(13/*predicate*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nullary_inst_pred_def ::= INS_PRED ID LP RP ASSIGN formula optional_dependency show_attr 
            {
              InstrumPredicateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int odleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		
                        RESULT = new InstrumPredicateAST(p, new ArrayList(), 
                                 VarAST.asVariables(new ArrayList()), 
                                 f, od, attr); 
                        
              CUP$BUCParser$result = new java_cup.runtime.Symbol(20/*nullary_inst_pred_def*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // optional_params ::= LBR id_list RBR 
            {
              List RESULT = null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 RESULT = params; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(11/*optional_params*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // optional_params ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(11/*optional_params*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // show_attr ::= LBR optional_show_attr_list RBR 
            {
              Set RESULT = null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 RESULT = attr; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(8/*show_attr*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // show_attr ::= 
            {
              Set RESULT = null;
		 RESULT = null; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(8/*show_attr*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // optional_show_attr_list ::= show_attr_list 
            {
              Set RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		Set l = (Set)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = l; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(10/*optional_show_attr_list*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // optional_show_attr_list ::= 
            {
              Set RESULT = null;
		 RESULT = HashSetFactory.make(); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(10/*optional_show_attr_list*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // show_attr_list ::= show_attr_list COMMA kleene 
            {
              Set RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		Set list = (Set)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		Kleene a = (Kleene)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = list; RESULT.add(a); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(9/*show_attr_list*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // show_attr_list ::= kleene 
            {
              Set RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		Kleene a = (Kleene)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = HashSetFactory.make(); RESULT.add(a); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(9/*show_attr_list*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decl ::= set_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		tvla.language.TVM.SetDefAST def = (tvla.language.TVM.SetDefAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = def; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(21/*decl*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl ::= nullary_inst_pred_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		InstrumPredicateAST def = (InstrumPredicateAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = def; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(21/*decl*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decls ::= decls decl_foreach 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		ForeachAST f = (ForeachAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = list; RESULT.add(f); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(24/*decls*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decls ::= decls decl 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		AST single = (AST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = list; RESULT.add(single); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(24/*decls*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decls ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(24/*decls*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarations ::= decls 
            {
              DeclarationsAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 
                RESULT = new DeclarationsAST(list); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(1/*declarations*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl_foreach ::= FOREACH LP ID in set_expr RP LCBR decls RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(25/*decl_foreach*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // in ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 if (!id.equals("in")) 
        parser.report_fatal_error("expected 'in'", null); 
    
              CUP$BUCParser$result = new java_cup.runtime.Symbol(3/*in*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // set_expr ::= LP set_expr RP 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 RESULT = e1; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(18/*set_expr*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // set_expr ::= set_expr AND set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new SetAndAST(e1, e2); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(18/*set_expr*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // set_expr ::= set_expr MINUS set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new SetMinusAST(e1, e2); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(18/*set_expr*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // set_expr ::= set_expr PLUS set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new SetPlusAST(e1, e2); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(18/*set_expr*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // set_expr ::= LCBR optional_id_list RCBR 
            {
              SetAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 RESULT = new SetConstantAST(list); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(18/*set_expr*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // set_expr ::= ID 
            {
              SetAST RESULT = null;
		int setleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		String set = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new SetUseAST(set); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(18/*set_expr*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // set_def ::= SET ID LCBR optional_id_list RCBR 
            {
              tvla.language.TVM.SetDefAST RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		List members = (List)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		 RESULT = new tvla.language.TVM.SetDefAST(name, members); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(19/*set_def*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // kleene ::= UNKNOWN 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.unknownKleene; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(17/*kleene*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // kleene ::= FALSE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.falseKleene; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(17/*kleene*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // kleene ::= TRUE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.trueKleene; 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(17/*kleene*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // var ::= ID 
            {
              Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		 RESULT = new Var(id); 
              CUP$BUCParser$result = new java_cup.runtime.Symbol(14/*var*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // buc ::= declarations PERCENT PERCENT buchi_aut 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).right;
		DeclarationsAST d = (DeclarationsAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right;
		BuchiAutomatonAST cp = (BuchiAutomatonAST)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).value;
		  //cp.generate();
        cp.declarations(d);
        //d.generate();
        //cp.compile();
        RESULT = cp; 
    
              CUP$BUCParser$result = new java_cup.runtime.Symbol(2/*buc*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          return CUP$BUCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= buc EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).value;
		RESULT = start_val;
              CUP$BUCParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BUCParser$stack.elementAt(CUP$BUCParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$BUCParser$parser.done_parsing();
          return CUP$BUCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

