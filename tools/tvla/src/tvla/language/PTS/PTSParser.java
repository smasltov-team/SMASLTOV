
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Aug 14 19:09:56 GMT-08:00 2009
//----------------------------------------------------

package tvla.language.PTS;

import tvla.logic.*;
import tvla.formulae.*;
import tvla.language.*;
import tvla.util.Logger;
import tvla.language.TVP.*;
import com.ibm.dk.dps.io.CPreProcessorStream;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Aug 14 19:09:56 GMT-08:00 2009
  */
public class PTSParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PTSParser() {super();}

  /** Constructor which sets the default scanner. */
  public PTSParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\002\004\000\002\110\003\000\002\110" +
    "\003\000\002\111\006\000\002\065\017\000\002\031\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\005\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\037\005\000\002\036\003\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\003\000\002\003\003\000" +
    "\002\051\002\000\002\051\004\000\002\051\004\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\057\013\000\002\004\003\000\002\040\012" +
    "\000\002\041\014\000\002\022\002\000\002\022\005\000" +
    "\002\017\002\000\002\017\005\000\002\021\002\000\002" +
    "\021\003\000\002\020\003\000\002\020\005\000\002\042" +
    "\006\000\002\030\004\000\002\066\002\000\002\066\004" +
    "\000\002\066\010\000\002\062\002\000\002\062\004\000" +
    "\002\063\002\000\002\063\004\000\002\005\012\000\002" +
    "\006\014\000\002\061\002\000\002\061\004\000\002\047" +
    "\002\000\002\047\006\000\002\050\003\000\002\050\005" +
    "\000\002\027\002\000\002\027\004\000\002\052\002\000" +
    "\002\052\004\000\002\054\006\000\002\025\002\000\002" +
    "\025\004\000\002\025\003\000\002\026\002\000\002\026" +
    "\004\000\002\026\003\000\002\034\002\000\002\034\005" +
    "\000\002\053\002\000\002\053\005\000\002\053\004\000" +
    "\002\046\003\000\002\046\003\000\002\046\004\000\002" +
    "\046\004\000\002\046\003\000\002\055\010\000\002\055" +
    "\012\000\002\056\013\000\002\024\002\000\002\024\004" +
    "\000\002\007\003\000\002\010\003\000\002\010\004\000" +
    "\002\011\007\000\002\011\007\000\002\011\007\000\002" +
    "\012\003\000\002\012\004\000\002\014\010\000\002\014" +
    "\023\000\002\014\025\000\002\014\023\000\002\014\025" +
    "\000\002\014\031\000\002\014\033\000\002\013\003\000" +
    "\002\013\003\000\002\016\002\000\002\016\003\000\002" +
    "\015\003\000\002\015\005\000\002\015\003\000\002\015" +
    "\005\000\002\064\002\000\002\064\006\000\002\064\006" +
    "\000\002\033\003\000\002\033\003\000\002\032\013\000" +
    "\002\023\007\000\002\023\007\000\002\023\003\000\002" +
    "\023\016\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\004\000\002\023\011" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\006\000\002\023\011\000\002\023\011\000\002" +
    "\023\003\000\002\045\003\000\002\045\005\000\002\044" +
    "\002\000\002\044\003\000\002\067\044\000\002\076\002" +
    "\000\002\076\003\000\002\070\004\000\002\070\005\000" +
    "\002\077\002\000\002\077\003\000\002\071\004\000\002" +
    "\071\005\000\002\100\002\000\002\100\003\000\002\072" +
    "\005\000\002\072\006\000\002\101\002\000\002\101\003" +
    "\000\002\073\005\000\002\073\006\000\002\102\002\000" +
    "\002\102\003\000\002\074\005\000\002\074\006\000\002" +
    "\103\002\000\002\103\003\000\002\075\003\000\002\075" +
    "\004\000\002\104\003\000\002\104\003\000\002\104\003" +
    "\000\002\105\013\000\002\106\014\000\002\107\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01fe\000\020\010\uffeb\011\uffeb\012\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\071\010\001\002\000\004\002\u0200\001\002" +
    "\000\004\044\u0160\001\002\000\016\010\u0135\011\u012f\012" +
    "\u012c\044\uffec\045\u0134\046\u0130\001\002\000\004\044\163" +
    "\001\002\000\004\004\013\001\002\000\004\002\000\001" +
    "\002\000\004\002\uffff\001\002\000\004\043\014\001\002" +
    "\000\004\006\015\001\002\000\004\043\016\001\002\000" +
    "\004\006\017\001\002\000\004\043\020\001\002\000\004" +
    "\006\021\001\002\000\004\043\022\001\002\000\004\006" +
    "\023\001\002\000\004\044\024\001\002\000\004\044\025" +
    "\001\002\000\004\044\026\001\002\000\006\044\uff7a\073" +
    "\027\001\002\000\004\005\162\001\002\000\006\044\uff79" +
    "\073\160\001\002\000\004\044\032\001\002\000\004\044" +
    "\033\001\002\000\004\044\034\001\002\000\006\044\uff76" +
    "\072\037\001\002\000\004\044\043\001\002\000\006\044" +
    "\uff75\072\041\001\002\000\004\005\040\001\002\000\006" +
    "\044\uff74\072\uff74\001\002\000\004\005\042\001\002\000" +
    "\006\044\uff73\072\uff73\001\002\000\004\044\044\001\002" +
    "\000\004\044\045\001\002\000\006\044\uff72\075\050\001" +
    "\002\000\006\044\uff71\075\155\001\002\000\004\044\053" +
    "\001\002\000\004\005\051\001\002\000\004\005\052\001" +
    "\002\000\006\044\uff70\075\uff70\001\002\000\004\044\054" +
    "\001\002\000\004\044\055\001\002\000\006\044\uff6e\074" +
    "\057\001\002\000\004\044\066\001\002\000\004\005\064" +
    "\001\002\000\006\044\uff6d\074\061\001\002\000\004\005" +
    "\062\001\002\000\004\005\063\001\002\000\006\044\uff6b" +
    "\074\uff6b\001\002\000\004\005\065\001\002\000\006\044" +
    "\uff6c\074\uff6c\001\002\000\004\044\067\001\002\000\004" +
    "\044\070\001\002\000\006\044\uff6a\076\072\001\002\000" +
    "\004\044\101\001\002\000\004\005\077\001\002\000\006" +
    "\044\uff69\076\074\001\002\000\004\005\075\001\002\000" +
    "\004\005\076\001\002\000\006\044\uff67\076\uff67\001\002" +
    "\000\004\005\100\001\002\000\006\044\uff68\076\uff68\001" +
    "\002\000\004\044\102\001\002\000\004\044\103\001\002" +
    "\000\012\044\uff66\063\107\064\114\065\113\001\002\000" +
    "\012\044\uff60\063\uff60\064\uff60\065\uff60\001\002\000\012" +
    "\044\uff65\063\107\064\114\065\113\001\002\000\012\044" +
    "\uff61\063\uff61\064\uff61\065\uff61\001\002\000\004\004\143" +
    "\001\002\000\012\044\uff62\063\uff62\064\uff62\065\uff62\001" +
    "\002\000\004\044\uff7b\001\002\000\012\044\uff64\063\uff64" +
    "\064\uff64\065\uff64\001\002\000\004\004\133\001\002\000" +
    "\004\004\115\001\002\000\004\042\116\001\002\000\004" +
    "\033\117\001\002\000\006\005\120\034\uff7d\001\002\000" +
    "\012\034\uff7f\036\uff7f\040\uff7f\051\uff7f\001\002\000\004" +
    "\034\125\001\002\000\012\034\uff7c\036\123\040\uff7c\051" +
    "\uff7c\001\002\000\004\005\124\001\002\000\012\034\uff7e" +
    "\036\uff7e\040\uff7e\051\uff7e\001\002\000\004\042\126\001" +
    "\002\000\006\004\130\005\127\001\002\000\026\004\uff9e" +
    "\005\uff9e\040\uff9e\044\uff9e\063\uff9e\064\uff9e\065\uff9e\066" +
    "\uff9e\067\uff9e\070\uff9e\001\002\000\026\004\uff9d\005\uff9d" +
    "\040\uff9d\044\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067" +
    "\uff9d\070\uff9d\001\002\000\006\004\130\005\127\001\002" +
    "\000\012\044\uff5f\063\uff5f\064\uff5f\065\uff5f\001\002\000" +
    "\004\042\134\001\002\000\004\033\135\001\002\000\006" +
    "\005\120\034\uff7d\001\002\000\004\034\137\001\002\000" +
    "\004\042\140\001\002\000\006\004\130\005\127\001\002" +
    "\000\006\004\130\005\127\001\002\000\012\044\uff5d\063" +
    "\uff5d\064\uff5d\065\uff5d\001\002\000\004\042\144\001\002" +
    "\000\004\005\145\001\002\000\004\033\146\001\002\000" +
    "\006\005\120\034\uff7d\001\002\000\004\034\150\001\002" +
    "\000\004\042\151\001\002\000\006\004\130\005\127\001" +
    "\002\000\006\004\130\005\127\001\002\000\012\044\uff5e" +
    "\063\uff5e\064\uff5e\065\uff5e\001\002\000\012\044\uff63\063" +
    "\uff63\064\uff63\065\uff63\001\002\000\004\005\156\001\002" +
    "\000\004\005\157\001\002\000\006\044\uff6f\075\uff6f\001" +
    "\002\000\004\005\161\001\002\000\006\044\uff77\073\uff77" +
    "\001\002\000\006\044\uff78\073\uff78\001\002\000\004\044" +
    "\164\001\002\000\006\002\uffd1\055\uffd1\001\002\000\006" +
    "\002\ufffe\055\166\001\002\000\004\005\170\001\002\000" +
    "\006\002\uffd0\055\uffd0\001\002\000\004\033\171\001\002" +
    "\000\006\005\120\034\uff7d\001\002\000\004\034\173\001" +
    "\002\000\004\037\174\001\002\000\026\010\uffcd\013\uffcd" +
    "\037\uffcd\040\uffcd\052\175\054\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\001\002\000\006\004\u0120\005\374\001\002" +
    "\000\024\010\uffcb\013\201\037\uffcb\040\uffcb\054\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\001\002\000\004\040\200" +
    "\001\002\000\010\002\uffcf\044\uffcf\055\uffcf\001\002\000" +
    "\004\037\u0124\001\002\000\022\010\204\037\uffc7\040\uffc7" +
    "\054\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\001\002\000" +
    "\020\037\uffc5\040\uffc5\054\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\061\uffc5\001\002\000\032\003\221\005\217\014\222\015" +
    "\210\016\213\021\212\022\207\023\215\030\216\031\220" +
    "\032\226\033\214\001\002\000\010\024\332\025\333\033" +
    "\334\001\002\000\030\017\242\020\240\021\243\022\241" +
    "\037\uffc6\040\uffc6\054\uffc6\056\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\001\002\000\004\053\uff92\001\002\000\004\033\326" +
    "\001\002\000\004\053\277\001\002\000\004\053\uff93\001" +
    "\002\000\004\033\264\001\002\000\032\003\221\005\217" +
    "\014\222\015\210\016\213\021\212\022\207\023\215\030" +
    "\216\031\220\032\226\033\214\001\002\000\032\003\221" +
    "\005\217\014\222\015\210\016\213\021\212\022\207\023" +
    "\215\030\216\031\220\032\226\033\214\001\002\000\064" +
    "\005\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\044\ufff8\045\ufff8\046\ufff8\050" +
    "\ufff8\054\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\001\002" +
    "\000\034\024\uffe0\025\uffe0\026\ufffc\027\ufffc\033\uffe0\037" +
    "\uffe0\040\uffe0\050\251\054\uffe0\056\uffe0\057\uffe0\060\uffe0" +
    "\061\uffe0\001\002\000\064\005\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\033\ufff7" +
    "\034\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\050\ufff7\054\ufff7\056\ufff7\057\ufff7" +
    "\060\ufff7\061\ufff7\001\002\000\064\005\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\033\ufff5\034\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\050\ufff5\054\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\061\ufff5\001\002\000\004\033\234\001" +
    "\002\000\006\026\227\027\230\001\002\000\064\005\uff8e" +
    "\007\uff8e\010\uff8e\011\uff8e\012\uff8e\017\uff8e\020\uff8e\021" +
    "\uff8e\022\uff8e\033\uff8e\034\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\044\uff8e\045\uff8e\046\uff8e\050\uff8e\054" +
    "\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\001\002\000\064" +
    "\005\uff80\007\uff80\010\uff80\011\uff80\012\uff80\017\uff80\020" +
    "\uff80\021\uff80\022\uff80\033\uff80\034\uff80\036\uff80\037\uff80" +
    "\040\uff80\041\uff80\042\uff80\044\uff80\045\uff80\046\uff80\050" +
    "\uff80\054\uff80\056\uff80\057\uff80\060\uff80\061\uff80\001\002" +
    "\000\064\005\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\033\ufff6\034\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\050\ufff6\054\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6" +
    "\001\002\000\004\005\231\001\002\000\004\005\231\001" +
    "\002\000\064\005\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\033\ufffc\034\ufffc\036" +
    "\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\050\ufffc\054\ufffc\056\ufffc\057\ufffc\060\ufffc\061" +
    "\ufffc\001\002\000\064\005\uff84\007\uff84\010\uff84\011\uff84" +
    "\012\uff84\017\uff84\020\uff84\021\uff84\022\uff84\033\uff84\034" +
    "\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\044\uff84" +
    "\045\uff84\046\uff84\050\uff84\054\uff84\056\uff84\057\uff84\060" +
    "\uff84\061\uff84\001\002\000\064\005\uff85\007\uff85\010\uff85" +
    "\011\uff85\012\uff85\017\uff85\020\uff85\021\uff85\022\uff85\033" +
    "\uff85\034\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85" +
    "\044\uff85\045\uff85\046\uff85\050\uff85\054\uff85\056\uff85\057" +
    "\uff85\060\uff85\061\uff85\001\002\000\006\005\120\034\uff7d" +
    "\001\002\000\004\034\236\001\002\000\032\003\221\005" +
    "\217\014\222\015\210\016\213\021\212\022\207\023\215" +
    "\030\216\031\220\032\226\033\214\001\002\000\064\005" +
    "\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\017\242\020\240" +
    "\021\243\022\241\033\uff8f\034\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\042\uff8f\044\uff8f\045\uff8f\046\uff8f\050\uff8f" +
    "\054\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\001\002\000" +
    "\032\003\221\005\217\014\222\015\210\016\213\021\212" +
    "\022\207\023\215\030\216\031\220\032\226\033\214\001" +
    "\002\000\032\003\221\005\217\014\222\015\210\016\213" +
    "\021\212\022\207\023\215\030\216\031\220\032\226\033" +
    "\214\001\002\000\032\003\221\005\217\014\222\015\210" +
    "\016\213\021\212\022\207\023\215\030\216\031\220\032" +
    "\226\033\214\001\002\000\032\003\221\005\217\014\222" +
    "\015\210\016\213\021\212\022\207\023\215\030\216\031" +
    "\220\032\226\033\214\001\002\000\064\005\uff8b\007\uff8b" +
    "\010\uff8b\011\uff8b\012\uff8b\017\uff8b\020\uff8b\021\uff8b\022" +
    "\241\033\uff8b\034\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b" +
    "\042\uff8b\044\uff8b\045\uff8b\046\uff8b\050\uff8b\054\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\001\002\000\064\005\uff89" +
    "\007\uff89\010\uff89\011\uff89\012\uff89\017\uff89\020\240\021" +
    "\243\022\241\033\uff89\034\uff89\036\uff89\037\uff89\040\uff89" +
    "\041\uff89\042\uff89\044\uff89\045\uff89\046\uff89\050\uff89\054" +
    "\uff89\056\uff89\057\uff89\060\uff89\061\uff89\001\002\000\064" +
    "\005\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\017\uff8c\020" +
    "\uff8c\021\uff8c\022\uff8c\033\uff8c\034\uff8c\036\uff8c\037\uff8c" +
    "\040\uff8c\041\uff8c\042\uff8c\044\uff8c\045\uff8c\046\uff8c\050" +
    "\uff8c\054\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\001\002" +
    "\000\064\005\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\017" +
    "\uff8a\020\uff8a\021\243\022\241\033\uff8a\034\uff8a\036\uff8a" +
    "\037\uff8a\040\uff8a\041\uff8a\042\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\050\uff8a\054\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a" +
    "\001\002\000\032\010\uffd7\013\uffd7\024\uffd7\025\uffd7\033" +
    "\uffd7\037\uffd7\040\uffd7\054\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\001\002\000\004\005\120\001\002\000\006\036" +
    "\123\051\253\001\002\000\032\010\uffdf\013\uffdf\024\uffdf" +
    "\025\uffdf\033\uffdf\037\uffdf\040\uffdf\054\uffdf\056\uffdf\057" +
    "\uffdf\060\uffdf\061\uffdf\001\002\000\064\005\uff88\007\uff88" +
    "\010\uff88\011\uff88\012\uff88\017\uff88\020\uff88\021\uff88\022" +
    "\uff88\033\uff88\034\uff88\036\uff88\037\uff88\040\uff88\041\uff88" +
    "\042\uff88\044\uff88\045\uff88\046\uff88\050\uff88\054\uff88\056" +
    "\uff88\057\uff88\060\uff88\061\uff88\001\002\000\016\017\242" +
    "\020\240\021\243\022\241\034\257\041\256\001\002\000" +
    "\032\003\221\005\217\014\222\015\210\016\213\021\212" +
    "\022\207\023\215\030\216\031\220\032\226\033\214\001" +
    "\002\000\064\005\uff86\007\uff86\010\uff86\011\uff86\012\uff86" +
    "\017\uff86\020\uff86\021\uff86\022\uff86\033\uff86\034\uff86\036" +
    "\uff86\037\uff86\040\uff86\041\uff86\042\uff86\044\uff86\045\uff86" +
    "\046\uff86\050\uff86\054\uff86\056\uff86\057\uff86\060\uff86\061" +
    "\uff86\001\002\000\014\017\242\020\240\021\243\022\241" +
    "\042\261\001\002\000\032\003\221\005\217\014\222\015" +
    "\210\016\213\021\212\022\207\023\215\030\216\031\220" +
    "\032\226\033\214\001\002\000\014\017\242\020\240\021" +
    "\243\022\241\034\263\001\002\000\064\005\uff87\007\uff87" +
    "\010\uff87\011\uff87\012\uff87\017\uff87\020\uff87\021\uff87\022" +
    "\uff87\033\uff87\034\uff87\036\uff87\037\uff87\040\uff87\041\uff87" +
    "\042\uff87\044\uff87\045\uff87\046\uff87\050\uff87\054\uff87\056" +
    "\uff87\057\uff87\060\uff87\061\uff87\001\002\000\004\005\231" +
    "\001\002\000\004\036\266\001\002\000\004\005\231\001" +
    "\002\000\004\034\270\001\002\000\004\033\271\001\002" +
    "\000\004\005\231\001\002\000\004\036\273\001\002\000" +
    "\004\005\231\001\002\000\004\034\275\001\002\000\032" +
    "\003\221\005\217\014\222\015\210\016\213\021\212\022" +
    "\207\023\215\030\216\031\220\032\226\033\214\001\002" +
    "\000\064\005\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\017" +
    "\242\020\240\021\243\022\241\033\uff8d\034\uff8d\036\uff8d" +
    "\037\uff8d\040\uff8d\041\uff8d\042\uff8d\044\uff8d\045\uff8d\046" +
    "\uff8d\050\uff8d\054\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d" +
    "\001\002\000\004\037\300\001\002\000\032\003\221\005" +
    "\217\014\222\015\210\016\213\021\212\022\207\023\215" +
    "\030\216\031\220\032\226\033\214\001\002\000\014\017" +
    "\242\020\240\021\243\022\241\042\302\001\002\000\004" +
    "\005\303\001\002\000\004\005\305\001\002\000\012\003" +
    "\310\005\306\033\312\037\311\001\002\000\012\003\uffe3" +
    "\005\uffe3\033\uffe3\037\uffe3\001\002\000\030\010\ufff3\011" +
    "\ufff3\012\ufff3\022\ufff3\025\ufff3\034\ufff3\040\ufff3\044\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\001\002\000\012\022\314\025" +
    "\315\040\325\047\317\001\002\000\030\010\uffed\011\uffed" +
    "\012\uffed\022\uffed\025\uffed\034\uffed\040\uffed\044\uffed\045" +
    "\uffed\046\uffed\047\uffed\001\002\000\006\005\120\040\uff7d" +
    "\001\002\000\012\003\310\005\306\033\312\037\311\001" +
    "\002\000\012\022\314\025\315\034\316\047\317\001\002" +
    "\000\012\003\310\005\306\033\312\037\311\001\002\000" +
    "\012\003\310\005\306\033\312\037\311\001\002\000\030" +
    "\010\uffee\011\uffee\012\uffee\022\uffee\025\uffee\034\uffee\040" +
    "\uffee\044\uffee\045\uffee\046\uffee\047\uffee\001\002\000\012" +
    "\003\310\005\306\033\312\037\311\001\002\000\030\010" +
    "\ufff0\011\ufff0\012\ufff0\022\ufff0\025\ufff0\034\ufff0\040\ufff0" +
    "\044\ufff0\045\ufff0\046\ufff0\047\ufff0\001\002\000\030\010" +
    "\ufff1\011\ufff1\012\ufff1\022\ufff1\025\ufff1\034\ufff1\040\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\047\ufff1\001\002\000\030\010" +
    "\uffef\011\uffef\012\uffef\022\uffef\025\315\034\uffef\040\uffef" +
    "\044\uffef\045\uffef\046\uffef\047\317\001\002\000\004\040" +
    "\324\001\002\000\030\010\ufff2\011\ufff2\012\ufff2\022\ufff2" +
    "\025\ufff2\034\ufff2\040\ufff2\044\ufff2\045\ufff2\046\ufff2\047" +
    "\ufff2\001\002\000\064\005\uff91\007\uff91\010\uff91\011\uff91" +
    "\012\uff91\017\uff91\020\uff91\021\uff91\022\uff91\033\uff91\034" +
    "\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\044\uff91" +
    "\045\uff91\046\uff91\050\uff91\054\uff91\056\uff91\057\uff91\060" +
    "\uff91\061\uff91\001\002\000\006\005\120\034\uff7d\001\002" +
    "\000\004\034\330\001\002\000\032\003\221\005\217\014" +
    "\222\015\210\016\213\021\212\022\207\023\215\030\216" +
    "\031\220\032\226\033\214\001\002\000\064\005\uff90\007" +
    "\uff90\010\uff90\011\uff90\012\uff90\017\242\020\240\021\243" +
    "\022\241\033\uff90\034\uff90\036\uff90\037\uff90\040\uff90\041" +
    "\uff90\042\uff90\044\uff90\045\uff90\046\uff90\050\uff90\054\uff90" +
    "\056\uff90\057\uff90\060\uff90\061\uff90\001\002\000\004\033" +
    "\344\001\002\000\004\033\337\001\002\000\006\005\120" +
    "\034\uff7d\001\002\000\004\034\336\001\002\000\064\005" +
    "\uff83\007\uff83\010\uff83\011\uff83\012\uff83\017\uff83\020\uff83" +
    "\021\uff83\022\uff83\033\uff83\034\uff83\036\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\044\uff83\045\uff83\046\uff83\050\uff83" +
    "\054\uff83\056\uff83\057\uff83\060\uff83\061\uff83\001\002\000" +
    "\004\005\231\001\002\000\004\036\341\001\002\000\004" +
    "\005\231\001\002\000\004\034\343\001\002\000\064\005" +
    "\uff81\007\uff81\010\uff81\011\uff81\012\uff81\017\uff81\020\uff81" +
    "\021\uff81\022\uff81\033\uff81\034\uff81\036\uff81\037\uff81\040" +
    "\uff81\041\uff81\042\uff81\044\uff81\045\uff81\046\uff81\050\uff81" +
    "\054\uff81\056\uff81\057\uff81\060\uff81\061\uff81\001\002\000" +
    "\004\005\231\001\002\000\004\036\346\001\002\000\004" +
    "\005\231\001\002\000\004\034\350\001\002\000\064\005" +
    "\uff82\007\uff82\010\uff82\011\uff82\012\uff82\017\uff82\020\uff82" +
    "\021\uff82\022\uff82\033\uff82\034\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\044\uff82\045\uff82\046\uff82\050\uff82" +
    "\054\uff82\056\uff82\057\uff82\060\uff82\061\uff82\001\002\000" +
    "\020\037\uffc2\040\uffc2\054\352\056\353\057\uffc2\060\uffc2" +
    "\061\uffc2\001\002\000\032\003\221\005\217\014\222\015" +
    "\210\016\213\021\212\022\207\023\215\030\216\031\220" +
    "\032\226\033\214\001\002\000\046\003\221\005\217\014" +
    "\222\015\210\016\213\021\212\022\207\023\215\030\216" +
    "\031\220\032\226\033\214\037\uffc0\040\uffc0\054\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\001\002\000\016\037\uffbf\040\uffbf" +
    "\054\uffbf\057\357\060\uffbf\061\uffbf\001\002\000\020\037" +
    "\uffc4\040\uffc4\054\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\001\002\000\014\037\uffbc\040\uffbc\054\uffbc\060\361\061" +
    "\uffbc\001\002\000\044\003\221\005\217\014\222\015\210" +
    "\016\213\021\212\022\207\023\215\030\216\031\220\032" +
    "\226\033\214\037\uffbd\040\uffbd\054\uffbd\060\uffbd\061\uffbd" +
    "\001\002\000\024\017\242\020\240\021\243\022\241\037" +
    "\uffbe\040\uffbe\054\uffbe\060\uffbe\061\uffbe\001\002\000\006" +
    "\005\374\033\371\001\002\000\012\037\363\040\uffba\054" +
    "\uffba\061\uffba\001\002\000\014\003\376\005\374\033\371" +
    "\040\373\045\377\001\002\000\010\040\uffaf\054\uffaf\061" +
    "\366\001\002\000\006\040\uffc5\054\uffc5\001\002\000\032" +
    "\003\221\005\217\014\222\015\210\016\213\021\212\022" +
    "\207\023\215\030\216\031\220\032\226\033\214\001\002" +
    "\000\016\017\242\020\240\021\243\022\241\040\uffae\054" +
    "\uffae\001\002\000\006\040\uffce\054\352\001\002\000\004" +
    "\005\374\001\002\000\012\005\uffb7\033\uffb7\040\uffb7\045" +
    "\uffb7\001\002\000\010\040\uffb8\054\uffb8\061\uffb8\001\002" +
    "\000\032\010\uffe0\013\uffe0\025\uffe0\033\uffe0\037\uffe0\040" +
    "\uffe0\050\251\054\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\001\002\000\012\005\374\033\371\040\u0111\045\377\001" +
    "\002\000\012\005\uffb3\033\uffb3\040\uffb3\045\uffb3\001\002" +
    "\000\004\033\u0107\001\002\000\004\033\u0102\001\002\000" +
    "\012\005\uffb6\033\uffb6\040\uffb6\045\uffb6\001\002\000\006" +
    "\005\120\034\uff7d\001\002\000\004\034\u0104\001\002\000" +
    "\004\035\u0105\001\002\000\032\003\221\005\217\014\222" +
    "\015\210\016\213\021\212\022\207\023\215\030\216\031" +
    "\220\032\226\033\214\001\002\000\032\005\uffb2\017\242" +
    "\020\240\021\243\022\241\033\uffb2\037\uffb2\040\uffb2\045" +
    "\uffb2\054\uffb2\060\uffb2\061\uffb2\001\002\000\004\005\u0108" +
    "\001\002\000\004\005\305\001\002\000\012\003\310\005" +
    "\306\033\312\037\311\001\002\000\012\022\314\025\315" +
    "\034\u010b\047\317\001\002\000\004\037\u010c\001\002\000" +
    "\012\003\376\005\374\033\371\045\377\001\002\000\012" +
    "\005\374\033\371\040\u010f\045\377\001\002\000\012\005" +
    "\uffb5\033\uffb5\040\uffb5\045\uffb5\001\002\000\012\005\uffb0" +
    "\033\uffb0\040\uffb0\045\uffb0\001\002\000\012\005\uffb4\033" +
    "\uffb4\040\uffb4\045\uffb4\001\002\000\010\040\uffb9\054\uffb9" +
    "\061\uffb9\001\002\000\004\033\u0113\001\002\000\006\005" +
    "\120\034\uff7d\001\002\000\004\034\u0115\001\002\000\004" +
    "\034\u0116\001\002\000\004\035\u0117\001\002\000\032\003" +
    "\221\005\217\014\222\015\210\016\213\021\212\022\207" +
    "\023\215\030\216\031\220\032\226\033\214\001\002\000" +
    "\032\005\uffb1\017\242\020\240\021\243\022\241\033\uffb1" +
    "\037\uffb1\040\uffb1\045\uffb1\054\uffb1\060\uffb1\061\uffb1\001" +
    "\002\000\014\037\uffbc\040\uffbc\054\uffbc\060\361\061\uffbc" +
    "\001\002\000\012\037\uffbb\040\uffbb\054\uffbb\061\uffbb\001" +
    "\002\000\026\017\242\020\240\021\243\022\241\037\uffc1" +
    "\040\uffc1\054\uffc1\057\uffc1\060\uffc1\061\uffc1\001\002\000" +
    "\012\017\242\020\u011d\021\243\022\241\001\002\000\034" +
    "\003\221\004\u0120\005\217\014\222\015\210\016\213\021" +
    "\212\022\207\023\215\030\216\031\220\032\226\033\214" +
    "\001\002\000\026\024\332\025\333\033\334\037\ufffa\040" +
    "\ufffa\054\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\001\002" +
    "\000\022\025\u0121\037\uffc3\040\uffc3\054\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\001\002\000\026\010\ufffb\013\ufffb" +
    "\025\ufffb\037\ufffb\040\ufffb\054\ufffb\056\ufffb\057\ufffb\060" +
    "\ufffb\061\ufffb\001\002\000\006\004\u0120\005\374\001\002" +
    "\000\026\010\ufffa\013\ufffa\025\ufffa\037\ufffa\040\ufffa\054" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\001\002\000\026" +
    "\010\ufff9\013\ufff9\025\ufff9\037\ufff9\040\ufff9\054\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\001\002\000\032\003\221" +
    "\005\217\014\222\015\210\016\213\021\212\022\207\023" +
    "\215\030\216\031\220\032\226\033\214\001\002\000\016" +
    "\017\242\020\240\021\243\022\241\036\uffc9\040\uffc9\001" +
    "\002\000\006\036\u0127\040\u0128\001\002\000\032\003\221" +
    "\005\217\014\222\015\210\016\213\021\212\022\207\023" +
    "\215\030\216\031\220\032\226\033\214\001\002\000\022" +
    "\010\uffca\037\uffca\040\uffca\054\uffca\056\uffca\057\uffca\060" +
    "\uffca\061\uffca\001\002\000\016\017\242\020\240\021\243" +
    "\022\241\036\uffc8\040\uffc8\001\002\000\026\010\uffcc\013" +
    "\uffcc\025\u0121\037\uffcc\040\uffcc\054\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\061\uffcc\001\002\000\020\010\uffe8\011\uffe8\012" +
    "\uffe8\040\uffe8\044\uffe8\045\uffe8\046\uffe8\001\002\000\032" +
    "\003\221\005\217\014\222\015\210\016\213\021\212\022" +
    "\207\023\215\030\216\031\220\032\226\033\214\001\002" +
    "\000\020\010\uffe7\011\uffe7\012\uffe7\040\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\001\002\000\020\010\uffe5\011\uffe5\012\uffe5" +
    "\040\uffe5\044\uffe5\045\uffe5\046\uffe5\001\002\000\004\005" +
    "\u0154\001\002\000\004\005\u0152\001\002\000\020\010\uffe6" +
    "\011\uffe6\012\uffe6\040\uffe6\044\uffe6\045\uffe6\046\uffe6\001" +
    "\002\000\020\010\uffea\011\uffea\012\uffea\040\uffea\044\uffea" +
    "\045\uffea\046\uffea\001\002\000\020\010\uffe9\011\uffe9\012" +
    "\uffe9\040\uffe9\044\uffe9\045\uffe9\046\uffe9\001\002\000\004" +
    "\033\u014a\001\002\000\004\005\u0136\001\002\000\006\033" +
    "\uffe0\050\251\001\002\000\004\033\u0138\001\002\000\006" +
    "\005\120\034\uff7d\001\002\000\004\034\u013a\001\002\000" +
    "\026\005\uffd6\010\uffd6\011\uffd6\012\uffd6\037\uffd6\040\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\050\uffd6\001\002\000\026\005" +
    "\u013c\010\uffde\011\uffde\012\uffde\037\u013e\040\uffde\044\uffde" +
    "\045\uffde\046\uffde\050\u013f\001\002\000\026\005\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\037\uffd5\040\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\050\uffd5\001\002\000\020\010\uffe2\011\uffe2\012" +
    "\uffe2\040\uffe2\044\uffe2\045\uffe2\046\uffe2\001\002\000\014" +
    "\003\221\030\216\031\220\032\226\040\uffdc\001\002\000" +
    "\006\005\120\051\uff7d\001\002\000\004\051\u0141\001\002" +
    "\000\004\062\u0142\001\002\000\004\005\u0143\001\002\000" +
    "\026\005\uffd4\010\uffd4\011\uffd4\012\uffd4\037\uffd4\040\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\050\uffd4\001\002\000\004\040" +
    "\u0149\001\002\000\006\036\u0147\040\uffdb\001\002\000\006" +
    "\036\uffda\040\uffda\001\002\000\012\003\221\030\216\031" +
    "\220\032\226\001\002\000\006\036\uffd9\040\uffd9\001\002" +
    "\000\020\010\uffdd\011\uffdd\012\uffdd\040\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\001\002\000\004\005\u014b\001\002\000\004" +
    "\005\305\001\002\000\012\003\310\005\306\033\312\037" +
    "\311\001\002\000\012\022\314\025\315\034\u014e\047\317" +
    "\001\002\000\004\037\u014f\001\002\000\016\010\uffeb\011" +
    "\uffeb\012\uffeb\040\uffeb\045\uffeb\046\uffeb\001\002\000\016" +
    "\010\u0135\011\u012f\012\u012c\040\u0151\045\u0134\046\u0130\001" +
    "\002\000\020\010\uffe4\011\uffe4\012\uffe4\040\uffe4\044\uffe4" +
    "\045\uffe4\046\uffe4\001\002\000\012\003\310\005\306\033" +
    "\312\037\311\001\002\000\026\010\ufff4\011\ufff4\012\ufff4" +
    "\022\314\025\315\040\ufff4\044\ufff4\045\ufff4\046\ufff4\047" +
    "\317\001\002\000\006\033\uffe0\050\251\001\002\000\004" +
    "\033\u0156\001\002\000\006\005\120\034\uff7d\001\002\000" +
    "\004\034\u0158\001\002\000\004\035\u0159\001\002\000\032" +
    "\003\221\005\217\014\222\015\210\016\213\021\212\022" +
    "\207\023\215\030\216\031\220\032\226\033\214\001\002" +
    "\000\036\005\uffd6\010\uffd6\011\uffd6\012\uffd6\017\242\020" +
    "\240\021\243\022\241\037\uffd6\040\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\050\uffd6\001\002\000\026\005\u013c\010\uffde\011" +
    "\uffde\012\uffde\037\u013e\040\uffde\044\uffde\045\uffde\046\uffde" +
    "\050\u013f\001\002\000\020\010\uffe1\011\uffe1\012\uffe1\040" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\001\002\000\014\007\u015e" +
    "\017\242\020\240\021\243\022\241\001\002\000\032\003" +
    "\221\005\217\014\222\015\210\016\213\021\212\022\207" +
    "\023\215\030\216\031\220\032\226\033\214\001\002\000" +
    "\030\010\uffd8\011\uffd8\012\uffd8\017\242\020\240\021\243" +
    "\022\241\040\uffd8\044\uffd8\045\uffd8\046\uffd8\001\002\000" +
    "\004\044\u0161\001\002\000\016\010\uffeb\011\uffeb\012\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\001\002\000\004\044\u0163\001" +
    "\002\000\004\044\u0164\001\002\000\006\044\uffd3\055\uffd3" +
    "\001\002\000\006\044\u0166\055\166\001\002\000\004\044" +
    "\u0168\001\002\000\006\044\uffd2\055\uffd2\001\002\000\010" +
    "\063\u016c\064\u016a\065\u0169\001\002\000\004\004\u01fc\001" +
    "\002\000\004\004\u01f8\001\002\000\012\044\uffad\063\u016c" +
    "\064\u016a\065\u0169\001\002\000\004\004\u0176\001\002\000" +
    "\004\044\u016f\001\002\000\012\044\uffac\063\uffac\064\uffac" +
    "\065\uffac\001\002\000\004\044\u0170\001\002\000\006\002" +
    "\uff96\004\uff96\001\002\000\006\002\ufffd\004\u0172\001\002" +
    "\000\004\042\u0173\001\002\000\006\004\u0175\005\u0174\001" +
    "\002\000\006\002\uff94\004\uff94\001\002\000\006\002\uff95" +
    "\004\uff95\001\002\000\004\037\u0177\001\002\000\006\004" +
    "\130\005\127\001\002\000\010\004\130\005\127\040\u01f6" +
    "\001\002\000\010\004\uffa7\005\uffa7\040\uffa7\001\002\000" +
    "\012\005\u017b\066\u017c\067\u017e\070\u017d\001\002\000\004" +
    "\033\u01f1\001\002\000\006\004\u01c6\005\u01c5\001\002\000" +
    "\006\004\u01a6\005\u01a5\001\002\000\006\004\u0180\005\u017f" +
    "\001\002\000\004\035\u0195\001\002\000\004\033\u0181\001" +
    "\002\000\010\005\u0182\006\u0184\034\uff9c\001\002\000\006" +
    "\034\uff9a\036\uff9a\001\002\000\006\034\uff9b\036\u0192\001" +
    "\002\000\006\034\uff98\036\uff98\001\002\000\004\034\u0186" +
    "\001\002\000\004\042\u0187\001\002\000\004\005\u0188\001" +
    "\002\000\004\033\u0189\001\002\000\006\005\120\034\uff7d" +
    "\001\002\000\004\034\u018b\001\002\000\004\042\u018c\001" +
    "\002\000\004\005\u018d\001\002\000\004\033\u018e\001\002" +
    "\000\006\005\120\034\uff7d\001\002\000\004\034\u0190\001" +
    "\002\000\006\004\130\005\127\001\002\000\010\004\uffa4" +
    "\005\uffa4\040\uffa4\001\002\000\006\005\u0193\006\u0194\001" +
    "\002\000\006\034\uff99\036\uff99\001\002\000\006\034\uff97" +
    "\036\uff97\001\002\000\004\004\u0196\001\002\000\004\033" +
    "\u0197\001\002\000\010\005\u0182\006\u0184\034\uff9c\001\002" +
    "\000\004\034\u0199\001\002\000\004\042\u019a\001\002\000" +
    "\004\005\u019b\001\002\000\004\033\u019c\001\002\000\006" +
    "\005\120\034\uff7d\001\002\000\004\034\u019e\001\002\000" +
    "\004\042\u019f\001\002\000\004\005\u01a0\001\002\000\004" +
    "\033\u01a1\001\002\000\006\005\120\034\uff7d\001\002\000" +
    "\004\034\u01a3\001\002\000\006\004\130\005\127\001\002" +
    "\000\010\004\uffa3\005\uffa3\040\uffa3\001\002\000\004\035" +
    "\u01b5\001\002\000\004\033\u01a7\001\002\000\010\005\u0182" +
    "\006\u0184\034\uff9c\001\002\000\004\034\u01a9\001\002\000" +
    "\004\042\u01aa\001\002\000\004\005\u01ab\001\002\000\004" +
    "\033\u01ac\001\002\000\006\005\120\034\uff7d\001\002\000" +
    "\004\034\u01ae\001\002\000\004\042\u01af\001\002\000\004" +
    "\005\u01b0\001\002\000\004\033\u01b1\001\002\000\006\005" +
    "\120\034\uff7d\001\002\000\004\034\u01b3\001\002\000\006" +
    "\004\130\005\127\001\002\000\010\004\uffa2\005\uffa2\040" +
    "\uffa2\001\002\000\004\004\u01b6\001\002\000\004\033\u01b7" +
    "\001\002\000\010\005\u0182\006\u0184\034\uff9c\001\002\000" +
    "\004\034\u01b9\001\002\000\004\042\u01ba\001\002\000\004" +
    "\005\u01bb\001\002\000\004\033\u01bc\001\002\000\006\005" +
    "\120\034\uff7d\001\002\000\004\034\u01be\001\002\000\004" +
    "\042\u01bf\001\002\000\004\005\u01c0\001\002\000\004\033" +
    "\u01c1\001\002\000\006\005\120\034\uff7d\001\002\000\004" +
    "\034\u01c3\001\002\000\006\004\130\005\127\001\002\000" +
    "\010\004\uffa1\005\uffa1\040\uffa1\001\002\000\004\035\u01db" +
    "\001\002\000\004\005\u01c7\001\002\000\004\033\u01c8\001" +
    "\002\000\010\005\u0182\006\u0184\034\uff9c\001\002\000\004" +
    "\034\u01ca\001\002\000\004\042\u01cb\001\002\000\004\005" +
    "\u01cc\001\002\000\004\033\u01cd\001\002\000\006\005\120" +
    "\034\uff7d\001\002\000\004\034\u01cf\001\002\000\004\042" +
    "\u01d0\001\002\000\004\005\u01d1\001\002\000\004\033\u01d2" +
    "\001\002\000\006\005\120\034\uff7d\001\002\000\004\034" +
    "\u01d4\001\002\000\004\042\u01d5\001\002\000\004\005\u01d6" +
    "\001\002\000\004\033\u01d7\001\002\000\006\005\120\034" +
    "\uff7d\001\002\000\004\034\u01d9\001\002\000\006\004\130" +
    "\005\127\001\002\000\010\004\uffa0\005\uffa0\040\uffa0\001" +
    "\002\000\004\004\u01dc\001\002\000\004\005\u01dd\001\002" +
    "\000\004\033\u01de\001\002\000\010\005\u0182\006\u0184\034" +
    "\uff9c\001\002\000\004\034\u01e0\001\002\000\004\042\u01e1" +
    "\001\002\000\004\005\u01e2\001\002\000\004\033\u01e3\001" +
    "\002\000\006\005\120\034\uff7d\001\002\000\004\034\u01e5" +
    "\001\002\000\004\042\u01e6\001\002\000\004\005\u01e7\001" +
    "\002\000\004\033\u01e8\001\002\000\006\005\120\034\uff7d" +
    "\001\002\000\004\034\u01ea\001\002\000\004\042\u01eb\001" +
    "\002\000\004\005\u01ec\001\002\000\004\033\u01ed\001\002" +
    "\000\006\005\120\034\uff7d\001\002\000\004\034\u01ef\001" +
    "\002\000\006\004\130\005\127\001\002\000\010\004\uff9f" +
    "\005\uff9f\040\uff9f\001\002\000\006\005\120\034\uff7d\001" +
    "\002\000\004\034\u01f3\001\002\000\006\004\130\005\127" +
    "\001\002\000\010\004\uffa5\005\uffa5\040\uffa5\001\002\000" +
    "\010\004\uffa6\005\uffa6\040\uffa6\001\002\000\012\044\uffa9" +
    "\063\uffa9\064\uffa9\065\uffa9\001\002\000\012\044\uffab\063" +
    "\uffab\064\uffab\065\uffab\001\002\000\004\037\u01f9\001\002" +
    "\000\006\004\130\005\127\001\002\000\010\004\130\005" +
    "\127\040\u01fb\001\002\000\012\044\uffaa\063\uffaa\064\uffaa" +
    "\065\uffaa\001\002\000\004\037\u01fd\001\002\000\006\004" +
    "\130\005\127\001\002\000\010\004\130\005\127\040\u01ff" +
    "\001\002\000\012\044\uffa8\063\uffa8\064\uffa8\065\uffa8\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01fe\000\016\003\006\051\005\065\010\067\004\110" +
    "\003\111\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\037\u0130\040\u012a\041\u012c\042\u012d\043\u0131\057" +
    "\u0132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\070\027\076\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\071\035\077\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\072\045\100\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\073\057\101\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\074\072\102\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\075\104\103\110\104\111\105\107" +
    "\106\105\107\103\001\001\000\002\001\001\000\012\104" +
    "\153\105\107\106\105\107\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\044\120\045\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\135\045\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\140\001" +
    "\001\000\004\013\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\146\045\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\151\001\001\000\004\013\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\164" +
    "\001\001\000\004\005\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\171\045\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\176\061\175\001\001\000\006\030\u0121\060\u0129\001\001" +
    "\000\004\047\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\202\001\001\000\004" +
    "\052\350\001\001\000\016\023\205\030\204\031\222\032" +
    "\223\033\210\035\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\023\254" +
    "\030\204\031\222\032\223\033\210\035\224\001\001\000" +
    "\016\023\253\030\204\031\222\032\223\033\210\035\224" +
    "\001\001\000\002\001\001\000\004\022\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\232\001\001\000\004\031\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\234\045\121\001\001\000\002\001\001\000\016" +
    "\023\236\030\204\031\222\032\223\033\210\035\224\001" +
    "\001\000\002\001\001\000\016\023\246\030\204\031\222" +
    "\032\223\033\210\035\224\001\001\000\016\023\245\030" +
    "\204\031\222\032\223\033\210\035\224\001\001\000\016" +
    "\023\244\030\204\031\222\032\223\033\210\035\224\001" +
    "\001\000\016\023\243\030\204\031\222\032\223\033\210" +
    "\035\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\023\257\030\204" +
    "\031\222\032\223\033\210\035\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\023\261\030\204\031\222" +
    "\032\223\033\210\035\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\264\001\001\000\002\001\001" +
    "\000\004\031\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\271\001\001\000\002\001\001\000\004" +
    "\031\273\001\001\000\002\001\001\000\016\023\275\030" +
    "\204\031\222\032\223\033\210\035\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\300\030\204\031" +
    "\222\032\223\033\210\035\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\303\001\001\000\004\036" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\044\322\045\121\001" +
    "\001\000\004\036\312\001\001\000\002\001\001\000\004" +
    "\036\321\001\001\000\004\036\320\001\001\000\002\001" +
    "\001\000\004\036\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\326\045\121\001\001" +
    "\000\002\001\001\000\016\023\330\030\204\031\222\032" +
    "\223\033\210\035\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\044\334\045\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\337" +
    "\001\001\000\002\001\001\000\004\031\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\344\001\001" +
    "\000\002\001\001\000\004\031\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\353\054\354\001\001" +
    "\000\016\023\u011b\030\204\031\222\032\223\033\210\035" +
    "\224\001\001\000\016\023\u011a\030\204\031\222\032\223" +
    "\033\210\035\224\001\001\000\004\026\355\001\001\000" +
    "\002\001\001\000\004\034\361\001\001\000\016\023\357" +
    "\030\204\031\222\032\223\033\210\035\224\001\001\000" +
    "\002\001\001\000\006\030\377\055\u0118\001\001\000\004" +
    "\053\363\001\001\000\012\030\377\046\374\055\371\056" +
    "\u0100\001\001\000\004\024\364\001\001\000\004\052\367" +
    "\001\001\000\016\023\366\030\204\031\222\032\223\033" +
    "\210\035\224\001\001\000\002\001\001\000\004\054\354" +
    "\001\001\000\004\030\u0111\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\247\001\001\000\010\030\377" +
    "\055\u010d\056\u010f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\u0102" +
    "\045\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\023\u0105\030\204\031\222\032\223\033\210\035\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u0108\001\001\000\004\036\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\030\377\046\u010c\055\371\056" +
    "\u0100\001\001\000\010\030\377\055\u010d\056\u010f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\u0113\045\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\023\u0117\030\204\031\222\032\223\033\210" +
    "\035\224\001\001\000\002\001\001\000\004\034\u0119\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\023\246\030\u011d\031\222\032\223\033\210\035" +
    "\224\060\u011e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\u0121\060\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\023\u0124\030\204" +
    "\031\222\032\223\033\210\035\224\050\u0125\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\023\u0128\030\204" +
    "\031\222\032\223\033\210\035\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\023\u015c\030\204\031\222\032\223\033\210\035" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u0136\001\001\000\002\001\001\000\006\044" +
    "\u0138\045\121\001\001\000\002\001\001\000\004\066\u013a" +
    "\001\001\000\004\017\u013c\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\u0144\021\u0143\035\u0145\001\001" +
    "\000\006\044\u013f\045\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u0147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u014b\001\001\000\004\036\u014c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\u014f" +
    "\001\001\000\016\037\u0130\040\u012a\041\u012c\042\u012d\043" +
    "\u0131\057\u0132\001\001\000\002\001\001\000\004\036\u0152" +
    "\001\001\000\002\001\001\000\004\022\u0154\001\001\000" +
    "\002\001\001\000\006\044\u0156\045\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\u0159\030\204\031" +
    "\222\032\223\033\210\035\224\001\001\000\004\066\u015a" +
    "\001\001\000\004\017\u015b\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\023\u015e\030\204\031\222\032\223" +
    "\033\210\035\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\u0161\051\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\u0164\001\001\000\004\005" +
    "\u0166\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\u016c\010\u016a\011\u016d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u01f6\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\u0170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\u0177\013\u0179\014\u0178\001\001" +
    "\000\006\013\u0179\014\u01f4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\u0182\016\u0184\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\044\u0189\045\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\u018e" +
    "\045\121\001\001\000\002\001\001\000\004\013\u0190\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\u0182\016\u0197\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\u019c\045\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\u01a1\045" +
    "\121\001\001\000\002\001\001\000\004\013\u01a3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\u0182\016\u01a7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\u01ac\045\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\u01b1\045" +
    "\121\001\001\000\002\001\001\000\004\013\u01b3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\u0182\016\u01b7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\u01bc\045\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\u01c1\045" +
    "\121\001\001\000\002\001\001\000\004\013\u01c3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\u0182\016\u01c8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\u01cd\045\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\u01d2\045\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\u01d7\045\121\001\001\000\002\001\001\000\004\013\u01d9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u0182\016\u01de\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\044\u01e3\045\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\u01e8\045\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\u01ed\045\121\001\001\000\002\001\001\000\004" +
    "\013\u01ef\001\001\000\002\001\001\000\006\044\u01f1\045" +
    "\121\001\001\000\002\001\001\000\004\013\u01f3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\u01f9\013\u0179" +
    "\014\u0178\001\001\000\006\013\u0179\014\u01f4\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\u01fd\013\u0179" +
    "\014\u0178\001\001\000\006\013\u0179\014\u01f4\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PTSParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PTSParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PTSParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    static PTSLex scanner;
    static String entry;
    static CPreProcessorStream stream;

    public void report_error(String message, Object info) {
    Logger.println(message + " in line " + stream.getLine(scanner.line_count) + 
            " of file " + stream.getFile(scanner.line_count));
    }

    public static PTSAST configure(String filename, String path) 
                    throws Exception {
	    String infileName = filename + ".PTS";
		stream = new CPreProcessorStream(infileName);
		AddMacrosToPreProcessor.add(stream);

		stream.setSearchPath(path);
		scanner = new PTSLex(new InputStreamReader(stream));
		PTSAST answer = (PTSAST)(new PTSParser(scanner).parse().value);
		return answer;
    }

    public static SFTAST readAnalysis(String filename, String path) 
                    throws Exception {
	    String infileName = filename;
		stream = new CPreProcessorStream(infileName);
		AddMacrosToPreProcessor.add(stream);

		stream.setSearchPath(path);
		scanner = new PTSLex(new InputStreamReader(stream));
		SFTAST answer = (SFTAST)(new PTSParser(scanner).parse().value);
		return answer;
    }

    
    public static String getEntry() {
            return entry;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PTSParser$actions {
  private final PTSParser parser;

  /** Constructor */
  CUP$PTSParser$actions(PTSParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PTSParser$do_action(
    int                        CUP$PTSParser$act_num,
    java_cup.runtime.lr_parser CUP$PTSParser$parser,
    java.util.Stack            CUP$PTSParser$stack,
    int                        CUP$PTSParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PTSParser$result;

      /* select the action based on the action number */
      switch (CUP$PTSParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // constructor_decl ::= CONSTRUCTOR STRING COLON LP optional_id_list RP COLON cfg_node cfg_node 
            {
              SymbConstructorAST RESULT = null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int entryleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int entryright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		String entry = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int exitleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int exitright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String exit = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new SymbConstructorAST(
            					sig,params,entry,exit); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(69/*constructor_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // virtual_method_decl ::= VMETHOD STRING COLON ID LP optional_id_list RP COLON cfg_node cfg_node 
            {
              SymbMethodVirtualAST RESULT = null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).value;
		int receiverleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).left;
		int receiverright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).right;
		String receiver = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int entryleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int entryright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		String entry = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int exitleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int exitright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String exit = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new SymbMethodVirtualAST(
								sig,params,entry,exit); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(68/*virtual_method_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // static_method_decl ::= SMETHOD STRING COLON LP optional_id_list RP COLON cfg_node cfg_node 
            {
              SymbMethodStaticAST RESULT = null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int entryleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int entryright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		String entry = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int exitleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int exitright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String exit = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new SymbMethodStaticAST(
								sig,params,entry,exit); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(67/*static_method_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // method_decl ::= constructor_decl 
            {
              SymbMethodAST RESULT = null;
		int cdeclleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int cdeclright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		SymbConstructorAST cdecl = (SymbConstructorAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = cdecl; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(66/*method_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // method_decl ::= virtual_method_decl 
            {
              SymbMethodAST RESULT = null;
		int vdeclleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int vdeclright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		SymbMethodVirtualAST vdecl = (SymbMethodVirtualAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = vdecl; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(66/*method_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // method_decl ::= static_method_decl 
            {
              SymbMethodAST RESULT = null;
		int sdeclleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int sdeclright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		SymbMethodStaticAST sdecl = (SymbMethodStaticAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = sdecl; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(66/*method_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // methods ::= methods method_decl 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int mdeclleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int mdeclright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		SymbMethodAST mdecl = (SymbMethodAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = list; RESULT.add(mdecl); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(59/*methods*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // methods ::= method_decl 
            {
              List RESULT = null;
		int mdeclleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int mdeclright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		SymbMethodAST mdecl = (SymbMethodAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(mdecl); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(59/*methods*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // optional_methods ::= methods 
            {
              List RESULT = null;
		int declleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List decl = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = decl; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(65/*optional_methods*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // optional_methods ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(65/*optional_methods*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // classes_implements ::= classes_implements IMPLEMENTS ID ID 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int interfaceNameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int interfaceNameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String interfaceName = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = list; RESULT.add(new SymbImplementsAST(className,interfaceName));  
              CUP$PTSParser$result = new java_cup.runtime.Symbol(58/*classes_implements*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // classes_implements ::= IMPLEMENTS ID ID 
            {
              List RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int interfaceNameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int interfaceNameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String interfaceName = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(new SymbImplementsAST(className,interfaceName)); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(58/*classes_implements*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // optional_classes_implements ::= classes_implements 
            {
              List RESULT = null;
		int declleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List decl = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = decl; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(64/*optional_classes_implements*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // optional_classes_implements ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(64/*optional_classes_implements*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // classes_extends ::= classes_extends EXTENDSCLASS ID ID 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String superClass = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = list; RESULT.add(new SymbExtendsClassAST(name,superClass));  
              CUP$PTSParser$result = new java_cup.runtime.Symbol(57/*classes_extends*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // classes_extends ::= EXTENDSCLASS ID ID 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String superClass = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(new SymbExtendsClassAST(name,superClass)); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(57/*classes_extends*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // optional_classes_extends ::= classes_extends 
            {
              List RESULT = null;
		int declleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List decl = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = decl; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(63/*optional_classes_extends*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // optional_classes_extends ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(63/*optional_classes_extends*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // interface_extends ::= interface_extends EXTENDSINTERFACE ID ID 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int superInterfaceleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int superInterfaceright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String superInterface = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = list; RESULT.add(new SymbExtendsInterfaceAST(name,superInterface));  
              CUP$PTSParser$result = new java_cup.runtime.Symbol(56/*interface_extends*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // interface_extends ::= EXTENDSINTERFACE ID ID 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int superInterfaceleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int superInterfaceright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String superInterface = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(new SymbExtendsInterfaceAST(name,superInterface)); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(56/*interface_extends*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // optional_interface_extends ::= interface_extends 
            {
              List RESULT = null;
		int declleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List decl = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = decl; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(62/*optional_interface_extends*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // optional_interface_extends ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(62/*optional_interface_extends*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // classes_decl ::= classes_decl CLASS ID 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = list; RESULT.add(new SymbClassAST(name));  
              CUP$PTSParser$result = new java_cup.runtime.Symbol(55/*classes_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // classes_decl ::= CLASS ID 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(new SymbClassAST(name)); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(55/*classes_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // optional_classes_decl ::= classes_decl 
            {
              List RESULT = null;
		int declleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List decl = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = decl; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(61/*optional_classes_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // optional_classes_decl ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(61/*optional_classes_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // interface_decl ::= interface_decl INTERFACE ID 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = list; RESULT.add(new SymbInterfaceAST(name));  
              CUP$PTSParser$result = new java_cup.runtime.Symbol(54/*interface_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // interface_decl ::= INTERFACE ID 
            {
              List RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(new SymbInterfaceAST(name)); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(54/*interface_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // optional_interface_decl ::= interface_decl 
            {
              List RESULT = null;
		int declleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List decl = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = decl; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(60/*optional_interface_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // optional_interface_decl ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(60/*optional_interface_decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // symb_part ::= MAIN STRING SEMICOLON NUMBER SEMICOLON NUMBER SEMICOLON NUMBER SEMICOLON NUMBER PERCENT PERCENT PERCENT optional_interface_decl PERCENT PERCENT PERCENT optional_classes_decl PERCENT PERCENT PERCENT optional_interface_extends PERCENT PERCENT PERCENT optional_classes_extends PERCENT PERCENT PERCENT optional_classes_implements PERCENT PERCENT PERCENT optional_methods 
            {
              SymbAST RESULT = null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-32)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-32)).right;
		String main = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-32)).value;
		int numIntraleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-30)).left;
		int numIntraright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-30)).right;
		String numIntra = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-30)).value;
		int numStatleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-28)).left;
		int numStatright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-28)).right;
		String numStat = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-28)).value;
		int numVirtleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-26)).left;
		int numVirtright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-26)).right;
		String numVirt = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-26)).value;
		int numCtorleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-24)).left;
		int numCtorright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-24)).right;
		String numCtor = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-24)).value;
		int intdeclleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-20)).left;
		int intdeclright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-20)).right;
		List intdecl = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-20)).value;
		int cladeclleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).left;
		int cladeclright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).right;
		List cladecl = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).value;
		int intextleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).left;
		int intextright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).right;
		List intext = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).value;
		int claextleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).left;
		int claextright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).right;
		List claext = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).value;
		int claimpleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int claimpright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		List claimp = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int metsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int metsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List mets = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new SymbAST(main,
								Integer.parseInt(numIntra),
								Integer.parseInt(numStat),
								Integer.parseInt(numVirt),
								Integer.parseInt(numCtor), 
								intdecl,cladecl,intext,claext,claimp,mets); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(53/*symb_part*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-33)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // optional_id_list ::= id_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = list; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(34/*optional_id_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // optional_id_list ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(34/*optional_id_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // id_list ::= id_list COMMA ID 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = list; RESULT.add(id); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(35/*id_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // id_list ::= ID 
            {
              List RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(id); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(35/*id_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // formula ::= kleene 
            {
              FormulaAST RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		Kleene k = (Kleene)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new ValueFormulaAST(k); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // formula ::= predicate PLUS LP var COMMA var RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 Var v1 = new Var("__v1"); 
           Var v2 = new Var("__v2"); 
           RESULT = new TCFormulaAST(l, r, v1, v2, 
                         new PredicateFormulaAST(p, v1, v2));
        
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // formula ::= predicate STAR LP var COMMA var RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 Var v1 = new Var("__v1"); 
           Var v2 = new Var("__v2"); 
           RESULT = new CompositeFormulaAST(new EqualityAST(l, r),
                           new TCFormulaAST(l, r, v1, v2, 
                                 new PredicateFormulaAST(p, v1, v2)),
                           "OrFormula");
        
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // formula ::= predicate LP optional_id_list RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = new PredicateFormulaAST(p, VarAST.asVariables(args)); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // formula ::= var NEQ var 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT  = new CompositeFormulaAST(new EqualityAST(l, r)); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // formula ::= var EQ var 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT  = new EqualityAST(l, r); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // formula ::= LP formula RP 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = f; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // formula ::= LP formula QMARK formula COLON formula RP 
            {
              FormulaAST RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).right;
		FormulaAST fc = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		FormulaAST ft = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		FormulaAST ff = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = new IfFormulaAST(fc, ft, ff); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // formula ::= NOT formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // formula ::= formula IFF formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "EquivalenceFormula"); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // formula ::= formula IMPLIES formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f2, new CompositeFormulaAST(f1), "OrFormula"); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // formula ::= formula OR formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "OrFormula"); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // formula ::= formula AND formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "AndFormula"); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // formula ::= TC LP var COMMA var RP LP var COMMA var RP formula 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		Var sl = (Var)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int srleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		Var sr = (Var)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new TCFormulaAST(l, r, sl, sr, f); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // formula ::= combine 
            {
              FormulaAST RESULT = null;
		int combleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int combright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		CombineAST comb = (CombineAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = comb; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // formula ::= EXISTS LP optional_id_list RP formula 
            {
              FormulaAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new QuantFormulaAST(VarAST.asVariables(list), f, "ExistQuantFormula"); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // formula ::= FORALL LP optional_id_list RP formula 
            {
              FormulaAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new QuantFormulaAST(VarAST.asVariables(list), f, "AllQuantFormula"); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(17/*formula*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // combine ::= binary_op COMBINE LCBR formula COLON ID in set_expr RCBR 
            {
              CombineAST RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = new CombineAST(op, f, id, e); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(24/*combine*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // binary_op ::= AND 
            {
              String RESULT = null;
		 RESULT = "AndFormula"; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(25/*binary_op*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // binary_op ::= OR 
            {
              String RESULT = null;
		 RESULT = "OrFormula"; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(25/*binary_op*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // to_print ::= to_print STRING COLON ID 
            {
              List RESULT = null;
		int print_nodesleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int print_nodesright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		List print_nodes = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = print_nodes; RESULT.add(new PrintNodeAST(sig,label)); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(50/*to_print*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // to_print ::= to_print STRING COLON STRING 
            {
              List RESULT = null;
		int print_nodesleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int print_nodesright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		List print_nodes = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = print_nodes; RESULT.add(new PrintNodeAST(sig,label)); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(50/*to_print*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // to_print ::= 
            {
              List RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(50/*to_print*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arg_list ::= arg_list COMMA NUMBER 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = list; RESULT.add(new String(num)); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(11/*arg_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // arg_list ::= NUMBER 
            {
              List RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(num); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(11/*arg_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // arg_list ::= arg_list COMMA ID 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = list;  RESULT.add(id); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(11/*arg_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // arg_list ::= ID 
            {
              List RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(id); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(11/*arg_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // optional_arg_list ::= arg_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = list; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(12/*optional_arg_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // optional_arg_list ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(12/*optional_arg_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cfg_node ::= STRING 
            {
              String RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = label; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(9/*cfg_node*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cfg_node ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = id; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(9/*cfg_node*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // stmt ::= cfg_node VINVOKE ID ASSIGN STRING ID LP optional_arg_list RP COLON ID LP optional_id_list RP COLON ID LP optional_id_list RP COLON ID LP optional_id_list RP cfg_node 
            {
              StatementAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-24)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-24)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-24)).value;
		int resArgleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-22)).left;
		int resArgright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-22)).right;
		String resArg = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-22)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-20)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-20)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-20)).value;
		int trgleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-19)).left;
		int trgright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-19)).right;
		String trg = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-19)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-17)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-17)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-17)).value;
		int macCallleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).left;
		int macCallright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).right;
		String macCall = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).value;
		int argsCallleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).left;
		int argsCallright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).right;
		List argsCall = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).value;
		int macRetleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).left;
		int macRetright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).right;
		String macRet = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).value;
		int argsRetleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left;
		int argsRetright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).right;
		List argsRet = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).value;
		int macGuardleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int macGuardright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		String macGuard = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int argsGuardleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int argsGuardright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List argsGuard = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 	RESULT = new StatementVirtualInvocationAST(label, sig, trg, args, resArg, next); 
            ((StatementInvocationAST) RESULT).setCallMacro(macCall,argsCall); 
            ((StatementInvocationAST) RESULT).setRetMacro(macRet,argsRet); 
            ((StatementVirtualInvocationAST) RESULT).setGuardMacro(macGuard,argsRet); 
            
              CUP$PTSParser$result = new java_cup.runtime.Symbol(10/*stmt*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-24)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // stmt ::= cfg_node VINVOKE STRING ID LP optional_arg_list RP COLON ID LP optional_id_list RP COLON ID LP optional_id_list RP COLON ID LP optional_id_list RP cfg_node 
            {
              StatementAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-22)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-22)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-22)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-20)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-20)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-20)).value;
		int trgleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-19)).left;
		int trgright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-19)).right;
		String trg = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-19)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-17)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-17)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-17)).value;
		int macGuardleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).left;
		int macGuardright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).right;
		String macGuard = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).value;
		int argsGuardleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).left;
		int argsGuardright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).right;
		List argsGuard = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).value;
		int macCallleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).left;
		int macCallright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).right;
		String macCall = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).value;
		int argsCallleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left;
		int argsCallright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).right;
		List argsCall = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).value;
		int macRetleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int macRetright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		String macRet = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int argsRetleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int argsRetright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List argsRet = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 	RESULT = new StatementVirtualInvocationAST(label, sig, trg, args, null, next);
            ((StatementInvocationAST) RESULT).setCallMacro(macCall,argsCall); 
            ((StatementInvocationAST) RESULT).setRetMacro(macRet,argsRet); 
            ((StatementVirtualInvocationAST) RESULT).setGuardMacro(macGuard,argsGuard); 
            
              CUP$PTSParser$result = new java_cup.runtime.Symbol(10/*stmt*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-22)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stmt ::= cfg_node CINVOKE ID ASSIGN STRING LP optional_arg_list RP COLON ID LP optional_id_list RP COLON ID LP optional_id_list RP cfg_node 
            {
              StatementAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-18)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-18)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-18)).value;
		int resArgleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).left;
		int resArgright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).right;
		String resArg = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).value;
		int macCallleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).left;
		int macCallright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).right;
		String macCall = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).value;
		int argsCallleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left;
		int argsCallright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).right;
		List argsCall = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).value;
		int macRetleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int macRetright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		String macRet = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int argsRetleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int argsRetright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List argsRet = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 	RESULT = new StatementConstructorInvocationAST(label, sig, args, resArg, next); 
            ((StatementInvocationAST) RESULT).setCallMacro(macCall,argsCall); 
            ((StatementInvocationAST) RESULT).setRetMacro(macRet,argsRet); 
            
              CUP$PTSParser$result = new java_cup.runtime.Symbol(10/*stmt*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-18)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // stmt ::= cfg_node CINVOKE STRING LP optional_arg_list RP COLON ID LP optional_id_list RP COLON ID LP optional_id_list RP cfg_node 
            {
              StatementAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).value;
		int macCallleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).left;
		int macCallright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).right;
		String macCall = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).value;
		int argsCallleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left;
		int argsCallright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).right;
		List argsCall = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).value;
		int macRetleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int macRetright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		String macRet = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int argsRetleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int argsRetright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List argsRet = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 	RESULT = new StatementConstructorInvocationAST(label, sig, args, null, next); 
            ((StatementInvocationAST) RESULT).setCallMacro(macCall,argsCall); 
            ((StatementInvocationAST) RESULT).setRetMacro(macRet,argsRet); 
            
              CUP$PTSParser$result = new java_cup.runtime.Symbol(10/*stmt*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // stmt ::= cfg_node SINVOKE ID ASSIGN STRING LP optional_arg_list RP COLON ID LP optional_id_list RP COLON ID LP optional_id_list RP cfg_node 
            {
              StatementAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-18)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-18)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-18)).value;
		int resArgleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).left;
		int resArgright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).right;
		String resArg = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).value;
		int macCallleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).left;
		int macCallright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).right;
		String macCall = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).value;
		int argsCallleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left;
		int argsCallright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).right;
		List argsCall = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).value;
		int macRetleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int macRetright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		String macRet = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int argsRetleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int argsRetright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List argsRet = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 	RESULT = new StatementStaticInvocationAST(label, sig, args, resArg, next); 
            ((StatementInvocationAST) RESULT).setCallMacro(macCall,argsCall); 
            ((StatementInvocationAST) RESULT).setRetMacro(macRet,argsRet); 
            
              CUP$PTSParser$result = new java_cup.runtime.Symbol(10/*stmt*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-18)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // stmt ::= cfg_node SINVOKE STRING LP optional_arg_list RP COLON ID LP optional_id_list RP COLON ID LP optional_id_list RP cfg_node 
            {
              StatementAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-14)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).value;
		int macCallleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).left;
		int macCallright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).right;
		String macCall = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).value;
		int argsCallleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left;
		int argsCallright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).right;
		List argsCall = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).value;
		int macRetleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int macRetright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		String macRet = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int argsRetleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int argsRetright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List argsRet = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 	RESULT = new StatementStaticInvocationAST(label, sig, args, null, next); 
            ((StatementInvocationAST) RESULT).setCallMacro(macCall,argsCall); 
            ((StatementInvocationAST) RESULT).setRetMacro(macRet,argsRet); 
            
              CUP$PTSParser$result = new java_cup.runtime.Symbol(10/*stmt*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-16)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // stmt ::= cfg_node ID LP optional_id_list RP cfg_node 
            {
              StatementAST RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).value;
		int macleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int macright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		String mac = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 	RESULT = new StatementIntraAST(label, mac, args, next); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(10/*stmt*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // body_cfg ::= body_cfg stmt 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		StatementAST current = (StatementAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		  RESULT = prev; RESULT.add(current); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(8/*body_cfg*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // body_cfg ::= stmt 
            {
              List RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		StatementAST first = (StatementAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(first); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(8/*body_cfg*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // method_def ::= CONSTRUCTOR STRING LCBR body_cfg RCBR 
            {
              MethodDefAST RESULT = null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int stmts_listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int stmts_listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List stmts_list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = new MethodDefConstructorAST(sig, stmts_list); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(7/*method_def*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // method_def ::= VMETHOD STRING LCBR body_cfg RCBR 
            {
              MethodDefAST RESULT = null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int stmts_listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int stmts_listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List stmts_list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = new MethodDefVirtualAST(sig, stmts_list);  
              CUP$PTSParser$result = new java_cup.runtime.Symbol(7/*method_def*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // method_def ::= SMETHOD STRING LCBR body_cfg RCBR 
            {
              MethodDefAST RESULT = null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		String sig = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int stmts_listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int stmts_listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List stmts_list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = new MethodDefStaticAST(sig, stmts_list); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(7/*method_def*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // all_methods ::= all_methods method_def 
            {
              ProgramAST RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		ProgramAST prev = (ProgramAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int currentleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int currentright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		MethodDefAST current = (MethodDefAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = prev; RESULT.addMethod(current); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(6/*all_methods*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // all_methods ::= method_def 
            {
              ProgramAST RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		MethodDefAST first = (MethodDefAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new ProgramAST(); 
           RESULT.addMethod(first); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(6/*all_methods*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // code_part ::= all_methods 
            {
              ProgramAST RESULT = null;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		ProgramAST methods = (ProgramAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = methods; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(5/*code_part*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // retain ::= RETAIN formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = f; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(18/*retain*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // retain ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(18/*retain*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asgn_foreach ::= FOREACH LP ID in set_expr RP LCBR asgns RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(44/*asgn_foreach*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // asgn ::= LP predicate LP optional_id_list RP RP ASSIGN formula 
            {
              UpdateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new UpdateAST(p, f, VarAST.asVariables(args)); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(43/*asgn*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // asgn ::= predicate LP optional_id_list RP ASSIGN formula 
            {
              UpdateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new UpdateAST(p, f, VarAST.asVariables(args)); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(43/*asgn*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // asgns ::= error 
            {
              List RESULT = null;
		 parser.report_error("Illegal assignment ",null); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(36/*asgns*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // asgns ::= asgns asgn_foreach 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		ForeachAST a = (ForeachAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = prev; RESULT.add(a); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(36/*asgns*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asgns ::= asgns asgn 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		UpdateAST a = (UpdateAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = prev; RESULT.add(a); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(36/*asgns*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asgns ::= asgn_foreach 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		ForeachAST a = (ForeachAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(a); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(36/*asgns*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asgns ::= asgn 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		UpdateAST a = (UpdateAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(a); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(36/*asgns*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // optional_update ::= LCBR RCBR 
            {
              List RESULT = null;
		RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(41/*optional_update*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // optional_update ::= LCBR asgns RCBR 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = a; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(41/*optional_update*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // optional_update ::= 
            {
              List RESULT = null;
		RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(41/*optional_update*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // let ::= LET asgn let 
            {
              List RESULT = null;
		int lupdfleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int lupdfright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		UpdateAST lupdf = (UpdateAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int nextsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int nextsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List nexts = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = nexts; RESULT.add(lupdf); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(26/*let*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // let ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(26/*let*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // clone ::= CLONE 
            {
              FormulaAST RESULT = null;
		 RESULT = new ValueFormulaAST(Kleene.trueKleene); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(20/*clone*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // clone ::= CLONE formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = f; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(20/*clone*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // clone ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(20/*clone*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // new ::= NEW 
            {
              FormulaAST RESULT = null;
		 RESULT = new ValueFormulaAST(Kleene.trueKleene); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(19/*new*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // new ::= NEW formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = f; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(19/*new*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // new ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(19/*new*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // report_message ::= MESSAGE formula IMPLIES message 
            {
              ReportMessageAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		MessageAST m = (MessageAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		RESULT = new ReportMessageAST(f, m); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(42/*report_message*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // report_messages ::= report_messages report_message 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int messleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int messright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		ReportMessageAST mess = (ReportMessageAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		RESULT = prev; RESULT.add(mess); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(40/*report_messages*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // report_messages ::= 
            {
              List RESULT = null;
		RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(40/*report_messages*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // precond ::= PRED formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = f; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(21/*precond*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // precond ::= 
            {
              FormulaAST RESULT = null;
		 RESULT = null; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(21/*precond*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // focus_formulae ::= focus_formulae COMMA formula 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = prev; RESULT.add(f); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(38/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // focus_formulae ::= formula 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(f); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(38/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // focus ::= FOCUS LCBR focus_formulae RCBR 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = f; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(37/*focus*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // focus ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(37/*focus*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // title ::= TITLE message 
            {
              MessageAST RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		MessageAST str = (MessageAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = str; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(47/*title*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // title ::= 
            {
              MessageAST RESULT = null;
		 RESULT = new MessageStringAST(""); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(47/*title*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // action_def ::= title focus precond report_messages new clone let optional_update retain report_messages 
            {
              ActionDefAST RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).right;
		MessageAST t = (MessageAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).right;
		FormulaAST p = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).right;
		List m = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).right;
		FormulaAST n = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		FormulaAST c = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		List u = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		FormulaAST r = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List pm = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new ActionDefAST(t, f, p, m, n, c, l, u, r, pm
                                               /*, s, w, st, tn, h, e*/ ); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(4/*action_def*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // macro ::= ACTION ID LP optional_id_list RP LCBR action_def RCBR 
            {
              MacroAST RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		ActionDefAST def = (ActionDefAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = new ActionMacroAST(name, args, def); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(3/*macro*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // macros_sft ::= macros_sft macro 
            {
              MacroSFTSectionAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		MacroSFTSectionAST list = (MacroSFTSectionAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		MacroAST single = (MacroAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = list; RESULT.addMacro(single); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(49/*macros_sft*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // macros_sft ::= 
            {
              MacroSFTSectionAST RESULT = null;
		 RESULT = new MacroSFTSectionAST(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(49/*macros_sft*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // macros ::= macros macro 
            {
              MacroSectionAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		MacroSectionAST list = (MacroSectionAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		MacroAST single = (MacroAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = list; RESULT.addMacro(single); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(48/*macros*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // macros ::= 
            {
              MacroSectionAST RESULT = null;
		 RESULT = new MacroSectionAST(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(48/*macros*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // optional_dependency ::= optional_dependency LBR optional_id_list RBR ARROW ID 
            {
              PredicatePropertiesAST RESULT = null;
		int odleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		List lhs = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String rhs = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 
				RESULT = od;
				RESULT.addFunctionalDependency(lhs,rhs);
			
              CUP$PTSParser$result = new java_cup.runtime.Symbol(52/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // optional_dependency ::= optional_dependency ID 
            {
              PredicatePropertiesAST RESULT = null;
		int odleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 
				RESULT = od;
				RESULT.addProperty(id); 
			
              CUP$PTSParser$result = new java_cup.runtime.Symbol(52/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // optional_dependency ::= 
            {
              PredicatePropertiesAST RESULT = null;
		
				RESULT = new PredicatePropertiesAST();
			
              CUP$PTSParser$result = new java_cup.runtime.Symbol(52/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // predicate ::= ID optional_params 
            {
              PredicateAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = PredicateAST.getPredicateAST(id, params); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(22/*predicate*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cons_rule ::= CONSISTENCY_RULE formula IMPLIES_T formula 
            {
              ConstraintAST RESULT = null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		FormulaAST body = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		FormulaAST head = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new ConstraintAST(body, head); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(32/*cons_rule*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // show_attr_list ::= show_attr_list COMMA kleene 
            {
              Set RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		Set list = (Set)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		Kleene a = (Kleene)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = list; RESULT.add(a); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(14/*show_attr_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // show_attr_list ::= kleene 
            {
              Set RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		Kleene a = (Kleene)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new HashSet(); RESULT.add(a); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(14/*show_attr_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // optional_show_attr_list ::= show_attr_list 
            {
              Set RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		Set l = (Set)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = l; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(15/*optional_show_attr_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // optional_show_attr_list ::= 
            {
              Set RESULT = null;
		 RESULT = new HashSet(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(15/*optional_show_attr_list*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // show_attr ::= LCBR optional_show_attr_list RCBR 
            {
              Set RESULT = null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = attr; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(13/*show_attr*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // show_attr ::= 
            {
              Set RESULT = null;
		 RESULT = null; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(13/*show_attr*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // optional_params ::= LBR id_list RBR 
            {
              List RESULT = null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = params; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(16/*optional_params*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optional_params ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(16/*optional_params*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrum_pred_def ::= INS_PRED ID optional_params LP optional_id_list RP ASSIGN formula optional_dependency show_attr 
            {
              InstrumPredicateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int odleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		
         	od.setArity(args.size()); 
            RESULT = new InstrumPredicateAST(p, params, 
                                 VarAST.asVariables(args), 
                                 f, od, attr);
         
              CUP$PTSParser$result = new java_cup.runtime.Symbol(31/*instrum_pred_def*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // core_pred_def ::= PRED ID optional_params LP optional_id_list RP optional_dependency show_attr 
            {
              CorePredicateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int odleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		
            od.setArity(args.size());  
            RESULT = new CorePredicateAST(p, params, args, args.size(), od, attr);
         
              CUP$PTSParser$result = new java_cup.runtime.Symbol(30/*core_pred_def*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // in ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 if (!id.equals("in")) 
        parser.report_fatal_error("expected 'in'", null); 
    
              CUP$PTSParser$result = new java_cup.runtime.Symbol(2/*in*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // decl_foreach ::= FOREACH LP ID in set_expr RP LCBR decls RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(45/*decl_foreach*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // decl ::= cons_rule 
            {
              AST RESULT = null;
		int consleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		ConstraintAST cons = (ConstraintAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = cons; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(33/*decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decl ::= set_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		SetDefAST def = (SetDefAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = def; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(33/*decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decl ::= instrum_pred_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		InstrumPredicateAST def = (InstrumPredicateAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = def; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(33/*decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decl ::= core_pred_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		CorePredicateAST def = (CorePredicateAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = def; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(33/*decl*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decls ::= decls decl_foreach 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		ForeachAST f = (ForeachAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = list; RESULT.add(f); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(39/*decls*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decls ::= decls decl 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		AST single = (AST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = list; RESULT.add(single); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(39/*decls*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decls ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(39/*decls*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // decls_done ::= decls 
            {
              DeclarationsAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new DeclarationsAST(list); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(1/*decls_done*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // set_expr ::= error 
            {
              SetAST RESULT = null;
		 parser.report_error("Illegal set expression",null); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // set_expr ::= LP set_expr RP 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = e1; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // set_expr ::= set_expr AND set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new SetAndAST(e1, e2); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // set_expr ::= set_expr MINUS set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new SetMinusAST(e1, e2); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // set_expr ::= set_expr PLUS set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new SetPlusAST(e1, e2); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // set_expr ::= LCBR optional_id_list RCBR 
            {
              SetAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		 RESULT = new SetConstantAST(list); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // set_expr ::= ID 
            {
              SetAST RESULT = null;
		int setleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String set = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new SetUseAST(set); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(28/*set_expr*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // set_def ::= SET ID set_expr 
            {
              SetDefAST RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		SetAST elements = (SetAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new SetDefAST(name, new ArrayList(elements.getMembers())) ; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(29/*set_def*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // kleene ::= error 
            {
              Kleene RESULT = null;
		 parser.report_error("Illegal Kleene value",null); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(27/*kleene*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // kleene ::= UNKNOWN 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.unknownKleene; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(27/*kleene*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // kleene ::= FALSE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.falseKleene; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(27/*kleene*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // kleene ::= TRUE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.trueKleene; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(27/*kleene*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // message ::= message PLUS message 
            {
              MessageAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).right;
		MessageAST l = (MessageAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		MessageAST r = (MessageAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		RESULT = new MessageCompositeAST(l, r); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(46/*message*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // message ::= predicate 
            {
              MessageAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		RESULT = new MessagePredicateAST(p); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(46/*message*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // message ::= STRING 
            {
              MessageAST RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		RESULT = new MessageStringAST(str); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(46/*message*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var ::= ID 
            {
              Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new Var(id); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(23/*var*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PTS ::= symb_part PERCENT PERCENT decls_done PERCENT PERCENT macros PERCENT PERCENT code_part PERCENT PERCENT to_print 
            {
              PTSAST RESULT = null;
		int symbsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).left;
		int symbsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).right;
		SymbAST symbs = (SymbAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).right;
		DeclarationsAST d = (DeclarationsAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-9)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).right;
		MacroSectionAST m = (MacroSectionAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-6)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		ProgramAST cp = (ProgramAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		List tp = (List)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new PTSAST(symbs,d,m,cp,tp); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(51/*PTS*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SFT ::= decls_done PERCENT PERCENT macros_sft 
            {
              SFTAST RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).right;
		DeclarationsAST d = (DeclarationsAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		MacroSFTSectionAST m = (MacroSFTSectionAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		 RESULT = new SFTAST(d,m); 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(71/*SFT*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STARTHERE ::= SFT 
            {
              AST RESULT = null;
		int sftleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int sftright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		SFTAST sft = (SFTAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		RESULT = sft; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(70/*STARTHERE*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // STARTHERE ::= PTS 
            {
              AST RESULT = null;
		int ptsleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left;
		int ptsright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right;
		PTSAST pts = (PTSAST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).value;
		RESULT = pts; 
              CUP$PTSParser$result = new java_cup.runtime.Symbol(70/*STARTHERE*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          return CUP$PTSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= STARTHERE EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).right;
		AST start_val = (AST)((java_cup.runtime.Symbol) CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).value;
		RESULT = start_val;
              CUP$PTSParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PTSParser$stack.elementAt(CUP$PTSParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$PTSParser$parser.done_parsing();
          return CUP$PTSParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

