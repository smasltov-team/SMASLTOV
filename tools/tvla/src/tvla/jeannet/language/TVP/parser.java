
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jan 30 15:57:50 CST 2014
//----------------------------------------------------

package tvla.jeannet.language.TVP;

import tvla.logic.*;
import tvla.core.*;
import tvla.formulae.*;
import tvla.jeannet.language.*;
import tvla.predicates.*;
import tvla.jeannet.equationSystem.*;
import tvla.jeannet.expressions.*;
import tvla.jeannet.util.Symbol;
import tvla.util.*;
import com.ibm.dk.dps.io.CPreProcessorStream;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Thu Jan 30 15:57:50 CST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\003\012\000\002\005" +
    "\003\000\002\006\003\000\002\006\005\000\002\007\003" +
    "\000\002\007\004\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\014\005\000\002\013" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\015\013\000" +
    "\002\016\003\000\002\017\002\000\002\017\004\000\002" +
    "\017\004\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\003\000\002\021\005" +
    "\000\002\022\002\000\002\022\003\000\002\023\002\000" +
    "\002\023\005\000\002\024\002\000\002\024\005\000\002" +
    "\025\012\000\002\026\014\000\002\027\006\000\002\030" +
    "\004\000\002\031\002\000\002\031\004\000\002\031\010" +
    "\000\002\032\010\000\002\032\005\000\002\032\003\000" +
    "\002\032\003\000\002\032\007\000\002\032\007\000\002" +
    "\033\003\000\002\033\005\000\002\101\003\000\002\101" +
    "\005\000\002\034\006\000\002\034\010\000\002\034\012" +
    "\000\002\034\016\000\002\034\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\102\002\000\002\037\007" +
    "\000\002\047\004\000\002\047\003\000\002\040\005\000" +
    "\002\040\003\000\002\050\004\000\002\050\003\000\002" +
    "\041\005\000\002\041\003\000\002\051\004\000\002\051" +
    "\003\000\002\042\005\000\002\042\003\000\002\052\004" +
    "\000\002\052\003\000\002\056\005\000\002\043\005\000" +
    "\002\043\003\000\002\053\004\000\002\053\003\000\002" +
    "\044\005\000\002\044\003\000\002\054\004\000\002\054" +
    "\003\000\002\045\007\000\002\045\003\000\002\055\004" +
    "\000\002\055\003\000\002\046\005\000\002\046\003\000" +
    "\002\057\013\000\002\060\003\000\002\060\003\000\002" +
    "\060\004\000\002\060\004\000\002\061\011\000\002\061" +
    "\013\000\002\062\002\000\002\062\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\005\000\002\063\005\000" +
    "\002\064\013\000\002\065\002\000\002\065\004\000\002" +
    "\066\010\000\002\067\011\000\002\070\002\000\002\070" +
    "\004\000\002\071\013\000\002\072\003\000\002\072\004" +
    "\000\002\073\003\000\002\004\002\000\002\004\005\000" +
    "\002\074\003\000\002\074\003\000\002\075\013\000\002" +
    "\076\007\000\002\076\007\000\002\076\003\000\002\076" +
    "\016\000\002\076\005\000\002\076\005\000\002\076\005" +
    "\000\002\076\005\000\002\076\004\000\002\076\011\000" +
    "\002\076\005\000\002\076\005\000\002\076\005\000\002" +
    "\076\006\000\002\076\011\000\002\076\011\000\002\076" +
    "\003\000\002\100\003\000\002\100\005\000\002\077\002" +
    "\000\002\077\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017a\000\016\007\uffea\010\uffea\011\uffea\042\uffea\043" +
    "\uffea\044\uffea\001\002\000\004\002\u017c\001\002\000\016" +
    "\007\u0151\010\u014b\011\u0148\042\uffeb\043\u0150\044\u014c\001" +
    "\002\000\004\042\007\001\002\000\004\042\010\001\002" +
    "\000\006\042\uff8f\053\uff8f\001\002\000\006\042\012\053" +
    "\014\001\002\000\004\042\u0133\001\002\000\006\042\uff8e" +
    "\053\uff8e\001\002\000\004\005\015\001\002\000\004\046" +
    "\016\001\002\000\006\005\017\047\uff6d\001\002\000\012" +
    "\032\uff6f\034\uff6f\036\uff6f\047\uff6f\001\002\000\004\047" +
    "\024\001\002\000\012\032\uff6c\034\022\036\uff6c\047\uff6c" +
    "\001\002\000\004\005\023\001\002\000\012\032\uff6e\034" +
    "\uff6e\036\uff6e\047\uff6e\001\002\000\004\031\025\001\002" +
    "\000\004\005\027\001\002\000\006\042\uff8d\053\uff8d\001" +
    "\002\000\064\002\uffff\005\uffff\032\uffff\033\uffff\034\uffff" +
    "\036\uffff\041\uffff\054\uffff\064\uffff\065\uffff\066\uffff\067" +
    "\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074\uffff\075\uffff" +
    "\076\uffff\077\uffff\100\uffff\101\uffff\102\uffff\103\uffff\104" +
    "\uffff\001\002\000\006\032\ufffe\034\ufffe\001\002\000\006" +
    "\032\033\034\032\001\002\000\004\005\027\001\002\000" +
    "\006\035\uff8b\050\034\001\002\000\006\004\350\005\102" +
    "\001\002\000\004\035\036\001\002\000\044\005\027\054" +
    "\044\064\uffbc\065\042\066\045\067\062\070\040\071\054" +
    "\072\041\073\043\074\047\075\060\076\063\077\046\100" +
    "\057\102\052\104\037\001\002\000\004\031\uffc5\001\002" +
    "\000\004\031\uffc0\001\002\000\004\005\027\001\002\000" +
    "\004\031\uffc4\001\002\000\004\031\uffbf\001\002\000\004" +
    "\031\u0118\001\002\000\004\031\uffc2\001\002\000\004\031" +
    "\uffc1\001\002\000\004\031\uffbe\001\002\000\004\064\142" +
    "\001\002\000\004\031\137\001\002\000\044\005\027\054" +
    "\044\064\uffbc\065\042\066\045\067\062\070\040\071\054" +
    "\072\041\073\043\074\047\075\060\076\063\077\046\100" +
    "\057\102\052\104\037\001\002\000\004\036\131\001\002" +
    "\000\004\005\027\001\002\000\012\036\uffc6\041\uffc6\101" +
    "\uffc6\103\uffc6\001\002\000\012\036\uffd1\041\uffd1\101\uffd1" +
    "\103\uffd1\001\002\000\004\005\027\001\002\000\004\031" +
    "\uffbd\001\002\000\004\031\113\001\002\000\004\031\uffc3" +
    "\001\002\000\004\031\065\001\002\000\012\036\uffd2\041" +
    "\uffd2\101\uffd2\103\uffd2\001\002\000\004\005\027\001\002" +
    "\000\004\034\067\001\002\000\004\004\070\001\002\000" +
    "\004\034\071\001\002\000\004\004\072\001\002\000\004" +
    "\034\073\001\002\000\010\026\074\027\076\030\075\001" +
    "\002\000\054\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\031\ufff6\032\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\042\ufff6\043\ufff6" +
    "\044\ufff6\046\ufff6\052\ufff6\001\002\000\054\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\031\ufff4\032\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\042\ufff4\043\ufff4\044\ufff4\046\ufff4\052\ufff4" +
    "\001\002\000\054\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\031\ufff5\032\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\046\ufff5\052\ufff5\001\002\000\004\034\100" +
    "\001\002\000\004\005\102\001\002\000\006\032\uffcc\034" +
    "\uffcc\001\002\000\016\023\uffdd\031\uffdd\032\uffdd\034\uffdd" +
    "\035\uffdd\046\110\001\002\000\006\032\105\034\104\001" +
    "\002\000\004\005\102\001\002\000\012\036\uffc7\041\uffc7" +
    "\101\uffc7\103\uffc7\001\002\000\006\032\uffcb\034\uffcb\001" +
    "\002\000\016\022\uffd8\023\uffd8\031\uffd8\032\uffd8\034\uffd8" +
    "\035\uffd8\001\002\000\004\005\017\001\002\000\006\034" +
    "\022\047\112\001\002\000\016\022\uffdc\023\uffdc\031\uffdc" +
    "\032\uffdc\034\uffdc\035\uffdc\001\002\000\004\005\027\001" +
    "\002\000\004\034\115\001\002\000\004\005\027\001\002" +
    "\000\004\032\117\001\002\000\012\036\uffc9\041\uffc9\101" +
    "\uffc9\103\uffc9\001\002\000\004\033\121\001\002\000\044" +
    "\005\027\054\044\064\uffbc\065\042\066\045\067\062\070" +
    "\040\071\054\072\041\073\043\074\047\075\060\076\063" +
    "\077\046\100\057\102\052\104\037\001\002\000\004\101" +
    "\123\001\002\000\044\005\027\054\044\064\uffbc\065\042" +
    "\066\045\067\062\070\040\071\054\072\041\073\043\074" +
    "\047\075\060\076\063\077\046\100\057\102\052\104\037" +
    "\001\002\000\012\036\uffd4\041\uffd4\101\uffd4\103\uffd4\001" +
    "\002\000\004\101\126\001\002\000\004\005\027\001\002" +
    "\000\044\005\027\054\044\064\uffbc\065\042\066\045\067" +
    "\062\070\040\071\054\072\041\073\043\074\047\075\060" +
    "\076\063\077\046\100\057\102\052\104\037\001\002\000" +
    "\012\036\uffd0\041\uffd0\101\uffd0\103\uffd0\001\002\000\006" +
    "\042\uff8c\053\uff8c\001\002\000\006\041\uffce\103\uffce\001" +
    "\002\000\006\041\134\103\135\001\002\000\044\005\027" +
    "\054\044\064\uffbc\065\042\066\045\067\062\070\040\071" +
    "\054\072\041\073\043\074\047\075\060\076\063\077\046" +
    "\100\057\102\052\104\037\001\002\000\012\036\uffd3\041" +
    "\uffd3\101\uffd3\103\uffd3\001\002\000\006\041\uffcd\103\uffcd" +
    "\001\002\000\004\005\027\001\002\000\004\032\141\001" +
    "\002\000\012\036\uffca\041\uffca\101\uffca\103\uffca\001\002" +
    "\000\004\031\143\001\002\000\004\005\027\001\002\000" +
    "\006\032\147\034\145\001\002\000\022\032\165\055\163" +
    "\056\166\057\160\060\162\061\155\062\157\063\150\001" +
    "\002\000\012\036\uffbb\041\uffbb\101\uffbb\103\uffbb\001\002" +
    "\000\012\036\uffb9\041\uffb9\101\uffb9\103\uffb9\001\002\000" +
    "\004\035\363\001\002\000\012\036\uffb7\041\uffb7\101\uffb7" +
    "\103\uffb7\001\002\000\012\036\uffba\041\uffba\101\uffba\103" +
    "\uffba\001\002\000\012\036\uffa2\041\uffa2\101\uffa2\103\uffa2" +
    "\001\002\000\012\036\uffb3\041\uffb3\101\uffb3\103\uffb3\001" +
    "\002\000\030\005\175\012\173\013\172\014\200\017\203" +
    "\020\167\021\177\026\074\027\076\030\075\031\170\001" +
    "\002\000\012\036\uffa6\041\uffa6\101\uffa6\103\uffa6\001\002" +
    "\000\030\005\175\012\173\013\172\014\200\017\203\020" +
    "\167\021\177\026\074\027\076\030\075\031\170\001\002" +
    "\000\030\005\175\012\173\013\172\014\200\017\203\020" +
    "\167\021\177\026\074\027\076\030\075\031\170\001\002" +
    "\000\012\036\uffaf\041\uffaf\101\uffaf\103\uffaf\001\002\000" +
    "\030\005\175\012\173\013\172\014\200\017\203\020\167" +
    "\021\177\026\074\027\076\030\075\031\170\001\002\000" +
    "\030\005\175\012\173\013\172\014\200\017\203\020\167" +
    "\021\177\026\074\027\076\030\075\031\170\001\002\000" +
    "\012\036\uffaa\041\uffaa\101\uffaa\103\uffaa\001\002\000\012" +
    "\036\uff9e\041\uff9e\101\uff9e\103\uff9e\001\002\000\030\005" +
    "\175\012\173\013\172\014\200\017\203\020\167\021\177" +
    "\026\074\027\076\030\075\031\170\001\002\000\004\051" +
    "\uff82\001\002\000\030\005\175\012\173\013\172\014\200" +
    "\017\203\020\167\021\177\026\074\027\076\030\075\031" +
    "\170\001\002\000\054\005\uff70\006\uff70\007\uff70\010\uff70" +
    "\011\uff70\015\uff70\016\uff70\017\uff70\020\uff70\031\uff70\032" +
    "\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\042\uff70" +
    "\043\uff70\044\uff70\046\uff70\052\uff70\001\002\000\004\031" +
    "\312\001\002\000\004\031\306\001\002\000\004\051\261" +
    "\001\002\000\022\022\uffdd\023\uffdd\024\ufffa\025\ufffa\031" +
    "\uffdd\032\uffdd\034\uffdd\046\110\001\002\000\016\015\246" +
    "\016\244\017\247\020\245\032\257\034\255\001\002\000" +
    "\030\005\175\012\173\013\172\014\200\017\203\020\167" +
    "\021\177\026\074\027\076\030\075\031\170\001\002\000" +
    "\004\031\231\001\002\000\010\022\212\023\213\031\214" +
    "\001\002\000\054\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011" +
    "\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\031\uff7e\032\uff7e" +
    "\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\042\uff7e\043" +
    "\uff7e\044\uff7e\046\uff7e\052\uff7e\001\002\000\004\051\uff83" +
    "\001\002\000\006\024\205\025\206\001\002\000\004\005" +
    "\207\001\002\000\004\005\207\001\002\000\054\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\031\ufffa\032\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa\052" +
    "\ufffa\001\002\000\054\005\uff74\006\uff74\007\uff74\010\uff74" +
    "\011\uff74\015\uff74\016\uff74\017\uff74\020\uff74\031\uff74\032" +
    "\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\042\uff74" +
    "\043\uff74\044\uff74\046\uff74\052\uff74\001\002\000\054\005" +
    "\uff75\006\uff75\007\uff75\010\uff75\011\uff75\015\uff75\016\uff75" +
    "\017\uff75\020\uff75\031\uff75\032\uff75\034\uff75\035\uff75\036" +
    "\uff75\037\uff75\040\uff75\042\uff75\043\uff75\044\uff75\046\uff75" +
    "\052\uff75\001\002\000\004\031\224\001\002\000\004\031" +
    "\217\001\002\000\006\005\017\032\uff6d\001\002\000\004" +
    "\032\216\001\002\000\054\005\uff73\006\uff73\007\uff73\010" +
    "\uff73\011\uff73\015\uff73\016\uff73\017\uff73\020\uff73\031\uff73" +
    "\032\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\042" +
    "\uff73\043\uff73\044\uff73\046\uff73\052\uff73\001\002\000\004" +
    "\005\207\001\002\000\004\034\221\001\002\000\004\005" +
    "\207\001\002\000\004\032\223\001\002\000\054\005\uff71" +
    "\006\uff71\007\uff71\010\uff71\011\uff71\015\uff71\016\uff71\017" +
    "\uff71\020\uff71\031\uff71\032\uff71\034\uff71\035\uff71\036\uff71" +
    "\037\uff71\040\uff71\042\uff71\043\uff71\044\uff71\046\uff71\052" +
    "\uff71\001\002\000\004\005\207\001\002\000\004\034\226" +
    "\001\002\000\004\005\207\001\002\000\004\032\230\001" +
    "\002\000\054\005\uff72\006\uff72\007\uff72\010\uff72\011\uff72" +
    "\015\uff72\016\uff72\017\uff72\020\uff72\031\uff72\032\uff72\034" +
    "\uff72\035\uff72\036\uff72\037\uff72\040\uff72\042\uff72\043\uff72" +
    "\044\uff72\046\uff72\052\uff72\001\002\000\004\005\207\001" +
    "\002\000\004\034\233\001\002\000\004\005\207\001\002" +
    "\000\004\032\235\001\002\000\004\031\236\001\002\000" +
    "\004\005\207\001\002\000\004\034\240\001\002\000\004" +
    "\005\207\001\002\000\004\032\242\001\002\000\030\005" +
    "\175\012\173\013\172\014\200\017\203\020\167\021\177" +
    "\026\074\027\076\030\075\031\170\001\002\000\054\005" +
    "\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\015\246\016\244" +
    "\017\247\020\245\031\uff7d\032\uff7d\034\uff7d\035\uff7d\036" +
    "\uff7d\037\uff7d\040\uff7d\042\uff7d\043\uff7d\044\uff7d\046\uff7d" +
    "\052\uff7d\001\002\000\030\005\175\012\173\013\172\014" +
    "\200\017\203\020\167\021\177\026\074\027\076\030\075" +
    "\031\170\001\002\000\030\005\175\012\173\013\172\014" +
    "\200\017\203\020\167\021\177\026\074\027\076\030\075" +
    "\031\170\001\002\000\030\005\175\012\173\013\172\014" +
    "\200\017\203\020\167\021\177\026\074\027\076\030\075" +
    "\031\170\001\002\000\030\005\175\012\173\013\172\014" +
    "\200\017\203\020\167\021\177\026\074\027\076\030\075" +
    "\031\170\001\002\000\054\005\uff7b\006\uff7b\007\uff7b\010" +
    "\uff7b\011\uff7b\015\uff7b\016\uff7b\017\uff7b\020\245\031\uff7b" +
    "\032\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\042" +
    "\uff7b\043\uff7b\044\uff7b\046\uff7b\052\uff7b\001\002\000\054" +
    "\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\015\uff79\016" +
    "\244\017\247\020\245\031\uff79\032\uff79\034\uff79\035\uff79" +
    "\036\uff79\037\uff79\040\uff79\042\uff79\043\uff79\044\uff79\046" +
    "\uff79\052\uff79\001\002\000\054\005\uff7c\006\uff7c\007\uff7c" +
    "\010\uff7c\011\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\031" +
    "\uff7c\032\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c" +
    "\042\uff7c\043\uff7c\044\uff7c\046\uff7c\052\uff7c\001\002\000" +
    "\054\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\015\uff7a" +
    "\016\uff7a\017\247\020\245\031\uff7a\032\uff7a\034\uff7a\035" +
    "\uff7a\036\uff7a\037\uff7a\040\uff7a\042\uff7a\043\uff7a\044\uff7a" +
    "\046\uff7a\052\uff7a\001\002\000\054\005\uff78\006\uff78\007" +
    "\uff78\010\uff78\011\uff78\015\uff78\016\uff78\017\uff78\020\uff78" +
    "\031\uff78\032\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040" +
    "\uff78\042\uff78\043\uff78\044\uff78\046\uff78\052\uff78\001\002" +
    "\000\016\032\165\057\160\060\162\061\155\062\157\063" +
    "\150\001\002\000\012\036\uffb4\041\uffb4\101\uffb4\103\uffb4" +
    "\001\002\000\012\036\uffb1\041\uffb1\101\uffb1\103\uffb1\001" +
    "\002\000\012\036\uffb2\041\uffb2\101\uffb2\103\uffb2\001\002" +
    "\000\004\035\262\001\002\000\030\005\175\012\173\013" +
    "\172\014\200\017\203\020\167\021\177\026\074\027\076" +
    "\030\075\031\170\001\002\000\014\015\246\016\244\017" +
    "\247\020\245\040\264\001\002\000\004\005\265\001\002" +
    "\000\004\101\266\001\002\000\010\005\267\031\272\035" +
    "\271\001\002\000\030\007\ufff2\010\ufff2\011\ufff2\020\ufff2" +
    "\023\ufff2\032\ufff2\036\ufff2\042\ufff2\043\ufff2\044\ufff2\045" +
    "\ufff2\001\002\000\012\020\274\023\275\036\305\045\277" +
    "\001\002\000\006\005\017\036\uff6d\001\002\000\010\005" +
    "\267\031\272\035\271\001\002\000\012\020\274\023\275" +
    "\032\276\045\277\001\002\000\010\005\267\031\272\035" +
    "\271\001\002\000\010\005\267\031\272\035\271\001\002" +
    "\000\030\007\uffed\010\uffed\011\uffed\020\uffed\023\uffed\032" +
    "\uffed\036\uffed\042\uffed\043\uffed\044\uffed\045\uffed\001\002" +
    "\000\010\005\267\031\272\035\271\001\002\000\030\007" +
    "\uffef\010\uffef\011\uffef\020\uffef\023\uffef\032\uffef\036\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\001\002\000\030\007" +
    "\ufff0\010\ufff0\011\ufff0\020\ufff0\023\ufff0\032\ufff0\036\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\045\ufff0\001\002\000\030\007" +
    "\uffee\010\uffee\011\uffee\020\uffee\023\275\032\uffee\036\uffee" +
    "\042\uffee\043\uffee\044\uffee\045\277\001\002\000\004\036" +
    "\304\001\002\000\030\007\ufff1\010\ufff1\011\ufff1\020\ufff1" +
    "\023\ufff1\032\ufff1\036\ufff1\042\ufff1\043\ufff1\044\ufff1\045" +
    "\ufff1\001\002\000\054\005\uff81\006\uff81\007\uff81\010\uff81" +
    "\011\uff81\015\uff81\016\uff81\017\uff81\020\uff81\031\uff81\032" +
    "\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81\042\uff81" +
    "\043\uff81\044\uff81\046\uff81\052\uff81\001\002\000\006\005" +
    "\017\032\uff6d\001\002\000\004\032\310\001\002\000\030" +
    "\005\175\012\173\013\172\014\200\017\203\020\167\021" +
    "\177\026\074\027\076\030\075\031\170\001\002\000\054" +
    "\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\015\246\016" +
    "\244\017\247\020\245\031\uff7f\032\uff7f\034\uff7f\035\uff7f" +
    "\036\uff7f\037\uff7f\040\uff7f\042\uff7f\043\uff7f\044\uff7f\046" +
    "\uff7f\052\uff7f\001\002\000\006\005\017\032\uff6d\001\002" +
    "\000\004\032\314\001\002\000\030\005\175\012\173\013" +
    "\172\014\200\017\203\020\167\021\177\026\074\027\076" +
    "\030\075\031\170\001\002\000\054\005\uff80\006\uff80\007" +
    "\uff80\010\uff80\011\uff80\015\246\016\244\017\247\020\245" +
    "\031\uff80\032\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040" +
    "\uff80\042\uff80\043\uff80\044\uff80\046\uff80\052\uff80\001\002" +
    "\000\016\015\246\016\244\017\247\020\245\032\320\037" +
    "\317\001\002\000\030\005\175\012\173\013\172\014\200" +
    "\017\203\020\167\021\177\026\074\027\076\030\075\031" +
    "\170\001\002\000\054\005\uff76\006\uff76\007\uff76\010\uff76" +
    "\011\uff76\015\uff76\016\uff76\017\uff76\020\uff76\031\uff76\032" +
    "\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\042\uff76" +
    "\043\uff76\044\uff76\046\uff76\052\uff76\001\002\000\014\015" +
    "\246\016\244\017\247\020\245\040\322\001\002\000\030" +
    "\005\175\012\173\013\172\014\200\017\203\020\167\021" +
    "\177\026\074\027\076\030\075\031\170\001\002\000\014" +
    "\015\246\016\244\017\247\020\245\032\324\001\002\000" +
    "\054\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77\015\uff77" +
    "\016\uff77\017\uff77\020\uff77\031\uff77\032\uff77\034\uff77\035" +
    "\uff77\036\uff77\037\uff77\040\uff77\042\uff77\043\uff77\044\uff77" +
    "\046\uff77\052\uff77\001\002\000\016\015\246\016\244\017" +
    "\247\020\245\032\330\034\326\001\002\000\020\032\165" +
    "\056\166\057\160\060\162\061\155\062\157\063\150\001" +
    "\002\000\012\036\uffb8\041\uffb8\101\uffb8\103\uffb8\001\002" +
    "\000\012\036\uffb5\041\uffb5\101\uffb5\103\uffb5\001\002\000" +
    "\012\036\uffb6\041\uffb6\101\uffb6\103\uffb6\001\002\000\016" +
    "\015\246\016\244\017\247\020\245\032\335\034\333\001" +
    "\002\000\012\032\165\061\155\062\157\063\150\001\002" +
    "\000\012\036\uffab\041\uffab\101\uffab\103\uffab\001\002\000" +
    "\012\036\uffa8\041\uffa8\101\uffa8\103\uffa8\001\002\000\012" +
    "\036\uffa9\041\uffa9\101\uffa9\103\uffa9\001\002\000\012\015" +
    "\246\016\345\017\247\020\245\001\002\000\006\032\342" +
    "\034\341\001\002\000\016\032\165\057\160\060\162\061" +
    "\155\062\157\063\150\001\002\000\012\036\uffad\041\uffad" +
    "\101\uffad\103\uffad\001\002\000\012\036\uffb0\041\uffb0\101" +
    "\uffb0\103\uffb0\001\002\000\012\036\uffae\041\uffae\101\uffae" +
    "\103\uffae\001\002\000\032\004\350\005\175\012\173\013" +
    "\172\014\200\017\203\020\167\021\177\026\074\027\076" +
    "\030\075\031\170\001\002\000\014\022\212\023\213\031" +
    "\214\032\ufff8\034\ufff8\001\002\000\010\023\351\032\uffac" +
    "\034\uffac\001\002\000\012\023\ufff9\032\ufff9\034\ufff9\035" +
    "\ufff9\001\002\000\006\004\350\005\102\001\002\000\012" +
    "\023\ufff8\032\ufff8\034\ufff8\035\ufff8\001\002\000\012\023" +
    "\ufff7\032\ufff7\034\ufff7\035\ufff7\001\002\000\014\015\246" +
    "\016\244\017\247\020\245\032\355\001\002\000\012\036" +
    "\uff9f\041\uff9f\101\uff9f\103\uff9f\001\002\000\016\015\246" +
    "\016\244\017\247\020\245\032\361\034\357\001\002\000" +
    "\010\032\165\062\157\063\150\001\002\000\012\036\uffa7" +
    "\041\uffa7\101\uffa7\103\uffa7\001\002\000\012\036\uffa4\041" +
    "\uffa4\101\uffa4\103\uffa4\001\002\000\012\036\uffa5\041\uffa5" +
    "\101\uffa5\103\uffa5\001\002\000\010\005\102\031\366\043" +
    "\371\001\002\000\004\031\u0112\001\002\000\012\005\uff9c" +
    "\031\uff9c\036\uff9c\043\uff9c\001\002\000\004\005\102\001" +
    "\002\000\012\005\102\031\366\036\u0104\043\371\001\002" +
    "\000\012\005\uff9b\031\uff9b\036\uff9b\043\uff9b\001\002\000" +
    "\004\031\372\001\002\000\004\005\373\001\002\000\004" +
    "\101\374\001\002\000\010\005\267\031\272\035\271\001" +
    "\002\000\012\020\274\023\275\032\376\045\277\001\002" +
    "\000\004\035\377\001\002\000\010\005\102\031\366\043" +
    "\371\001\002\000\012\005\102\031\366\036\u0102\043\371" +
    "\001\002\000\012\005\uff9a\031\uff9a\036\uff9a\043\uff9a\001" +
    "\002\000\012\005\uff9d\031\uff9d\036\uff9d\043\uff9d\001\002" +
    "\000\012\005\uff99\031\uff99\036\uff99\043\uff99\001\002\000" +
    "\006\032\u0107\034\u0106\001\002\000\012\036\uffa3\041\uffa3" +
    "\101\uffa3\103\uffa3\001\002\000\006\032\165\062\157\001" +
    "\002\000\012\036\uffa0\041\uffa0\101\uffa0\103\uffa0\001\002" +
    "\000\012\036\uffa1\041\uffa1\101\uffa1\103\uffa1\001\002\000" +
    "\004\031\u010a\001\002\000\006\005\017\032\uff6d\001\002" +
    "\000\004\032\u010c\001\002\000\004\032\u010d\001\002\000" +
    "\004\033\u010e\001\002\000\030\005\175\012\173\013\172" +
    "\014\200\017\203\020\167\021\177\026\074\027\076\030" +
    "\075\031\170\001\002\000\024\005\uff96\015\246\016\244" +
    "\017\247\020\245\031\uff96\036\uff96\043\uff96\052\u0111\001" +
    "\002\000\012\005\uff97\031\uff97\036\uff97\043\uff97\001\002" +
    "\000\012\005\uff95\031\uff95\036\uff95\043\uff95\001\002\000" +
    "\006\005\017\032\uff6d\001\002\000\004\032\u0114\001\002" +
    "\000\004\033\u0115\001\002\000\030\005\175\012\173\013" +
    "\172\014\200\017\203\020\167\021\177\026\074\027\076" +
    "\030\075\031\170\001\002\000\024\005\uff96\015\246\016" +
    "\244\017\247\020\245\031\uff96\036\uff96\043\uff96\052\u0111" +
    "\001\002\000\012\005\uff98\031\uff98\036\uff98\043\uff98\001" +
    "\002\000\004\005\027\001\002\000\004\034\u011a\001\002" +
    "\000\004\035\u011b\001\002\000\032\005\175\012\173\013" +
    "\172\014\200\017\203\020\167\021\177\026\074\027\076" +
    "\030\075\031\170\043\u011f\001\002\000\016\015\246\016" +
    "\244\017\247\020\245\034\uff94\036\uff94\001\002\000\006" +
    "\034\u0127\036\u012b\001\002\000\006\034\uff93\036\uff93\001" +
    "\002\000\004\031\u0120\001\002\000\004\005\u0121\001\002" +
    "\000\004\101\u0122\001\002\000\010\005\267\031\272\035" +
    "\271\001\002\000\012\020\274\023\275\032\u0124\045\277" +
    "\001\002\000\004\035\u0125\001\002\000\032\005\175\012" +
    "\173\013\172\014\200\017\203\020\167\021\177\026\074" +
    "\027\076\030\075\031\170\043\u011f\001\002\000\006\034" +
    "\u0127\036\u0128\001\002\000\032\005\175\012\173\013\172" +
    "\014\200\017\203\020\167\021\177\026\074\027\076\030" +
    "\075\031\170\043\u011f\001\002\000\006\034\uff90\036\uff90" +
    "\001\002\000\016\015\246\016\244\017\247\020\245\034" +
    "\uff92\036\uff92\001\002\000\006\034\uff91\036\uff91\001\002" +
    "\000\004\032\u012c\001\002\000\012\036\uffc8\041\uffc8\101" +
    "\uffc8\103\uffc8\001\002\000\004\101\u012e\001\002\000\004" +
    "\005\027\001\002\000\044\005\027\054\044\064\uffbc\065" +
    "\042\066\045\067\062\070\040\071\054\072\041\073\043" +
    "\074\047\075\060\076\063\077\046\100\057\102\052\104" +
    "\037\001\002\000\012\036\uffcf\041\uffcf\101\uffcf\103\uffcf" +
    "\001\002\000\006\023\351\035\uff8a\001\002\000\006\032" +
    "\ufffd\034\ufffd\001\002\000\004\005\027\001\002\000\010" +
    "\002\uff86\005\027\042\uff86\001\002\000\006\002\uff85\042" +
    "\u0141\001\002\000\010\002\uff88\005\uff88\042\uff88\001\002" +
    "\000\004\033\u0138\001\002\000\004\005\u0139\001\002\000" +
    "\004\046\u013a\001\002\000\006\005\017\047\uff6d\001\002" +
    "\000\004\047\u013c\001\002\000\004\031\u013d\001\002\000" +
    "\004\005\027\001\002\000\006\032\u013f\034\032\001\002" +
    "\000\010\002\uff89\005\uff89\042\uff89\001\002\000\004\002" +
    "\000\001\002\000\004\042\u0142\001\002\000\004\005\027" +
    "\001\002\000\006\002\uff84\005\027\001\002\000\006\002" +
    "\ufffc\005\ufffc\001\002\000\006\002\ufffb\005\ufffb\001\002" +
    "\000\010\002\uff87\005\uff87\042\uff87\001\002\000\020\007" +
    "\uffe7\010\uffe7\011\uffe7\036\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\001\002\000\030\005\175\012\173\013\172\014\200\017" +
    "\203\020\167\021\177\026\074\027\076\030\075\031\170" +
    "\001\002\000\020\007\uffe4\010\uffe4\011\uffe4\036\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\001\002\000\020\007\uffe6\010\uffe6" +
    "\011\uffe6\036\uffe6\042\uffe6\043\uffe6\044\uffe6\001\002\000" +
    "\004\005\u0170\001\002\000\004\005\u016e\001\002\000\020" +
    "\007\uffe5\010\uffe5\011\uffe5\036\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\001\002\000\020\007\uffe8\010\uffe8\011\uffe8\036\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\001\002\000\020\007\uffe9\010" +
    "\uffe9\011\uffe9\036\uffe9\042\uffe9\043\uffe9\044\uffe9\001\002" +
    "\000\004\031\u0166\001\002\000\004\005\u0152\001\002\000" +
    "\006\031\uffdd\046\110\001\002\000\004\031\u0154\001\002" +
    "\000\006\005\017\032\uff6d\001\002\000\004\032\u0156\001" +
    "\002\000\026\005\uffd7\007\uffd7\010\uffd7\011\uffd7\035\uffd7" +
    "\036\uffd7\042\uffd7\043\uffd7\044\uffd7\046\uffd7\001\002\000" +
    "\026\005\u0158\007\uffdf\010\uffdf\011\uffdf\035\u015a\036\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\046\u015b\001\002\000\026\005" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\035\uffd6\036\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\046\uffd6\001\002\000\020\007\uffdb\010" +
    "\uffdb\011\uffdb\036\uffdb\042\uffdb\043\uffdb\044\uffdb\001\002" +
    "\000\012\026\074\027\076\030\075\036\uffe1\001\002\000" +
    "\006\005\017\047\uff6d\001\002\000\004\047\u015d\001\002" +
    "\000\004\105\u015e\001\002\000\004\005\u015f\001\002\000" +
    "\026\005\uffd5\007\uffd5\010\uffd5\011\uffd5\035\uffd5\036\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\046\uffd5\001\002\000\006\034" +
    "\u0164\036\uffe0\001\002\000\004\036\u0163\001\002\000\006" +
    "\034\uffe3\036\uffe3\001\002\000\020\007\uffde\010\uffde\011" +
    "\uffde\036\uffde\042\uffde\043\uffde\044\uffde\001\002\000\010" +
    "\026\074\027\076\030\075\001\002\000\006\034\uffe2\036" +
    "\uffe2\001\002\000\004\005\u0167\001\002\000\004\101\u0168" +
    "\001\002\000\010\005\267\031\272\035\271\001\002\000" +
    "\012\020\274\023\275\032\u016a\045\277\001\002\000\004" +
    "\035\u016b\001\002\000\016\007\uffea\010\uffea\011\uffea\036" +
    "\uffea\043\uffea\044\uffea\001\002\000\016\007\u0151\010\u014b" +
    "\011\u0148\036\u016d\043\u0150\044\u014c\001\002\000\020\007" +
    "\uffec\010\uffec\011\uffec\036\uffec\042\uffec\043\uffec\044\uffec" +
    "\001\002\000\010\005\267\031\272\035\271\001\002\000" +
    "\026\007\ufff3\010\ufff3\011\ufff3\020\274\023\275\036\ufff3" +
    "\042\ufff3\043\ufff3\044\ufff3\045\277\001\002\000\006\031" +
    "\uffdd\046\110\001\002\000\004\031\u0172\001\002\000\006" +
    "\005\017\032\uff6d\001\002\000\004\032\u0174\001\002\000" +
    "\004\033\u0175\001\002\000\030\005\175\012\173\013\172" +
    "\014\200\017\203\020\167\021\177\026\074\027\076\030" +
    "\075\031\170\001\002\000\036\005\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\015\246\016\244\017\247\020\245\035\uffd7\036" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\046\uffd7\001\002\000\026" +
    "\005\u0158\007\uffdf\010\uffdf\011\uffdf\035\u015a\036\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\046\u015b\001\002\000\020\007\uffda" +
    "\010\uffda\011\uffda\036\uffda\042\uffda\043\uffda\044\uffda\001" +
    "\002\000\014\006\u017a\015\246\016\244\017\247\020\245" +
    "\001\002\000\030\005\175\012\173\013\172\014\200\017" +
    "\203\020\167\021\177\026\074\027\076\030\075\031\170" +
    "\001\002\000\030\007\uffd9\010\uffd9\011\uffd9\015\246\016" +
    "\244\017\247\020\245\036\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017a\000\010\003\003\016\005\017\004\001\001\000" +
    "\002\001\001\000\016\014\u014c\015\u014d\020\u014e\025\u0146" +
    "\026\u0149\027\u0148\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\010\001\001\000\004\066\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\077\017\100\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\067\025\001\001\000\006" +
    "\005\027\006\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\u0131" +
    "\001\001\000\004\070\034\001\001\000\006\011\u0130\030" +
    "\351\001\001\000\002\001\001\000\020\005\055\032\052" +
    "\034\063\035\050\036\060\037\054\102\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u012c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\055\032\131\033" +
    "\132\034\063\035\050\036\060\037\054\102\047\001\001" +
    "\000\002\001\001\000\004\005\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\100\101\102\001\001\000\002\001\001" +
    "\000\004\024\106\001\001\000\002\001\001\000\004\030" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\100\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\113\001\001\000\002\001\001" +
    "\000\004\005\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\055\032\121\034\063" +
    "\035\050\036\060\037\054\102\047\001\001\000\002\001" +
    "\001\000\020\005\055\032\123\034\063\035\050\036\060" +
    "\037\054\102\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\126\001\001\000\020\005\055\032\127" +
    "\034\063\035\050\036\060\037\054\102\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\055\032\135\034\063\035\050\036" +
    "\060\037\054\102\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\143\001\001" +
    "\000\004\047\145\001\001\000\020\040\151\041\150\042" +
    "\153\043\160\044\163\045\155\046\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\203\012\170\030\200\074\173\075\201\076" +
    "\355\001\001\000\002\001\001\000\016\010\203\012\170" +
    "\030\200\074\173\075\201\076\353\001\001\000\020\010" +
    "\203\012\170\030\200\056\337\074\173\075\201\076\336" +
    "\001\001\000\002\001\001\000\016\010\203\012\170\030" +
    "\200\074\173\075\201\076\331\001\001\000\016\010\203" +
    "\012\170\030\200\074\173\075\201\076\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\203\012\170" +
    "\030\200\074\173\075\201\076\175\001\001\000\002\001" +
    "\001\000\016\010\203\012\170\030\200\074\173\075\201" +
    "\076\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\106\001\001" +
    "\000\004\051\255\001\001\000\016\010\203\012\170\030" +
    "\200\074\173\075\201\076\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\210\001\001\000\004\010\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\077\214" +
    "\100\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\217\001\001\000\002\001\001\000\004\010\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\224\001\001\000\002\001\001\000\004\010\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\231\001" +
    "\001\000\002\001\001\000\004\010\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\236\001\001\000" +
    "\002\001\001\000\004\010\240\001\001\000\002\001\001" +
    "\000\016\010\203\012\170\030\200\074\173\075\201\076" +
    "\242\001\001\000\002\001\001\000\016\010\203\012\170" +
    "\030\200\074\173\075\201\076\252\001\001\000\016\010" +
    "\203\012\170\030\200\074\173\075\201\076\251\001\001" +
    "\000\016\010\203\012\170\030\200\074\173\075\201\076" +
    "\250\001\001\000\016\010\203\012\170\030\200\074\173" +
    "\075\201\076\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\042\257\043\160\044\163\045\155\046\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\203\012\170\030\200\074" +
    "\173\075\201\076\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\077\302\100\020" +
    "\001\001\000\004\013\272\001\001\000\002\001\001\000" +
    "\004\013\301\001\001\000\004\013\300\001\001\000\002" +
    "\001\001\000\004\013\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\077\306\100\020\001" +
    "\001\000\002\001\001\000\016\010\203\012\170\030\200" +
    "\074\173\075\201\076\310\001\001\000\002\001\001\000" +
    "\006\077\312\100\020\001\001\000\002\001\001\000\016" +
    "\010\203\012\170\030\200\074\173\075\201\076\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\203" +
    "\012\170\030\200\074\173\075\201\076\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\203\012\170" +
    "\030\200\074\173\075\201\076\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\326\001\001\000\016" +
    "\041\330\042\153\043\160\044\163\045\155\046\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\333\001\001\000\010\044\335\045\155\046" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\342\001\001\000" +
    "\014\042\343\043\160\044\163\045\155\046\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\203\011\346\012\170\030\345\074\173\075\201" +
    "\076\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\352\030\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\357\001\001\000\006\045\361\046\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\030\363\057\367\060\366\061\364\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u0108\001" +
    "\001\000\010\030\363\057\u0102\061\u0100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\374\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\030\363\057\367\060\377\061\364\001" +
    "\001\000\010\030\363\057\u0102\061\u0100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\u0104\001\001\000\002\001\001\000\004\046\u0107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\077\u010a\100\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\203\012\170\030" +
    "\200\074\173\075\201\076\u010e\001\001\000\004\062\u010f" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\077" +
    "\u0112\100\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\203\012\170\030\200\074\173\075\201\076" +
    "\u0115\001\001\000\004\062\u0116\001\001\000\002\001\001" +
    "\000\004\005\u0118\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\203\012\170\030\200\063\u011c\064\u011d" +
    "\074\173\075\201\076\u011b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\203\012\170" +
    "\030\200\063\u0125\064\u011d\074\173\075\201\076\u011b\001" +
    "\001\000\002\001\001\000\020\010\203\012\170\030\200" +
    "\064\u0129\074\173\075\201\076\u0128\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u012e\001" +
    "\001\000\020\005\055\032\u012f\034\063\035\050\036\060" +
    "\037\054\102\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\u0136\071\u0135\072\u0133" +
    "\073\u0134\001\001\000\006\005\u0136\071\u0145\001\001\000" +
    "\004\004\u013f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\077\u013a\100" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\027\006\u013d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\u0143" +
    "\007\u0142\001\001\000\004\005\u0144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\203\012\170\030\200\074\173\075\201\076" +
    "\u0178\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u0152\001\001\000\002\001\001\000\006\077" +
    "\u0154\100\020\001\001\000\002\001\001\000\004\031\u0156" +
    "\001\001\000\004\023\u0158\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\u0161\021\u015f\022\u0160\001\001" +
    "\000\006\077\u015b\100\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u0168\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\u016b\001\001" +
    "\000\016\014\u014c\015\u014d\020\u014e\025\u0146\026\u0149\027" +
    "\u0148\001\001\000\002\001\001\000\004\013\u016e\001\001" +
    "\000\002\001\001\000\004\024\u0170\001\001\000\002\001" +
    "\001\000\006\077\u0172\100\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\203\012\170\030\200\074" +
    "\173\075\201\076\u0175\001\001\000\004\031\u0176\001\001" +
    "\000\004\023\u0177\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\203\012\170\030\200\074\173\075\201" +
    "\076\u017a\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    static TVPLex scanner;
    static String entry;
    static CPreProcessorStream stream;

    public void report_error(String message, Object info) {
		Logger.println(message + " in line " + stream.getLine(scanner.line_count) + 
				" of file " + stream.getFile(scanner.line_count));
    }

    public static String configure(String filename, String path) 
					throws Exception {
		String infileName = filename;
		if (!infileName.endsWith(".tvp"))
			infileName = infileName + ".tvp";
		stream = new CPreProcessorStream(infileName);
		AddMacrosToPreProcessor.add(stream);

		stream.setSearchPath(path);
		scanner = new TVPLex(new InputStreamReader(stream));
		new parser(scanner).parse();
	
		// do cleanups
		scanner = null;
		stream = null;
	
		return entry;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	/* Used for rules related to transform_primitive_expression */
	FormulaAST precondFormula;
	FormulaAST haltFormula;
	List messages;
	FormulaAST newFormula;
	FormulaAST cloneFormula;
	List updates;
	FormulaAST retainFormula;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // optional_id_list ::= id_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(61/*optional_id_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // optional_id_list ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(61/*optional_id_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // id_list ::= id_list COMMA ID 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = list; RESULT.add(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*id_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // id_list ::= ID 
            {
              List RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*id_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // formula ::= kleene 
            {
              FormulaAST RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Kleene k = (Kleene)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ValueFormulaAST(k); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // formula ::= predicate PLUS LP var COMMA var RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Var v1 = new Var("__v1"); 
		   Var v2 = new Var("__v2"); 
		   RESULT = new TCFormulaAST(l, r, v1, v2, 
					     new PredicateFormulaAST(p, v1, v2));
		
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // formula ::= predicate STAR LP var COMMA var RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Var v1 = new Var("__v1"); 
		   Var v2 = new Var("__v2"); 
		   RESULT = new CompositeFormulaAST(new EqualityAST(l, r),
					       new TCFormulaAST(l, r, v1, v2, 
							     new PredicateFormulaAST(p, v1, v2)),
					       "OrFormula");
		
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // formula ::= predicate LP optional_id_list RP 
            {
              FormulaAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PredicateFormulaAST(p, VarAST.asVariables(args)); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // formula ::= var NEQ var 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT  = new CompositeFormulaAST(new EqualityAST(l, r)); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // formula ::= var EQ var 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT  = new EqualityAST(l, r); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // formula ::= LP formula RP 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // formula ::= LP formula QMARK formula COLON formula RP 
            {
              FormulaAST RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FormulaAST fc = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FormulaAST ft = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormulaAST ff = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfFormulaAST(fc, ft, ff); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // formula ::= NOT formula 
            {
              FormulaAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // formula ::= formula IFF formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "EquivalenceFormula"); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // formula ::= formula IMPLIES formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f2, new CompositeFormulaAST(f1), "OrFormula"); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // formula ::= formula OR formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "OrFormula"); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // formula ::= formula AND formula 
            {
              FormulaAST RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormulaAST f1 = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FormulaAST f2 = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CompositeFormulaAST(f1, f2, "AndFormula"); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // formula ::= TC LP var COMMA var RP LP var COMMA var RP formula 
            {
              FormulaAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Var r = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Var sl = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int srleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var sr = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TCFormulaAST(l, r, sl, sr, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // formula ::= combine 
            {
              FormulaAST RESULT = null;
		int combleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int combright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CombineAST comb = (CombineAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = comb; 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // formula ::= EXISTS LP optional_id_list RP formula 
            {
              FormulaAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new QuantFormulaAST(VarAST.asVariables(list), f, "ExistQuantFormula"); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // formula ::= FORALL LP optional_id_list RP formula 
            {
              FormulaAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new QuantFormulaAST(VarAST.asVariables(list), f, "AllQuantFormula"); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*formula*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // combine ::= binary_op COMBINE LCBR formula COLON ID IN set_expr RCBR 
            {
              CombineAST RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CombineAST(op, f, id, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(59/*combine*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // binary_op ::= AND 
            {
              String RESULT = null;
		 RESULT = "AndFormula"; 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*binary_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // binary_op ::= OR 
            {
              String RESULT = null;
		 RESULT = "OrFormula"; 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*binary_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // to_print ::= PERCENT PERCENT symbol_list2 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List p = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		// Check that all symbols have been (implicitely) declared by equations 
		for (Iterator i = p.iterator(); i.hasNext(); ){
			Symbol id = (Symbol)i.next();
			if (! EquationGraph.instance.graph.vertexSet().contains(id)){
				throw new tvla.exceptions.UserErrorException("TVP file: node " + id + " is specified as to be printed, but it does not appear in any equation");
			}
		}
		EquationGraph.instance.toPrint = p;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*to_print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // to_print ::= 
            {
              Object RESULT = null;
		
		EquationGraph.instance.toPrint = new ArrayList(EquationGraph.instance.graph.vertexSet());
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*to_print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // equation_system ::= equations 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	EquationGraph.instance = new EquationGraph();
	for (Iterator i=list.iterator(); i.hasNext(); ){
		EquationAST eqnAST = (EquationAST)i.next();
		Equation eqn = eqnAST.getEquation();
		EquationGraph.instance.addEquation(eqn);
	}
	
              CUP$parser$result = new java_cup.runtime.Symbol(57/*equation_system*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // equations ::= equations equation 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eqnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eqnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		EquationAST eqn = (EquationAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=list; list.add(eqn); 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*equations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // equations ::= equation 
            {
              List RESULT = null;
		int eqnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eqnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		EquationAST eqn = (EquationAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(eqn); 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*equations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // equation ::= symbol ASSIGN ID LBR optional_id_list RBR LP symbol_list RP 
            {
              EquationAST RESULT = null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Symbol node = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List nodes = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new EquationAST(node, FunctionMacroAST.get(name).expand(args), nodes); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*equation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // title ::= TITLE message 
            {
              MessageAST RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		MessageAST str = (MessageAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = str; 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*title*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // title ::= 
            {
              MessageAST RESULT = null;
		 RESULT = new MessageStringAST(""); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*title*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // macro_def ::= LP symbol_list RP title LCBR expression RCBR 
            {
              FunctionDefAST RESULT = null;
		int symbolsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int symbolsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List symbols = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		MessageAST m = (MessageAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionAST e = (ExpressionAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionDefAST(m,symbols,e); 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*macro_def*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // macro ::= FUNCTION ID LBR optional_id_list RBR macro_def 
            {
              FunctionMacroAST RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FunctionDefAST def = (FunctionDefAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionMacroAST(name, args, def); 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*macro*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // macros ::= macros macro 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FunctionMacroAST single = (FunctionMacroAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; RESULT.add(single); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*macros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // macros ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*macros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // focus_foreach ::= FOREACH LP ID IN set_expr RP LCBR focus_formulae RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*focus_foreach*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // focus_formulae ::= focus_formulae COMMA focus_foreach 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ForeachAST fe = (ForeachAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = prev; RESULT.add(fe); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // focus_formulae ::= focus_formulae COMMA formula 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = prev; RESULT.add(f); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // focus_formulae ::= focus_foreach 
            {
              List RESULT = null;
		int feleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ForeachAST fe = (ForeachAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(fe); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // focus_formulae ::= formula 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(f); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*focus_formulae*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // optional_auto ::= AUTO 
            {
              Boolean RESULT = null;
		 RESULT = Boolean.TRUE; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*optional_auto*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // optional_auto ::= 
            {
              Boolean RESULT = null;
		 RESULT = Boolean.FALSE; 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*optional_auto*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // asgn ::= LP predicate LP optional_id_list RP RP ASSIGN formula optional_auto 
            {
              UpdateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UpdateAST(p, f, VarAST.asVariables(args), a.booleanValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*asgn*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // asgn ::= predicate LP optional_id_list RP ASSIGN formula optional_auto 
            {
              UpdateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UpdateAST(p, f, VarAST.asVariables(args), a.booleanValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*asgn*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // asgns ::= asgns asgn_foreach 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ForeachAST a = (ForeachAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = prev; RESULT.add(a); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*asgns*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // asgns ::= asgns asgn 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UpdateAST a = (UpdateAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = prev; RESULT.add(a); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*asgns*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // asgns ::= asgn_foreach 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ForeachAST a = (ForeachAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(a); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*asgns*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // asgns ::= asgn 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UpdateAST a = (UpdateAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(a); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*asgns*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // asgn_foreach ::= FOREACH LP ID IN set_expr RP LCBR asgns RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*asgn_foreach*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // optional_retain ::= RP 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*optional_retain*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // optional_retain ::= RETAIN_COLON formula RP 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 retainFormula = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*optional_retain*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // next_updates ::= RP 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*next_updates*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // next_updates ::= COMMA optional_retain 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*next_updates*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // optional_updates ::= optional_retain 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*optional_updates*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // optional_updates ::= UPDATE_COLON LCBR asgns RCBR next_updates 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 updates = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*optional_updates*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // next_clone ::= RP 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*next_clone*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // next_clone ::= COMMA optional_updates 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*next_clone*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // optional_clone ::= optional_updates 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*optional_clone*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // optional_clone ::= CLONE_COLON formula next_clone 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 cloneFormula = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*optional_clone*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // next_new ::= RP 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*next_new*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // next_new ::= COMMA optional_clone 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*next_new*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // optional_new ::= optional_clone 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*optional_new*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // optional_new ::= NEW_COLON formula next_new 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 newFormula = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*optional_new*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // report_message ::= formula IMPLIES message 
            {
              ReportMessageAST RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		MessageAST m = (MessageAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new ReportMessageAST(f, m); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*report_message*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // next_message ::= RP 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*next_message*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // next_message ::= COMMA optional_message 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*next_message*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // optional_message ::= optional_new 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*optional_message*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // optional_message ::= MESSAGE_COLON report_message next_message 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReportMessageAST m = (ReportMessageAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 messages.add(m); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*optional_message*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // next_halt ::= RP 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*next_halt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // next_halt ::= COMMA optional_message 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*next_halt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // optional_halt ::= optional_message 
            {
              Object RESULT = null;
		RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*optional_halt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // optional_halt ::= HALT_COLON formula next_halt 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 haltFormula = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*optional_halt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // next_precond ::= RP 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*next_precond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // next_precond ::= COMMA optional_halt 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*next_precond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // optional_precond ::= optional_halt 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*optional_precond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // optional_precond ::= PRECOND_COLON formula next_precond 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 precondFormula = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*optional_precond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // next_transform_primitive ::= RP 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*next_transform_primitive*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // next_transform_primitive ::= COMMA optional_precond 
            {
              Object RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*next_transform_primitive*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // transform_primitive_expression ::= NT$0 TRANSFORM LP symbol next_transform_primitive 
            {
              TransformPrimitiveExpressionAST RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (TransformPrimitiveExpressionAST) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TransformPrimitiveExpressionAST(id,precondFormula,haltFormula,messages,newFormula,cloneFormula,updates,retainFormula); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*transform_primitive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$0 ::= 
            {
              Object RESULT = null;
	precondFormula = null;
	   	haltFormula = null;
		messages = new ArrayList();
		newFormula = null;
		cloneFormula = null;
		updates = null;
		retainFormula = null;
	
              CUP$parser$result = new java_cup.runtime.Symbol(64/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binary_primitive_name ::= DIFF_UNDER 
            {
              Integer RESULT = null;
		 RESULT = new Integer(BinaryPrimitiveExpression.DIFF_UNDER); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*binary_primitive_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binary_primitive_name ::= DIFF_OVER 
            {
              Integer RESULT = null;
		 RESULT = new Integer(BinaryPrimitiveExpression.DIFF_OVER); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*binary_primitive_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binary_primitive_name ::= JOINWITH 
            {
              Integer RESULT = null;
		 RESULT = new Integer(BinaryPrimitiveExpression.JOINWITH); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*binary_primitive_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // binary_primitive_name ::= MEETWITH 
            {
              Integer RESULT = null;
		 RESULT = new Integer(BinaryPrimitiveExpression.MEETWITH); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*binary_primitive_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unary_primitive_name ::= COERCE 
            {
              Integer RESULT = null;
		 RESULT = new Integer(UnaryPrimitiveExpression.COERCE); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*unary_primitive_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unary_primitive_name ::= EMBEDBLUR 
            {
              Integer RESULT = null;
		 RESULT = new Integer(UnaryPrimitiveExpression.EMBEDBLUR); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*unary_primitive_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unary_primitive_name ::= JOIN 
            {
              Integer RESULT = null;
		 RESULT = new Integer(UnaryPrimitiveExpression.JOIN); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*unary_primitive_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unary_primitive_name ::= BLUR 
            {
              Integer RESULT = null;
		 RESULT = new Integer(UnaryPrimitiveExpression.BLUR); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*unary_primitive_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unary_primitive_name ::= COPY 
            {
              Integer RESULT = null;
		 RESULT = new Integer(UnaryPrimitiveExpression.COPY); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*unary_primitive_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // primitive_expression ::= transform_primitive_expression 
            {
              ExpressionAST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TransformPrimitiveExpressionAST e = (TransformPrimitiveExpressionAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*primitive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // primitive_expression ::= PREFAB LP symbol COMMA STRING COMMA STRING COMMA kleene COMMA new_predicate_list RP 
            {
              ExpressionAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int prefabTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int prefabTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String prefabType = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int overUnderleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int overUnderright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String overUnder = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int truthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int truthright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Kleene truth = (Kleene)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PrefabExpressionAST(id, prefabType, overUnder, truth, args); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*primitive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // primitive_expression ::= FOCUS LP symbol COMMA LCBR focus_formulae RCBR RP 
            {
              ExpressionAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FocusPrimitiveExpressionAST(id, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*primitive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // primitive_expression ::= binary_primitive_name LP symbol COMMA symbol RP 
            {
              ExpressionAST RESULT = null;
		int idnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer idname = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbol id1 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol id2 = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BinaryPrimitiveExpressionAST(idname.intValue(),id1,id2); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*primitive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // primitive_expression ::= unary_primitive_name LP symbol RP 
            {
              ExpressionAST RESULT = null;
		int idnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer idname = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnaryPrimitiveExpressionAST(idname.intValue(),id); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*primitive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // new_predicate_list ::= new_predicate_list COMMA predicate 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int predleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PredicateAST pred = (PredicateAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = list; RESULT.add(pred); 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*new_predicate_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // new_predicate_list ::= predicate 
            {
              List RESULT = null;
		int predleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PredicateAST pred = (PredicateAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new ArrayList(); RESULT.add(pred); 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*new_predicate_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression_list ::= expression_list SEMICOLON expression 
            {
              List RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List el = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionAST e = (ExpressionAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 el.add(e); RESULT = el; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*expression_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression_list ::= expression 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionAST e = (ExpressionAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*expression_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= JOINFOREACH symbol IN symbol expression 
            {
              ExpressionAST RESULT = null;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbol iter = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int inputSetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inputSetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol inputSet = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionAST e = (ExpressionAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForEachStructureExpressionAST(ForEachStructureExpressionAST.JOIN, inputSet, iter, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= MEETFOREACH symbol IN symbol expression 
            {
              ExpressionAST RESULT = null;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbol iter = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int inputSetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inputSetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol inputSet = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionAST e = (ExpressionAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForEachStructureExpressionAST(ForEachStructureExpressionAST.MEET, inputSet, iter, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= symbol 
            {
              ExpressionAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new VarExpressionAST(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= primitive_expression 
            {
              ExpressionAST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionAST e = (ExpressionAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= BEGIN expression_list END 
            {
              ExpressionAST RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List el = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SeqExpressionAST(el); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= LET symbol ASSIGN expression IN expression 
            {
              ExpressionAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionAST e1 = (ExpressionAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionAST e2 = (ExpressionAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LetExpressionAST(id,e1,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // optional_dependency ::= optional_dependency LBR optional_id_list RBR ARROW ID 
            {
              PredicatePropertiesAST RESULT = null;
		int odleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List lhs = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String rhs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				RESULT = od;
				RESULT.addFunctionalDependency(lhs,rhs);
			
              CUP$parser$result = new java_cup.runtime.Symbol(23/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // optional_dependency ::= optional_dependency ID 
            {
              PredicatePropertiesAST RESULT = null;
		int odleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				RESULT = od;
				RESULT.addProperty(id); 
			
              CUP$parser$result = new java_cup.runtime.Symbol(23/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // optional_dependency ::= 
            {
              PredicatePropertiesAST RESULT = null;
		
				RESULT = new PredicatePropertiesAST();
			
              CUP$parser$result = new java_cup.runtime.Symbol(23/*optional_dependency*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // predicate ::= ID optional_params 
            {
              PredicateAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = PredicateAST.getPredicateAST(id, params); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cons_rule ::= CONSISTENCY_RULE formula IMPLIES_T formula 
            {
              ConstraintAST RESULT = null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormulaAST body = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FormulaAST head = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ConstraintAST(body, head); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*cons_rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instrum_pred_def ::= INS_PRED ID optional_params LP optional_id_list RP ASSIGN formula optional_dependency show_attr 
            {
              InstrumPredicateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormulaAST f = (FormulaAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int odleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				RESULT = new InstrumPredicateAST(p, params, 
								 VarAST.asVariables(args), 
								 f, od, attr);
				
              CUP$parser$result = new java_cup.runtime.Symbol(20/*instrum_pred_def*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // core_pred_def ::= PRED ID optional_params LP optional_id_list RP optional_dependency show_attr 
            {
              CorePredicateAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int odleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PredicatePropertiesAST od = (PredicatePropertiesAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				RESULT = new CorePredicateAST(p, params, args, args.size(), od, attr);
				
              CUP$parser$result = new java_cup.runtime.Symbol(19/*core_pred_def*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // optional_params ::= LBR id_list RBR 
            {
              List RESULT = null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = params; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*optional_params*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // optional_params ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*optional_params*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // show_attr ::= LCBR optional_show_attr_list RCBR 
            {
              Set RESULT = null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Set attr = (Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = attr; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*show_attr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // show_attr ::= 
            {
              Set RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*show_attr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optional_show_attr_list ::= show_attr_list 
            {
              Set RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Set l = (Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*optional_show_attr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // optional_show_attr_list ::= 
            {
              Set RESULT = null;
		 RESULT = new HashSet(); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*optional_show_attr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // show_attr_list ::= show_attr_list COMMA kleene 
            {
              Set RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Set list = (Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Kleene a = (Kleene)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; RESULT.add(a); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*show_attr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // show_attr_list ::= kleene 
            {
              Set RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Kleene a = (Kleene)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new HashSet(); RESULT.add(a); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*show_attr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // decl ::= cons_rule 
            {
              AST RESULT = null;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ConstraintAST cons = (ConstraintAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = cons; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // decl ::= set_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SetDefAST def = (SetDefAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = def; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decl ::= instrum_pred_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		InstrumPredicateAST def = (InstrumPredicateAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = def; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decl ::= core_pred_def 
            {
              AST RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CorePredicateAST def = (CorePredicateAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = def; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decls ::= decls decl_foreach 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ForeachAST f = (ForeachAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; RESULT.add(f); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*decls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decls ::= decls decl 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AST single = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; RESULT.add(single); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*decls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decls ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*decls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decls_done ::= decls 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		 for (Iterator i = list.iterator(); i.hasNext(); ) {
		     AST ast = (AST) i.next();
		     if (ast instanceof ForeachAST) {
			ForeachAST foreach = (ForeachAST) ast;
			for (Iterator j = foreach.evaluate().iterator(); j.hasNext(); ) {
			   AST generatedAst = (AST) j.next();
			   generatedAst.generate();
			}
		     } else {
			ast.generate();
		     }
		 }
		 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*decls_done*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // decl_foreach ::= FOREACH LP ID IN set_expr RP LCBR decls RCBR 
            {
              ForeachAST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SetAST e = (SetAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ForeachAST(id, e, a); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*decl_foreach*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // set_expr ::= LP set_expr RP 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*set_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // set_expr ::= set_expr AND set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SetAndAST(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*set_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // set_expr ::= set_expr MINUS set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SetMinusAST(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*set_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // set_expr ::= set_expr PLUS set_expr 
            {
              SetAST RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SetAST e1 = (SetAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SetAST e2 = (SetAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SetPlusAST(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*set_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // set_expr ::= LCBR optional_id_list RCBR 
            {
              SetAST RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SetConstantAST(list); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*set_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // set_expr ::= ID 
            {
              SetAST RESULT = null;
		int setleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String set = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SetUseAST(set); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*set_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // set_def ::= SET ID set_expr 
            {
              SetDefAST RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SetAST elements = (SetAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SetDefAST(name, new ArrayList(elements.getMembers())) ; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*set_def*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // kleene ::= UNKNOWN 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.unknownKleene; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*kleene*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // kleene ::= FALSE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.falseKleene; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*kleene*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // kleene ::= TRUE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.trueKleene; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*kleene*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // message ::= message PLUS message 
            {
              MessageAST RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MessageAST l = (MessageAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		MessageAST r = (MessageAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new MessageCompositeAST(l, r); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*message*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // message ::= predicate 
            {
              MessageAST RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PredicateAST p = (PredicateAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new MessagePredicateAST(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*message*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // message ::= STRING 
            {
              MessageAST RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new MessageStringAST(str); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*message*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var ::= ID 
            {
              Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Var(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // symbol_list2 ::= symbol_list2 symbol 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=list; list.add(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*symbol_list2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // symbol_list2 ::= symbol 
            {
              List RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*symbol_list2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // symbol_list ::= symbol_list COMMA symbol 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=list; list.add(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*symbol_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // symbol_list ::= symbol 
            {
              List RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*symbol_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // symbol ::= ID 
            {
              Symbol RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Symbol.ofString(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*symbol*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // tvp ::= decls_done PERCENT PERCENT macros PERCENT PERCENT equation_system to_print 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*tvp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= tvp EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

