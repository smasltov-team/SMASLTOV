
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Nov 07 19:37:05 CST 2013
//----------------------------------------------------

package tvla.jeannet.language.TVS;

import tvla.core.*;
import tvla.language.*;
import tvla.logic.*;
import tvla.predicates.*;
import tvla.jeannet.util.Symbol;
import tvla.util.*;
import com.ibm.dk.dps.io.CPreProcessorStream;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Thu Nov 07 19:37:05 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\011\003\000\002\012" +
    "\003\000\002\012\004\000\002\013\010\000\002\003\002" +
    "\000\002\003\004\000\002\003\005\000\002\033\002\000" +
    "\002\014\005\000\002\015\006\000\002\015\007\000\002" +
    "\005\003\000\002\005\005\000\002\006\003\000\002\006" +
    "\005\000\002\017\003\000\002\020\003\000\002\020\004" +
    "\000\002\020\004\000\002\020\005\000\002\032\003\000" +
    "\002\032\003\000\002\016\007\000\002\027\002\000\002" +
    "\027\004\000\002\021\003\000\002\021\006\000\002\007" +
    "\003\000\002\007\005\000\002\034\002\000\002\026\010" +
    "\000\002\026\005\000\002\024\002\000\002\024\003\000" +
    "\002\025\003\000\002\025\005\000\002\023\004\000\002" +
    "\023\006\000\002\023\006\000\002\030\002\000\002\030" +
    "\004\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\004\002\000\002\004\004\000\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\004\026\007\001\002\000\006\002\000\026" +
    "\007\001\002\000\006\002\uffff\026\uffff\001\002\000\004" +
    "\002\116\001\002\000\006\005\010\006\011\001\002\000" +
    "\004\013\uffec\001\002\000\004\013\uffeb\001\002\000\004" +
    "\013\013\001\002\000\004\014\014\001\002\000\010\012" +
    "\ufffc\015\ufffc\020\ufffc\001\002\000\010\012\ufff9\015\021" +
    "\020\016\001\002\000\004\012\ufff9\001\002\000\010\012" +
    "\ufffb\015\ufffb\020\ufffb\001\002\000\004\012\023\001\002" +
    "\000\006\002\ufffd\026\ufffd\001\002\000\004\025\047\001" +
    "\002\000\004\013\024\001\002\000\004\014\025\001\002" +
    "\000\010\005\026\015\032\021\033\001\002\000\022\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\031\ufff0\001\002\000\020\015\ufff1\016\037\017\036\020" +
    "\ufff1\023\ufff1\024\ufff1\031\ufff1\001\002\000\010\015\ufff5" +
    "\020\ufff5\031\ufff5\001\002\000\006\015\044\020\043\001" +
    "\002\000\004\025\ufff7\001\002\000\006\005\026\021\033" +
    "\001\002\000\006\020\040\022\041\001\002\000\012\016" +
    "\037\017\036\020\ufff3\022\ufff3\001\002\000\022\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\022\uffee\023\uffee\024\uffee\031" +
    "\uffee\001\002\000\022\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\022\uffef\023\uffef\024\uffef\031\uffef\001\002\000\006\005" +
    "\026\021\033\001\002\000\022\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\022\uffed\023\uffed\024\uffed\031\uffed\001\002\000" +
    "\012\016\037\017\036\020\ufff2\022\ufff2\001\002\000\006" +
    "\005\026\021\033\001\002\000\004\025\ufff6\001\002\000" +
    "\010\015\ufff4\020\ufff4\031\ufff4\001\002\000\010\012\ufff8" +
    "\015\ufff8\020\ufff8\001\002\000\004\013\050\001\002\000" +
    "\004\014\051\001\002\000\006\005\uffe9\015\uffe9\001\002" +
    "\000\006\005\053\015\055\001\002\000\006\013\uffe7\021" +
    "\107\001\002\000\004\013\057\001\002\000\010\012\uffea" +
    "\015\uffea\020\uffea\001\002\000\006\005\uffe8\015\uffe8\001" +
    "\002\000\012\007\061\010\063\011\062\014\uffe3\001\002" +
    "\000\004\014\065\001\002\000\010\005\uffd7\015\uffd7\020" +
    "\uffd7\001\002\000\010\005\uffd5\015\uffd5\020\uffd5\001\002" +
    "\000\010\005\uffd6\015\uffd6\020\uffd6\001\002\000\006\005" +
    "\uffe1\015\uffe1\001\002\000\012\005\026\015\uffe0\021\033" +
    "\030\066\001\002\000\006\005\026\021\033\001\002\000" +
    "\006\015\uffde\020\uffde\001\002\000\012\015\uffd9\020\uffd9" +
    "\023\076\024\100\001\002\000\006\015\uffdf\020\074\001" +
    "\002\000\004\015\073\001\002\000\006\005\uffe2\015\uffe2" +
    "\001\002\000\010\005\026\021\033\030\066\001\002\000" +
    "\006\015\uffdd\020\uffdd\001\002\000\010\007\061\010\063" +
    "\011\062\001\002\000\006\015\uffdc\020\uffdc\001\002\000" +
    "\006\005\026\021\033\001\002\000\010\015\uffd9\020\uffd9" +
    "\023\076\001\002\000\006\015\uffdb\020\uffdb\001\002\000" +
    "\006\015\uffd8\020\uffd8\001\002\000\006\020\043\031\105" +
    "\001\002\000\010\015\uffd9\020\uffd9\023\076\001\002\000" +
    "\006\015\uffda\020\uffda\001\002\000\004\005\110\001\002" +
    "\000\006\020\uffe5\022\uffe5\001\002\000\006\020\112\022" +
    "\113\001\002\000\004\005\114\001\002\000\004\013\uffe6" +
    "\001\002\000\006\020\uffe4\022\uffe4\001\002\000\010\012" +
    "\ufffa\015\ufffa\020\ufffa\001\002\000\004\002\001\001\002" +
    "\000\006\002\ufffe\026\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\010\011\005\012\003\013\004\001\001\000" +
    "\004\013\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\014" +
    "\001\001\000\006\014\016\033\017\001\001\000\006\014" +
    "\114\033\017\001\001\000\002\001\001\000\004\015\021" +
    "\001\001\000\002\001\001\000\004\016\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\030\017\027" +
    "\020\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\033\020\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\044\020\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\051\001\001\000\006\021\053\026\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\063\034\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\067\020\026\023\066" +
    "\024\071\025\070\001\001\000\010\005\103\017\027\020" +
    "\026\001\001\000\002\001\001\000\004\030\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\067\020\026\023\074\001\001\000\002\001\001" +
    "\000\004\031\102\001\001\000\002\001\001\000\006\017" +
    "\100\020\026\001\001\000\004\030\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\105\001\001\000\002\001\001\000\004\007\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    static TVSLex scanner;
    static CPreProcessorStream stream;

    public void report_error(String message, Object info) {
	Logger.println(message + " in line " + stream.getLine(scanner.line_count) + 
			" of file " + stream.getFile(scanner.line_count));
    }
    
    /** Reads a list of locations from a TVS formatted input file.
     * @author Roman Manevich
     */
    public static List readLocations(String file) throws Exception {
		String infileName = file;
		if (!infileName.endsWith(".tvs")) {
			infileName = infileName + ".tvs";
		}
		stream = new CPreProcessorStream(infileName);
		AddMacrosToPreProcessor.add(stream);

		scanner = new TVSLex(new InputStreamReader(stream));
		tvla.jeannet.language.TVS.parser parser = new tvla.jeannet.language.TVS.parser(scanner);
		List answer = (List)parser.parse().value;

		// do cleanups
		scanner = null;
		stream = null;

		return answer;
    }	

    /** Reads a list of structures from a TVS formatted input file.
     * @author Tal Lev-Ami
     */
    public static List readStructures(String file) throws Exception {
		String infileName = file;
		if (!infileName.endsWith(".tvs")) {
			infileName = infileName + ".tvs";
		}
		stream = new CPreProcessorStream(infileName);
		AddMacrosToPreProcessor.add(stream);
		
		scanner = new TVSLex(new InputStreamReader(stream));
		tvla.jeannet.language.TVS.parser parser = new tvla.jeannet.language.TVS.parser(scanner);
		List answer = (List) parser.parse().value;

		// do cleanups
		scanner = null;
		stream = null;

		return answer;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    TVS structure;
    String predicateName;
    Predicate predicate;
    Map nodes;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // message ::= MESSAGE STRING 
            {
              String RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = str; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*message*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // messages ::= messages message 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int msgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int msgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String msg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = list; RESULT.add(msg); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*messages*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // messages ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*messages*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // val ::= UNKNOWN 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.unknownKleene; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*val*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // val ::= FALSE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.falseKleene; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*val*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // val ::= TRUE 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.trueKleene; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*val*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value ::= COLON val 
            {
              Kleene RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Kleene v = (Kleene)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // value ::= 
            {
              Kleene RESULT = null;
		 RESULT = Kleene.trueKleene; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // entry ::= LP node_list RP value 
            {
              Object RESULT = null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List nl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Kleene v = (Kleene)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		if (predicate == null) {
			predicate = Vocabulary.getPredicateByName(predicateName);
			if (predicate == null || predicate.arity() != nl.size())
				parser.report_fatal_error("Predicate " + predicateName + 
				" was used but not declared as a " + nl.size() + "-ary predicate", null);
		}
		List nodeList = new ArrayList();
		String nodeName;
		for(ListIterator li = nl.listIterator(); li.hasNext();) {
			nodeName = (String)li.next();
			Node currNode = (Node) nodes.get(nodeName);
			if (currNode != null) {
				nodeList.add(currNode);
			} 
			else {
				parser.report_fatal_error("Node " + nodeName + " was not declared.", null); 
			}
		}
		NodeTuple nodeTuple = NodeTuple.createTuple(nodeList);
		structure.update(predicate,nodeTuple,v);
	
              CUP$parser$result = new java_cup.runtime.Symbol(17/*entry*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // entry ::= node ARROW node value 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Kleene k = (Kleene)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 if (predicate == null) {
	    predicate = Vocabulary.getPredicateByName(predicateName);
	    if (predicate == null || predicate.arity() != 2)
			parser.report_fatal_error("Predicate " + predicateName + 
			" was used but not declared as a binary predicate", null);
	   } 
	   else if (predicate.arity() != 2) {
		parser.report_fatal_error("Using " + predicate.arity() + 
					  "-ary predicate with binary assignments", null);
	   }
	   Node left = (Node) nodes.get(l);
	   if (left == null)
		parser.report_fatal_error("Node " + l + " was not declared.", null); 
	   Node right = (Node) nodes.get(r);
	   if (right == null)
		parser.report_fatal_error("Node " + r + " was not declared.", null); 
	   structure.update(predicate, left, right, k);
	
              CUP$parser$result = new java_cup.runtime.Symbol(17/*entry*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // entry ::= node value 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Kleene k = (Kleene)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 if (predicate == null) {
	    predicate = Vocabulary.getPredicateByName(predicateName);
	    if (predicate == null || predicate.arity() != 1)
			parser.report_fatal_error("Predicate " + predicateName + 
			" was used but not declared as a unary predicate", null);
	   } 
	   else if (predicate.arity() != 1) {
		parser.report_fatal_error("Using " + predicate.arity() + 
					  "-ary predicate with unary assignments", null);
	   }
	   Node node = (Node) nodes.get(n);
	   if (node == null)
		parser.report_fatal_error("Node " + n + " was not declared.", null); 
	   structure.update(predicate, node, k);
	
              CUP$parser$result = new java_cup.runtime.Symbol(17/*entry*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // entry_list ::= entry_list COMMA entry 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*entry_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // entry_list ::= entry 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*entry_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // optional_entry_list ::= entry_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*optional_entry_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optional_entry_list ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*optional_entry_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pred_val ::= pred ASSIGN val 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Kleene k = (Kleene)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  Predicate nullaryPredicate = Vocabulary.getPredicateByName(p);
	    if (nullaryPredicate == null || nullaryPredicate.arity() != 0)
			parser.report_fatal_error("Predicate " + p + 
			" was used but not declared as a nullary predicate", null);
	    structure.update(nullaryPredicate, k); 
	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*pred_val*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // pred_val ::= pred ASSIGN NT$1 LCBR optional_entry_list RCBR 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 predicate = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*pred_val*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$1 ::= 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 predicateName = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // pred_list ::= pred_list COMMA ID 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = prev; RESULT.add(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*pred_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // pred_list ::= ID 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*pred_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // pred ::= ID LBR pred_list RBR 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = id + "[";
	     String sep = "";
	     for (Iterator i = list.iterator(); i.hasNext(); ) {
		String e = (String) i.next();
		RESULT = RESULT + sep + e;
		sep = ",";
	     }
	     RESULT = RESULT + "]";
	  
              CUP$parser$result = new java_cup.runtime.Symbol(15/*pred*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // pred ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = id; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*pred*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // pred_vals ::= pred_vals pred_val 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*pred_vals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pred_vals ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*pred_vals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // iota ::= PREDICATES ASSIGN LCBR pred_vals RCBR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*iota*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // symbol ::= STRING 
            {
              Symbol RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Symbol.ofString(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*symbol*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // symbol ::= ID 
            {
              Symbol RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Symbol.ofString(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*symbol*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // element ::= LBR element_list RBR 
            {
              String RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "[";
	     String sep = "";
	     for (Iterator i = list.iterator(); i.hasNext(); ) {
		String e = (String) i.next();
		RESULT = RESULT + sep + e;
		sep = ",";
	     }
	     RESULT = RESULT + "]";
	  
              CUP$parser$result = new java_cup.runtime.Symbol(14/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // element ::= element ZERO 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e + ".0"; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // element ::= element ONE 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e + ".1"; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // element ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = id; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // node ::= element 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // element_list ::= element_list COMMA element 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = prev; RESULT.add(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*element_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // element_list ::= element 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*element_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // node_list ::= node_list COMMA node 
            {
              List RESULT = null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List prev = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = prev; RESULT.add(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*node_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // node_list ::= node 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*node_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // nodes ::= NODES ASSIGN LCBR node_list RCBR 
            {
              Object RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		for (Iterator i = list.iterator(); i.hasNext(); ) {
			String e = (String)i.next();
			Node node = structure.newNode();
			nodes.put(e, node);
		}
	
              CUP$parser$result = new java_cup.runtime.Symbol(11/*nodes*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nodes ::= NODES ASSIGN LCBR RCBR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*nodes*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // structure ::= NT$0 nodes iota 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*structure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT = null;

			structure = TVSFactory.getInstance().makeEmptyTVS();
			nodes = new HashMap();
		
              CUP$parser$result = new java_cup.runtime.Symbol(25/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // structures ::= structures COMMA structure 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; RESULT.add(structure); structure = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*structures*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // structures ::= structures structure 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = list; RESULT.add(structure); structure = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*structures*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // structures ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*structures*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // location ::= LOCATION symbol ASSIGN LCBR structures RCBR 
            {
              Pair RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int storesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int storesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List stores = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 TVSSet set = TVSFactory.getInstance().makeEmptySet();
		   for (Iterator i = stores.iterator(); i.hasNext(); )
		       set.mergeWith( (HighLevelTVS)i.next() );
		   RESULT = new Pair(id,set);
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*location*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // locations ::= locations location 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pair loc = (Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(loc); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*locations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // locations ::= location 
            {
              List RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pair loc = (Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList();
		   RESULT.add(loc);
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*locations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // tvs ::= locations 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*tvs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= tvs EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List start_val = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

