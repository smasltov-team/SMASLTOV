# Specify true to see the exception stack-trace of thrown exceptions (useful mainly for debugging TVLA).
tvla.printExceptionStackTrace = true

# Use this file to override properties in tvla.properties.
# DOT attributes for thread nodes.
#tvla.dot.predicateAttributes.thd = shape=hexagon

# If true, a file with the .cpp.tvp suffix is written, containing the
# result of applying the C preprocessor to the input file.
tvla.dumpPreprocessedTvp = true

tvla.dumpPreprocessedTvs = false

# Determines the type of join method.
# Possible values are:
# rel  - structures are compared for isomorphism before joining them to a set.
# ind  - structures are merged, unless they differ by nullary abstraction predicate values.
# part - structures are merged if they differ only by non-abstraction predicate values.
# conc - structures are merged without any abstraction.
#  tvla.joinType = part_embedding
tvla.joinType = part

# Determines the part of the transition relation to print out:
# full          - The entire graph.
# reachMessages - The subgraph containing only states that
#                 can reach a state with an associated message.
# trace         - The shortest path a state with an associated
#                 message, i.e., an abstract error trace.
tvla.tr.project = trace

# If true, various constraints-related information is printed.
# tvla.coerce.debug = true
tvla.coerce.debug = false

#tvla.absRef.refine = true

# Log main steps of differencing in a file?
tvla.differencing.logging = false

# Send some flow information to the Logger?
tvla.differencing.debug = false

##################
# Log properties #
##################
# The name of the file to which log information is written.
# If the value is null then log information is written to the console.
tvla.log.logFileName = null

# If true, statistics specific to the chosen implementation is emitted.
tvla.log.implementationSpecificStatistics = false

# If true, the properties are added to the log output.
tvla.log.addPropertiesToLog = false

# If true, system properties are added to the log.
tvla.log.addSystemPropertiesToLog = true

# If true then statistical information about predicate tables
# is computed.
tvla.log.detailedPredicateStatistics = true

# If true, all the canonic names created by the analysis are stored
# in a set and their information is printed at the end of the analysis.
tvla.log.canonicNamesStatistics = false

# If true, all the canonic names created by the analysis are dumped.
tvla.log.dumpCanonicNames = false

# If true, then statistics will be emitted every k structures, where k
# is determined by the tvla.spaceStatistics.every property.
tvla.log.continuousStatisticsReports = false

#####################
# Engine properties #
#####################
# If true, an attempt to resolve the engine type is made by
# checking file extensions.
tvla.engine.autoResolveType = true

# Determines the type of engine used for analysis. Possible values are:
# tvla - TVLA-classic engine.
# tvmc - TVMC (Three-Valued Model Checker) Multithreading Analysis engine.
# ddfs - Enable double-DFS multithreading engine.
# pasta - Procedure transition sysytem
tvla.engine.type = tvla

# Determines the order of operations computed by an action.
# f - Focus, c - Coerce, p - Precondition, u - Update, b - Blur.
tvla.engine.actionOrder = fcpucb

# Causes the analysis to finish when Coerce finds a constraint breach
# after Update was applied.
tvla.engine.breakIfCoerceAfterUpdateFailed = false

# If true, structures with messages are not propagated
# on (but do appear in the output).
tvla.engine.freezeStructuresWithMessages = true

# Determines the type of join method.
# Possible values are:
# rel  - structures are compared for isomorphism before joining them to a set.
# ind  - structures are merged, unless they differ by nullary abstraction predicate values.
# part - structures are merged if they differ only by non-abstraction predicate values.
# conc - structures are merged without any abstraction.
# tvla.joinType = rel
# this was set more than once??

# Limits the number of structures. A negative value can be used to remove the limit.
# This is equivalent to the -ms command-line option.
tvla.engine.maxStructures = -1

# Limits the number of messages. A negative value can be used to remove the limit.
# This is equivalent to the -mm command-line option.
tvla.engine.maxMessages = -1

# Determines how often to dump intermediate structures.
tvla.engine.dumpEvery = -1

# How often the engine should attempt to do garbage-collection (#structures).
# Possible values are integers greater than 0.
tvla.engine.gcEvery = 10000

# How often the engine should print statistics (#structures).
# Possible values are integers greater than 0.
tvla.engine.statisticsEvery = 10000

# Determines how often state space statistics is conducted.
tvla.spaceStatistics.every = 10000

########################
# Decomposition Engine #
########################

# Enables/disables incremental transformers
tvla.decompose.incremental = true

######################
# Incremental Engine #
######################

# Enable incremental Coerce
tvla.engine.incremental.enable = false

# Check increment delta size and use heuristic to decide between incremental and full Coerce
tvla.engine.incremental.checkSize = true

# Calculate increment when new nodes were added to the structure
tvla.engine.incremental.incrementAddedNodes = false

# Randomly skip calculation of rarely changed constraint. This improves
# performance, but may lead to less precise results. Works well in practice, though.
tvla.engine.guessUnchangedConstraints = false

#########################################
# Transition Relation output properties #
#########################################

# Determines whether to produce a transition relation file at the end of the analysis.
tvla.tr.enabled = false

# Determines the part of the transition relation to print out:
# full          - The entire graph.
# reachMessages - The subgraph containing only states that
#                 can reach a state with an associated message.
# trace         - The shortest path a state with an associated
#                 message, i.e., an abstract error trace.
tvla.tr.project = full

# If enabled, determines whether the transition relation will be generated in a tvs format
tvla.tr.tvs.enabled =  false

# If enabled, determines whether the transition relation will be generated in a dot format
tvla.tr.dot.enabled =  false

# Determines the name of the transition relation output file
# in tvs format
tvla.tr.tvs.outputFile = null

# Determines the name of the transition relation output file
# in dot format
tvla.tr.dot.outputFile = null

# Determines the name of the transition relation output file
# in xml format
tvla.tr.xml.outputFile = null

