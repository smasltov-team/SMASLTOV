/////////////////////
// Shorthand formulae

#define NB(v) |/{z(v) : z in AmbientNames}

#define NBA(v) (A(v_1) pa+(v, v_1) -> NB(v_1))

#define REDEX_PATH(v) (NB(v) & NBA(v) & !error())

#define PRE_IN(m, f_c, f_p, f_s, f_pp) (pa(f_c,f_p) & pa(f_p,f_pp) & pa(f_s,f_pp) & REDEX_PATH(f_pp) & in[m](f_c) & m(f_s) & NB(f_p) & !pa(f_c, f_s))

#define PRE_OUT(m, f_c, f_p, f_pp,f_ppp) (pa(f_c,f_p) & pa(f_p,f_pp) & pa(f_pp,f_ppp) & REDEX_PATH(f_ppp) & out[m](f_c) & NB(f_p) & m(f_pp))

#define PRE_OPEN(m, f_c, f_s, f_p) (pa(f_c,f_p) & pa(f_s,f_p) & REDEX_PATH(f_p) & open[m](f_c) & m(f_s))

#define PRE_BANG(f_c, f_p) (pa(f_c,f_p) & REDEX_PATH(f_p) & bang(f_c))

%action in(m) {
  %t "in[" + m + "]"
  %p PRE_IN(m, f_c, f_p, f_s, f_pp)
  {
    pa(v_1, v_2) = (v_1==f_p & v_2==f_s) |
                   (pa(v_1, f_c) & v_2 == f_p) |
                   (pa(v_1, v_2) & !(v_1 == f_p &  v_2 == f_pp) & 
                   !(v_1 == f_c & v_2 == f_p) &
                   !(v_2 == f_c))
    foreach (z in AmbientNames) {
      inside[z,m]() = inside[z,m]() | E(v) z(v) & pa*(v, f_p) 
    }
  }
  %retain v!=f_c
}

%action out(m) {
  %t "out[" + m + "]"
  %p PRE_OUT(m, f_c, f_p, f_pp, f_ppp)
  {
    pa(v_1, v_2) = (v_1 == f_p & v_2 == f_ppp) |
                   (pa(v_1, f_c) & v_2 == f_p) |
                   (pa(v_1, v_2) & !(v_1 == f_p & v_2 == f_pp) & 
                                   !(v_1 == f_c & v_2 == f_p) & 
                                   !(v_2 == f_c))
    foreach (z in AmbientNames) {
	  inside[z,m]() = inside[z,m]() & 
                      // z is descendent of f_p and f_pp has an ancestor m
                      ((E(v_1, v_2) z(v_1) & pa*(v_1, f_p) & m(v_2) & pa+(f_pp, v_2)) |
                      // z is a descendent of m not through f_p
                      (E(v_1, v_2) z(v_1) & m(v_2) &
                      pa+(v_1, v_2) & !(pa*(v_1, f_p) & pa*(f_p, v_2))))
    }
  }
  %retain v!=f_c
}

%action open(m) {
  %t "open[" + m + "]"
  %p PRE_OPEN(m, f_c, f_s, f_p)
  {
    pa(v_1, v_2) = (pa(v_1, f_c) & v_2 == f_p) |
                   (pa(v_1, f_s) & v_2 == f_p) |
                   (pa(v_1, v_2) & !(v_1 == f_c &  v_2 == f_p) & 
                                   !(v_2 == f_c) &
                                   !(v_1 == f_s &  v_2 == f_p) & 
                                   !(v_2 == f_s))
    foreach (z in AmbientNames) {
      inside[z,m]() = inside[z,m]() & 
                      // z is descendent of f_s and f_p has an ancestor m
                      ((E(v_1, v_2) z(v_1) & pa+(v_1, f_s) & m(v_2) & pa*(f_p, v_2)) |
                      // z is a descendent of m not through f_s
                      (E(v_1, v_2) z(v_1) & m(v_2) & pa+(v_1, v_2) & 
                      !(pa*(v_1, f_s) & pa*(f_s, v_2))))
    }
  }
  %retain v!=f_c & v!=f_s
}

%action bang() {
  %t "!"
  %p PRE_BANG(f_c, f_p)
  %new pa+(v, f_c)
  {
    pa(v_1, v_2) = pa(v_1, v_2) |
                   (E(v_11) instance(v_1, v_11) &
                   ( (pa(v_11, f_c) & v_2 == f_p) |
                     (E(v_21) instance(v_2, v_21) & pa(v_11, v_21))))
    foreach (z in AmbientNames) {	        
      z(v) = z(v) | E(v_1) (instance(v, v_1) & z(v_1))
      in[z](v) = in[z](v) | E(v_1) (instance(v, v_1) & in[z](v_1))
      out[z](v) = out[z](v) | E(v_1) (instance(v, v_1) & out[z](v_1))
      open[z](v) = open[z](v) | E(v_1) (instance(v, v_1) & open[z](v_1))
    }  
  } 
}

%action nothing() {
}