///////////////////////////////////////////////////////
// Actions encoding operations that test the DFS state.

%action IsMarked(x) {
    %t x + ".marked == 1"
    %f { E(v) x(v) & marked(v) } 
    %p E(v) x(v) & marked(v)
}

%action IsNotMarked(x) {
    %t x + ".marked == 0"
    %f { E(v) x(v) & marked(v) } 
    %p !E(v) x(v) & marked(v)
}


%action IsDone(x) {
    %t x + ".done == 1"
    %f { E(v) x(v) & done(v) } 
    %p E(v) x(v) & done(v)
}

%action IsNotDone(x) {
    %t x + ".done == 0"
    %f { E(v) x(v) & done(v) } 
    %p !E(v) x(v) & done(v)
}

%action IsDoneRight(x) {
    %t x + ".done_right == 1"
    %f { E(v) x(v) & done_right(v) } 
    %p E(v) x(v) & done_right(v)
}

%action IsNotDoneRight(x) {
    %t x + ".done_right == 0"
    %f { E(v) x(v) & done_right(v) } 
    %p !E(v) x(v) & done_right(v)
}


/////////////////////////////////////////////////////////
// Actions encoding operations that modify the DFS state.

%action SetNotMarkedAll() {
    %t "A(v) (v.marked = 0)"
    {
		marked(v) = 0
    }
}

%action SetNotDoneAll() {
    %t "A(v) (v.done = 0)"
    {
		done(v) = 0
    }
}

%action SetNotDoneRightAll() {
    %t "A(v) (v.done_right = 0)"
    {
		done_right(v) = 0
    }
}

%action SetMarked(x) {
    %t x + ".marked = 1"
	%f { x(v) }
	%message !(E(v) x(v)) -> "" + x + " is possibly NULL when attempting to set " + x + "marked = 1\n"
    {
		marked(v) = marked(v) | x(v)
    }
}

%action SetNotMarked(x) {
    %t x + ".marked = 0"
	%f { x(v_1) }
	%message !(E(v) x(v)) -> "" + x + " is possibly NULL when attempting to set " + x + "marked = 0\n"
    {
		marked(v) = marked(v) & !x(v)
    }
}

%action SetDone(x) {
    %t x + ".done = 1"
	%f { x(v_1) }
	%message !(E(v) x(v)) -> "" + x + " is possibly NULL when attempting to set " + x + "done = 1\n"
    {
		done(v) = done(v) | x(v)
    }
}

%action SetNotDone(x) {
    %t x + ".done = 0"
	%f { x(v_1) }
	%message !(E(v) x(v)) -> "" + x + " is possibly NULL when attempting to set " + x + "done = 0\n"
    {
		done(v) = done(v) & !x(v)
    }
}

%action SetDoneRight(x) {
    %t x + ".done_right = 1"
	%f { x(v_1) }
	%message !(E(v) x(v)) -> "" + x + " is possibly NULL when attempting to set " + x + "done_right = 1\n"
    {
		done_right(v) = done_right(v) | x(v)
    }
}

%action SetNotDoneRight(x) {
    %t x + ".done_right = 0"
	%f { x(v_1) }
	%message !(E(v) x(v)) -> "" + x + " is possibly NULL when attempting to set " + x + "done_right = 0\n"
    {
		done_right(v) = done_right(v) & !x(v)
    }
}