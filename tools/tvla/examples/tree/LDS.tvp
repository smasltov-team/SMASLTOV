// Lindstrom binary-search-tree traversal.
// Similar to Deutsch-Schorr-Waite but specialized for binary
// trees and is constant-space (no child counters/markers)

//#include "tree.h"
%s TSel {left, right}

// t is a temp needed for TVLA's accessor normalization.
// The rest of the vars are for the Lindstrom alg.
%s PVar {root, cur, prev, next, sent, t}

#include "pred_tree.tvp"
#include "pred_dfs.tvp"
%%
#include "actions_tree.tvp"
#include "actions_dfs.tvp"
%%

// Lindstrom constant space traversal of a binary tree.
					//void Lindstrom(Tree *root) {
					//  Tree *prev, *cur, *next, *t;

n0   Is_Null_Var(root)		exit	//  if (root == NULL) return;
n0   Is_Not_Null_Var(root)	n1

n1   Copy_Var_T(prev, sent)	n2	//  prev = SENTINEL;
n2   Copy_Var_T(cur, root)	n3	//  cur = root;

					//  while(1)
					//  { // Rotate pointers
n3   Get_Sel_T(next, cur, left)	n4	//    next = cur->left;
n4   Get_Sel_T(t, cur, right)	n5	//    cur->left = cur->right;
n5   Set_Sel_Null_T(cur, left)	n6
n6   Set_Sel_Null_T(cur, right)	n7	//    // Early nulling to avoid
n7   Set_Sel_T(cur, left, t)	n7a	//    // tree constraint breach!
n7a  Set_Null_T(t)		n8	//    // Clear temporary variables early!
n8   Set_Sel_T(cur, right, prev)n9	//    cur->right = prev;

					//    // Do any work (marking,
					//    // counting, etc.) on cur here.

					//    // Move forward.
n9   Copy_Var_T(prev, cur)	n10	//    prev = cur;
n10  Copy_Var_T(cur, next)	n10a	//    cur = next;
n10a Set_Null_T(next)		n11	//    // Clear variables early!

n11  Is_Eq_Var(cur, sent)	exit	//    if (cur == SENTINEL) break;
n11  Is_Not_Eq_Var(cur, sent)	n12

n12  Is_Null_Var(cur)		n17	//    // if (ATOM(cur))
n12  Is_Not_Null_Var(cur)	n3	//    if (cur == NULL ||    

					//      // Swap prev and cur (cur is NULL).
n17  Copy_Var_T(cur, prev)	n18	//      cur = prev;
n18  Set_Null_T(prev)		n3	//      prev = NULL;
					//    }
					//  }
					//}

%% exit
