%s PVar {root, cur, el, t, t2}
%s TSel {left, right}
%s Sets {free}

#include "pred_sort.tvp"
#include "pred_set.tvp"
%%
#include "actions_sort.tvp"
#include "actions_set.tvp"
%%


// if (root == NULL) {
n1 Is_Null_Var(root) n2
n1 Is_Not_Null_Var(root) n4
//   root = el;
  n2 Copy_Var_T(root, el) n3
//   return;
  // Null out el, as an optimizer could.
  n3 Set_Null_T(el) test
// }

// cur = root;
n4 Copy_Var_T(cur, root) n5
// while (true) {
n5 uninterpreted() n6
//  if (el->data < cur->data) {
  n6 Less_Data_T(el, cur) n7
  n6 Greater_Equal_Data_T(el, cur) n12
//    t = cur->left;
    n7 Get_Sel_T(t, cur, left) n8
//    if (t == NULL) {
    n8 Is_Null_Var(t) n9
    n8 Is_Not_Null_Var(t) n11
//      cur->left = el;
      n9 Set_Sel_T(cur, left, el) n10
//      return;
      // Null out el and cur, as an optimizer could.
      n10  Set_Null_T(el) n10a
      n10a Set_Null_T(cur) test
//    }
//    cur = t;
    n11 Copy_Var_T(cur, t) n5
//  } else {
//    t = cur->right;
    n12 Get_Sel_T(t, cur, right) n13
//    if (t == NULL) {
    n13 Is_Null_Var(t) n14
    n13 Is_Not_Null_Var(t) n16
//      cur->right = el;
      n14 Set_Sel_T(cur, right, el) n15
//      return;
      // Null out el, as an optimizer could.
      n15  Set_Null_T(el) n15a
      n15a Set_Null_T(cur) test
//    }
//    cur = t;
    n16 Copy_Var_T(cur, t) n5
//  }
//}

// Now test the structures
test Is_Sorted_Data_T(root) exit
test Is_Not_Sorted_Data_T(root) error

%% n1, error, exit
