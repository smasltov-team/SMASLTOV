//////////////////////////////////////////////
// Actions encoding operations that test sets.

%action SetIsEmpty(s) {
    %t s + ".SetIsEmpty()"
    %f { E(v) set[s](v) } 
    %p !E(v) set[s](v)
}

%action SetNotIsEmpty(s) {
    %t "!" + s + ".SetIsEmpty()"
    %f { E(v) set[s](v) } 
    %p E(v) set[s](v)
}

%action SetIsMember(s, pvar) {
    %t s + ".SetIsMember(" + pvar + ")"
    %f { E(v) set[s](v) & pvar(v) } 
    %p E(v) set[s](v) & pvar(v)
}

%action SetNotIsMember(s, pvar) {
    %t "!" + s + ".SetIsMember(" + pvar + ")"
    %f { E(v) set[s](v) & pvar(v) } 
    %p !E(v) set[s](v) & pvar(v)
}


////////////////////////////////////////////////
// Actions encoding operations that modify sets.

%action SetAssignEmpty(s) {
    %t s + ".SetAssignEmpty()"
    {
	set[s](v) = 0
    }
}

%action SetAssignUniverse(s) {
    %t s + ".SetAssignUniverse()"
    {
	set[s](v) = 1
    }
}

%action SetInsert(s, pvar) {
    %t s + ".SetInsert(" + pvar + ")"
     %f { pvar(v) }
    %message !(E(v) pvar(v)) -> "" + pvar + " is possibly NULL when attempting to insert into set " + s + "\n"
    {
	set[s](v) = set[s](v) | pvar(v)
    }
}

%action SetSelectAndRemove(s, pvar) {
    %t pvar + "=" + s + ".SetSelectAndRemove()"
    %f { set[s](selected) & unique_selection(selected) }
    %p set[s](selected) & unique_selection(selected) 
    {
        pvar(v) = (v == selected)
	set[s](v) = set[s](v) & (v != selected)
        unique_selection(v) = 1/2 
    }
}
