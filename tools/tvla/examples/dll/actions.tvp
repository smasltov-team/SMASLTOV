%action uninterpreted() { 
    %t "uninterpreted"
}

%action Set_Null_DL(lhs) {
  %t lhs + " = NULL"
  {
    lhs(v) = 0 
  }
}

%action Copy_Var_DL(lhs, rhs) {
  %t lhs + " = " + rhs
  %f { rhs(v) } 
  {
    lhs(v) = rhs(v) 
  }
}

%action Malloc_DL(lhs) {
  %t lhs + " = (DL) malloc(sizeof(struct node)) "
  %new
  {
    lhs(v) = isNew(v)
    foreach (sel in DSel) {
      t[sel](v_1, v_2) = (isNew(v_1) ? v_1 == v_2 : t[sel](v_1, v_2))
      r[sel,lhs](v) = isNew(v)
      is[sel](v) = (isNew(v) ? 0 : is[sel](v))
      foreach (x in PVar-{lhs}) {
        r[sel,x](v) = (isNew(v) ? 0 : r[sel,x](v))
      }
    }
    foreach (sel in DSel) {
      foreach (other in DSel-{sel}) {
        c[sel,other](v) = c[sel,other](v) | isNew(v)
      }
    }   
  }
}

%action Get_Sel_DL(lhs, rhs, sel) {
  %t lhs + " = " + rhs + "->" + sel
  %f { E(v_1, v_2) rhs(v_1) & sel(v_1, v_2) &  t[sel](v_2, v) } 
  %message !(E(v) rhs(v)) ->
           "An illegal dereference to ->" + sel + " component of " + rhs
  {
    lhs(v) = E(v_1) rhs(v_1) & sel(v_1, v)    
  }
}

%action Set_Sel_Null_DL(lhs, sel) {
  %t lhs + "->" + sel + " = NULL"
  %f { lhs(v),
       // Optimized change-formula for t[sel] update-formula
       E(v_1, v_2) lhs(v_1) & sel(v_1, v_2) & t[sel](v_2, v)   
     }
  %message !(E(v) lhs(v)) -> 
           "An illegal dereference to ->" + sel + " component of " + lhs
  {
    sel(v_1, v_2) = sel(v_1, v_2) & !lhs(v_1)
  }
}

%action Set_Sel_DL(lhs, sel, rhs) {
  %t lhs + "->" + sel + " = " + rhs
  %f { lhs(v), rhs(v),
       // Optimized change-formula for t[sel] upate-formula 
       E(v_1) rhs(v_1) & t[sel](v_1, v_2)
     }
  %message (E(v_1, v_2) lhs(v_1) & sel(v_1, v_2)) ->
           "Internal Error! assume that " + lhs + "->" + sel + "==NULL"
  %message (E(v_1, v_2) lhs(v_1) & rhs(v_2) & t[sel](v_2, v_1)) ->
           "A" + sel + "cycle may be introduced\nby the assignment " +
           lhs + "->" + sel + "=" + rhs
  {
    sel(v_1, v_2) = sel(v_1, v_2) |  lhs(v_1) & rhs(v_2)
  }
}


//////////////////////////////////////////////////////////////////
// Actions needed to simulate program conditions involving pointer
// equality tests.

%action Is_Not_Null_Var(lhs) {
  %t lhs + " != NULL"
  %f { lhs(v) } 
  %p E(v) lhs(v)
}

%action Is_Null_Var(lhs) {
  %t lhs + " == NULL"
  %f { lhs(v) } 
  %p !(E(v) lhs(v))
}

%action Is_Eq_Var(lhs, rhs) {
  %t lhs + " == " + rhs
  %f { lhs(v), rhs(v) } 
  %p A(v) lhs(v) <-> rhs(v)
}

%action Is_Not_Eq_Var(lhs, rhs) {
  %t lhs + " != " + rhs
  %f { lhs(v), rhs(v) } 
  %p !A(v) lhs(v) <-> rhs(v)
}