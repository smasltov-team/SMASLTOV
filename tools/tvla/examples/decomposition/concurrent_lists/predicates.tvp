/////////////////////
// Core predicates //
/////////////////////

// A predicate to designate the currently-schedule thread
%p tr_scheduled(tr) unique
%r tr_scheduled(tr) ==> isthread(tr)

// isthread(t) is a pre-defined type predicate

// Thread program counters
foreach (loc in locations) {
  %p at[loc](thread)
  // Only threads have program counters
  %r at[loc](v) ==> isthread(v)
  %r !isthread(v) ==> !at[loc](v)
}

// The following constraints are commented out
// since there are too many of them.
// A thread has at most one program counter
foreach (loc1 in locations) {
 foreach (loc2 in locations-{loc1}) {
   %r at[loc1](t) ==> !at[loc2](t)
 }
}

// User-defined types
foreach (type in types) {
  %p t[type](o)
  // We could add constraints that prohibit
  // an object from having more than one type
}

// Locks are pre-defined types
%p t[lock](o)

// Lock predicate
// acq[l](o,t) means that locks o has been acquired by thread t
%p acq(o,t) function
//%r acq(o,t) ==> t[lock](o)
%r acq(o,t) ==> isthread(t)

// Global pointer variables
foreach (var in globalpointers) {
  %p g[var](object) unique pointer
}

// Local pointer variables
foreach (var in localpointers) {
  %p rv[var](thread,object) function
  %r rv[var](t,o) ==> isthread(t)
  %r rv[var](t,o) ==> !isthread(o)
}

// Recursive pointer (list) fields
foreach (fld in recfields) {
  %p fld(u,v) function acyclic
}

// Non-recursive pointer fields
foreach (fld in nonrecfields) {
  %p fld(u,v) function
  // TODO: consider replacing the following with typing constraints.
  %r fld(v1,v2) ==> !fld(v2,v3)
  %r fld(v2,v3) ==> !fld(v1,v2)
}

// Global Boolean variables
foreach (var in globalbools) {
  %p b[var]() {0,1}
}

// Local Boolean fields
foreach (var in localbools) {
  %p b[var](o) {0,1}
  %r b[var](o) ==> !isthread(o)
}

///////////////////////////////////////////////////////
// Extra core predicates that instrument the program //
///////////////////////////////////////////////////////

// Thread allocation sites
foreach (label in tr_alloc_sites) {
  %p alloc[label](o)
}

// // Object allocation sites
// foreach (label in tr_alloc_sites) {
//   %p alloc[label](o)
// }

foreach (id in threadIds) {
  %p id(t)// unique
}

////////////////////////
// Derived predicates //
////////////////////////

// The t[n] predicate records transitive reflexive reachability between
// list elements along the n field.
%i t[n](v_1, v_2) = n*(v_1, v_2) transitive reflexive

// Integrity constraints for transitive reachability
%r !t[n](v_1, v_2) ==> !n(v_1, v_2)
%r !t[n](v_1, v_2) ==> v_1 != v_2
%r E(v_1) (t[n](v_1, v_2) & t[n](v_1, v_3) & !t[n](v_2, v_3)) ==> t[n](v_3, v_2)
// ROMAN: The following constraint is needed when we keep the tail of the
// list separate by the r_out[n]=0 value.
%r t[n](v1,v2) & t[n](v2,v3) & v1!=v2 & v2!=v3 & v1!=v3 ==> !n(v1,v3)
// TODO: fix these constraints
%r t[n](v1,v2) & t[n](v2,v3) & v1!=v2 & v2!=v3 & v1!=v3 & n(v1,v2) & (A(v4) t[n](v2,v4) & t[n](v4,v3) -> v3==v4)  ==> n(v2,v3)
%r t[n](v1,v2) & t[n](v2,v3) & v1!=v2 & v2!=v3 & v1!=v3 & n(v2,v3) & (A(v4) t[n](v1,v4) & t[n](v4,v2) -> v2==v4)  ==> n(v1,v2)
//%r t[n](v1,v2) & t[n](v2,v3) & v1!=v2 & v2!=v3 & v1!=v3 & (v1==v1) & (v2==v2) & (v3==v3) ==> n(v2,v3)

foreach (gvar in globalpointers) {
  %i nn[gvar]() = E(v) g[gvar](v)
}

// Reachability from global variables along recursive fields.
foreach (var in globalpointers) {
  foreach (fld in recfields) {
    %i r[var,fld](v) = E(u) g[var](u) & t[fld](u,v)
    %r !r[var,fld](v) ==> !g[var](v)
    %r r[var,fld](object) ==> !isthread(object)
    %r isthread(object) ==> !r[var,fld](object)
  }
}

foreach (fld in fields) {
  %i is[fld](o) = E(v_1,v_2) v_1 != v_2 & fld(v_1,o) & fld(v_2,o)
  %r is[fld](o) ==> !isthread(o)
  %r isthread(o) ==> !is[fld](o)
  %i r_in[fld](o) = E(u) fld(u,o)
//  %r r_in[fld](o) ==> !isthread(o)
//  %r isthread(o) ==> !r_in[fld](o)
  %i r_out[fld](o) = E(u) fld(o,u)
//  %r r_out[fld](o) ==> !isthread(o)
//  %r isthread(o) ==> r_out[fld](o)
  %r !r_out[fld](v1) ==> !n(v1,v2)
}

%r E(v2) t[n](v1,v2) & v1!=v2 ==> r_out[n](v1)
%r E(v1) t[n](v1,v2) & v1!=v2  ==> r_in[n](v2)
%r r_out[n](v1) & A(v) v!=v2 -> !n(v1,v) ==> n(v1,v2)

foreach (var in localpointers) {
  %i is[var](v) = E(v_1,v_2) v_1 != v_2 & rv[var](v_1,v) & rv[var](v_2,v) nonabs
  %r is[var](o) ==> !isthread(o)
  %r isthread(o) ==> !is[var](o)
  %i r_in[var](v) = E(u) rv[var](u,v) nonabs
  %r r_in[var](o) ==> !isthread(o)
  %r isthread(o) ==> !r_in[var](o)
  %i r_out[var](v) = E(u) rv[var](v,u) nonabs
}

foreach (label in locations) {
  foreach (var in localpointers) {
    %i r_by[label,var](v) = E(t) at[label](t) & rv[var](t,v) nonabs
    %r r_by[label,var](o) ==> !isthread(o)
    %r isthread(o) ==> !r_by[label,var](o)
    //%i r_to[label,var](v) = E(t) at[label](t) & E(o) rv[var](t,o) & t[n](o,v)
  }
}

foreach (var in localpointers) {
  foreach (fld in recfields) {
    %i r_rv[var](v) = E(t,o) rv[var](t,o) & t[fld](o,v)
    %r r_rv[var](o) ==> !isthread(o)
    %r isthread(o) ==> !r_rv[var](o)
  }
}

%i acquired(lock) = E(t) isthread(t) & acq(lock,t)

foreach (label in locations) {
  %i heap_at[label](v) = |/{E(w) r_by[label,var](w) & t[n](w,v) : var in localpointers} nonabs
  %r heap_at[label](v) ==> !isthread(v)
  %r isthread(v) ==> !heap_at[label](v)
  %i locked_at[label](v) = E(t) at[label](t) & acq(v,t) nonabs
  %r locked_at[label](v) ==> !isthread(v)
  %r isthread(v) ==> !locked_at[label](v)
  %r heap_at[label](v1) & !heap_at[label](v2) ==> !t[n](v1,v2)
//  %r t[n](v1,v2) ==> heap_at[label](v1) & heap_at[label](v2)
}

// A lock can be acquired by at most one thread.
// These constraints are quite very so I commented them out for now.
// foreach (label1 in locations) {
//   foreach (label2 in locations-{label1}) {
//     %r E(v) locked_at[label1](v) & locked_at[label2](v) ==> 0
//   }
// }


// foreach (label in locations) {
//   %i heap_at[label](v) = at[label](v) | E(t) isthread(t) & (|/{rv[var](t,v) : var in localpointers})
// }

// foreach (tid in threadIds) {
//   %i heap[tid](v) = E(t) tid(t) & (|/{rv[var](t,v) : var in localpointers})
// }

////////////////////////////////
// Constraints for decomposition

// foreach (tid in threadIds) {
//   foreach (var in localpointers) {
//     %r !heap[tid](v) & tid(t) ==> !rv[var](t,v)
//   }
// }
