#define CondAssign(cond,pred,result) pred = ((cond) ? (result) : (pred))
#define UPDATE_AT(from,to)\
    CondAssign(tr(t),at[from](t),0)\
    CondAssign(tr(t),at[to](t),1)\

%action skip(from, to) {
  %t "skip"
  {
    UPDATE_AT(from,to)
  }
}

// lhs is a local variable
%action malloc_local(from, to, lhs) {
  %t tr + "." + lhs + " = (L) malloc(sizeof(struct node)) "
  %f {tr(t) & rval[lhs](t,dst)}
//  %message (E(v) !isthread(v) & !(|/{ r[g,n](v) : g in globals}) & !(|/{ pt[z](v) : z in locals}) ) -> "garbage detected\n"
  %message (E(v,t) tr(t) & rval[lhs](t,v)) -> "Internal error: " + t + "." + lhs + " is not null"
  %new
  {
    CondAssign(tr(t),rval[lhs](t,v),isNew(v))
    foreach (g in globals) {
      foreach (fld in fields) {
        r[g,fld](v) = r[g,fld](v)
      }
    }
    foreach (fld in fields_and_locals) {
      is[fld](v) = is[fld](v) & !isNew(v)
    }
    foreach (var in locals-{lhs}) {
      pt[var](v) = pt[var](v)
    }
    pt[lhs](v) = pt[lhs](v) | isNew(v)

    foreach (var in locals) {
      foreach (g in globals) {
        ptng[var,g](v) = ptng[var,g](v)
      }
    }
    foreach (var in locals-{lhs}) {
      nn[var](t) = nn[var](t)
    }
    nn[lhs](t) = nn[lhs](t) | tr(t)
    foreach (fld in fields_and_locals - {lhs}) {
      r_in[fld](v) = r_in[fld](v)
    }
    r_in[lhs](v) = r_in[lhs](v) | isNew(v)
    foreach (fld in fields_and_locals) {
      r_out[fld](v) = r_out[fld](v)
    }
    r_out[lhs](t) = r_out[lhs](t) | tr(t)
    foreach (z in locals-{lhs}) {
      foreach (fld in fields) {
        rt[z,fld](v) = rt[z,fld](v)
      }
    }
    foreach (fld in fields) {
      rt[lhs,fld](v) = rt[lhs,fld](v) | isNew(v)
    }
    t[n](u,v) = t[n](u,v) | isNew(u) & isNew(v)

//     foreach (loc in locations-{to}) {
//       foreach (z in locals) {
//         rt[z,loc](v) = rt[z,loc](v)
//       }
//     }
//     foreach (z in locals-{lhs}) {
//       rt[z,to](v) = rt[z,to](v)
//     }
//     rt[lhs,to](v) = rt[lhs,to](v) | isNew(v)

    UPDATE_AT(from,to)
  }
}

// lhs is a local variable
%action assignNullToLocalVar(from, to, lhs) {
  %t tr + "." + lhs + " = null"
  %f {tr(t) & rval[lhs](t,dst)}
//  %message (A(t) tr(t) -> r_out[lhs](t)) -> "This statement will create memory leak"
//  %message (E(v) !isthread(v) & !(|/{ r[g,n](v) : g in globals}) & !(|/{ pt[z](v) : z in locals}) ) -> "garbage detected\n"
  {
    rval[lhs](t,v) = (rval[lhs](t,v) ? !tr(t) : 0)
    //CondAssign(tr(t),rval[lhs](t,v),0)
    is[n](v) = is[n](v)
    r[S_Top,n](v) = r[S_Top,n](v)
    UPDATE_AT(from,to)
  }
}

// lhs is a local variable; rhs is a global variable
%action assignGlobalVarToLocalVar(from, to, lhs, rhs) {
  %t tr + "." + lhs + " = " + rhs
  %f {tr(t) & rval[lhs](t,dst), global[rhs](v),
      global[rhs](v) & rval[lhs](t,v)}
  %message (E(v,t) tr(t) & rval[lhs](t,v)) -> "Internal error: " + t + "." + lhs + " is not null\n"
//  %message (E(v) !isthread(v) & !(|/{ r[g,n](v) : g in globals}) & !(|/{ pt[z](v) : z in locals}) ) -> "garbage detected\n"
  {
    rval[lhs](t,v) = (rval[lhs](t,v) ? 1 : tr(t) & global[rhs](v))
//    rt[lhs,n](v) = rt[lhs,n](v) | r[rhs,n](v)

    is[n](v) = is[n](v)
    r[S_Top,n](v) = r[S_Top,n](v)
    UPDATE_AT(from,to)
  }
}

// lhs is a local variable
%action assignFieldNull(from, to, lhs, fld) {
  %t tr + "." + lhs + "." + fld + " = null"
  %f {tr(t) & rval[lhs](t,dst) & fld(dst,dst_deref)}
//  %message (E(v) !isthread(v) & !(|/{ r[g,n](v) : g in globals}) & !(|/{ pt[z](v) : z in locals}) ) -> "garbage detected\n"
  %message (A(t) tr(t) -> !r_out[lhs](t)) -> "Possible null deref of " + lhs + "." + fld
  {
    fld(u,v) = fld(u,v) & !(E(t) tr(t) & rval[lhs](t,u) & fld(u,v))
//     foreach (g in globals) {
//       r[g,fld](v) = r[g,fld](v) & !(E(dst,t) tr(t) & r[g,fld](dst) & rval[lhs](t,dst) & n+(dst,v))
//     }
//     rt[lhs,fld](v) = rt[lhs,fld](v) & !(E(t) tr(t) & rval[lhs](t,v) & !is[lhs](v))

    UPDATE_AT(from,to)
  }
}

// lhs and rhs are local variable
%action assignField(from, to, lhs, fld, rhs) {
  %t tr + "." + lhs + "." + fld + " = " + rhs
  %f {tr(t) & rval[lhs](t,dst1) & fld(dst1,dst_deref) & rval[rhs](t,dst2)}
  %message (E(u,v,t) tr(t) & rval[lhs](t,u) & fld(u,v)) -> "Internal error: " + tr + "." + lhs + "." + fld + " is not null\n"
  %message (A(t) tr(t) -> !r_out[lhs](t)) -> "Possible null deref of " + lhs + "." + fld
//  %message (E(v) !isthread(v) & !(|/{ r[g,n](v) : g in globals}) & !(|/{ pt[z](v) : z in locals}) ) -> "garbage detected\n"
  {
    fld(u,v) = fld(u,v) | E(t) tr(t) & rval[lhs](t,u) & rval[rhs](t,v)

    UPDATE_AT(from,to)
  }
}

// lhs is a global variables; test and rhs are local variables
%action CAS_fail(from, to, lhs, test, rhs) {
  %t "CAS(&" + lhs + "," + test + "," + rhs + ") fail"
  %f {tr(t) & rval[test](t,dst1) & rval[rhs](t,dst2), global[lhs](v)}
  %p !((E(v,t) tr(t) & global[lhs](v) & rval[test](t,v)) | (E(t) tr(t) & A(v) !global[lhs](v) & !rval[test](t,v)))
//  %message (E(v) !isthread(v) & !(|/{ r[g,n](v) : g in globals}) & !(|/{ pt[z](v) : z in locals}) ) -> "garbage detected\n"
  {
    pt[x](v) = pt[x](v)
    pt[t](v) = pt[t](v)
    rt[x,n](v) = rt[x,n](v)
    rt[t,n](v) = rt[t,n](v)
    r[S_Top,n](v) = r[S_Top,n](v)
    is[n](v) = is[n](v)
    is[t](v) = is[t](v)
    nn[t](v) = nn[t](v)
    r_out[t](v) = r_out[t](v)
    UPDATE_AT(from,to)
  }
}

// lhs is a global variables; test and rhs are local variables
%action CAS_success1(from, to, lhs, test, rhs) {
  %t "CAS1(&" + lhs + "," + test + "," + rhs + ") success"
  %f {tr(t) & rval[test](t,dst1) & rval[rhs](t,dst2), global[lhs](v) }
  %p (E(v,t) tr(t) & global[lhs](v) & rval[test](t,v)) | (E(t) tr(t) & A(v) !global[lhs](v) & !rval[test](t,v))

//  %message !(E(u,v,t) tr(t) & global[lhs](v) & rval[rhs](t,u) & n(u,v)) -> "CAS assumption violated for " + tr
//  %message (E(v) !isthread(v) & !(|/{ r[g,n](v) : g in globals}) & !(|/{ pt[z](v) : z in locals}) ) -> "garbage detected\n"
  {
    global[lhs](v) = 0
    is[n](v) = is[n](v)
    is[t](v) = is[t](v)
    nn[t](v) = nn[t](v)
    r_out[t](v) = r_out[t](v)
  }
}

%action CAS_success2(from, to, lhs, test, rhs) {
  %t "CAS2(&" + lhs + "," + test + "," + rhs + ") success"
  %f {tr(t) & rval[test](t,dst1) & rval[rhs](t,dst2), global[lhs](v),
      tr(t) & rval[rhs](t,dst) & n(dst,v) }
  {
    global[lhs](v) = E(t) tr(t) & rval[rhs](t,v)
    //r[lhs,n](v) = E(t,u) tr(t) & rval[rhs](t,u) & t[n](u,v) & rt[rhs,n](v)
    r[S_Top,n](v) = E(t,u) tr(t) & rval[rhs](t,u) & t[n](u,v)
    is[n](v) = is[n](v)
    is[t](v) = is[t](v)
    nn[t](v) = nn[t](v)
    r_out[t](v) = r_out[t](v)
    UPDATE_AT(from,to)
  }
}
