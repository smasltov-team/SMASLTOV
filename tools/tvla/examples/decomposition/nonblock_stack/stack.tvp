// Sets

%s globals {S_Top, S_tail}
%s locals {x, t}
%s fields {n}
%s fields_and_locals {n, x, t}
%s locations {pl_1, pl_2, pl_3, pl_4, pl_5, pl_6, pl_7}

// Predicates
#include "predicates.tvp"

%%

// Actions
#include "actions.tvp"

%action verifyProperty() {
  %t "verify property"
  %message (A(v) !global[S_Top](v)) -> "S_Top is null\n"
  %message (A(v) global[S_Top](v)->global[S_tail](v)) -> "tail is not reachable from Top\n"
  %message (E(v) !isthread(v) & !(|/{ r[g,n](v) : g in globals}) & !(|/{ r_in[z](v) : z in locals}) ) -> "garbage detected\n"
  %message (E(v) r[S_Top,n](v) & !r[S_Top,n](v)) -> "r[S_Top,n] is imprecise for " + v
}

%action schedule(loc) {
  %t "schedule " + loc
  %f { tr(v) }
  %p E(t) tr(t) & at[loc](t)
}

%action unschedule() {
  %t "unschedule"
  {
    tr(v) = isthread(v) & 1/2 | !isthread(v) & 0
  }
}

%%

// Code

init verifyProperty() init

init unschedule() idle
idle schedule(pl_1) pl_1
//idle schedule(pl_2) pl_2
idle schedule(pl_3) pl_3
//idle schedule(pl_4) pl_4
idle schedule(pl_5) pl_5
//idle schedule(pl_6) pl_6
idle schedule(pl_7) pl_7

// void push(Stack *S, data type v){
//   Node *x = alloc(sizeof(Node));
//   x->d = v;
//   do {
//     Node *t = S->Top;
//     x->n = t;
//   } while (!CAS(&S->Top,t,x));
// }
                                                                // while (true) {
  pl_1  assignNullToLocalVar(pl_1, pl_2, x) pl_1b                 //   Node *x = malloc(sizeof(Node));
  pl_1b  malloc_local(pl_2, pl_3, x) init                         //
                                                                //   x->d = v;
                                                                //   do {
  pl_3  assignNullToLocalVar(pl_3, pl_4, t) pl_3b                 //     Node *t = S->Top; // make this atomic
  pl_3b assignGlobalVarToLocalVar(pl_4, pl_5, t, S_Top) init     //

  pl_5  assignFieldNull(pl_5, pl_6, x,n) pl_5b                    //     x->n = t;
  pl_5b  assignField(pl_6, pl_7, x,n,t) init                      //
  pl_7  CAS_fail(pl_7, pl_3, S_Top,t,x) init                     //   } while (!CAS(&S->Top,t,x));
  pl_7  CAS_success1(pl_7, pl_1, S_Top,t,x) pl_7b                // }
  pl_7b CAS_success2(pl_7, pl_1, S_Top,t,x) init                // }
