// nonblockq_err2.tvm
// $Id: nonblockq_err2.tvm 1848 2007-11-01 14:15:07Z rumster $
// flipped condition at e9
// Non Blocking Queue Implementation a-la PODC96 paper

#define REACH

/*********************** Sets ******************************/
%s FieldsAndParameters { this, head, tail, Tail, Head, n, node, next, newCount }

/**************** Predicates **************/
#include "nonblockq_pred.tvm"

%%
/********************* Actions *******************/
#include "nonblockq_stat.tvm"
#include "nonblockq_properties.tvm"

/**************** Program *********************/

%%

/******************  Threads *******************/

#include "dequeue.tvm"

// enqueue(Q: pointer to queue t, value: data type)
%thread producer {
//E1: node = new node() // Allocate a new node from the free list
atomic {
    e1 assignNull(node) e1a
    e1a newNode(node) e3
}
//E2: node-->value = value // Copy enqueued value into node
//e2 skip() e3
//E3: node-->next.ptr = NULL // Set next pointer of node to NULL
e3 assignFieldNull(node,n) e5
//E4: loop // Keep trying until Enqueue is done
//e4 skip() e5
//E5: tail = Q-->Tail // Read Tail.ptr and Tail.count together
atomic {
    e5 assignNull(tail) e5a
    e5a assignFromField(tail,this,Tail) e6
}
//E6: next = tail.ptr-->next // Read next ptr and count fields together
atomic {
    e6 assignNull(next) e6a
    e6a assignFromField(next,tail,n) e7
}
//E7: if tail == Q-->Tail // Are tail and next consistent?
e7 isFieldEqual(tail,this,Tail) e8
e7 isFieldNotEqual(tail,this,Tail) e5 // was e16 but optimized jump to e5
//E8: if next.ptr == NULL // Was Tail pointing to the last node?
e8 isFieldNull(next) e9
e8 isFieldNotNull(next) e13
//E9: if CAS(&tail.ptr-->next, next, <node, next.count+1>) // Try to link node at the end of the linked list
atomic {
    e9 assignNull(newCount) e9a
    e9a getFieldSuccessor(newCount,next) e9b
////ERR -- flip sides of condition
////ERR    e9b succesfullCAS(tail,n,next,node,newCount) e17
////ERR    e9b failedCAS(tail,n,next,node,newCount) e5 //was e16 but optimized jump to e5
    e9b succesfullCAS(tail,n,next,node,newCount) e5
    e9b failedCAS(tail,n,next,node,newCount) e17 
}
//E10: break // Enqueue is done. Exit loop
//E11: endif
//E12: else // Tail was not pointing to the last node
//E13: CAS(&Q-->Tail, tail, <next.ptr, tail.count+1>) // Try to swing Tail to the next node
atomic {
    e13 assignNull(newCount) e13a
    e13a getFieldSuccessor(newCount,tail) e13b
    e13b succesfullCAS(this,Tail,tail,next,newCount) e5 // optimized from e14
    e13b failedCAS(this,Tail,tail,next,newCount) e5 // optimized from e14
}
//E14: endif
//E15: endif
//E16: endloop
e16 skip() e5 // was e4, but e4 was optimized out
//E17: CAS(&Q-->Tail, tail, <node, tail.count+1>) // Enqueue is done. Try to swing Tail to the inserted node
atomic {
    e17 assignNull(newCount) e17a
    e17a getFieldSuccessor(newCount,tail) e17b
    e17b succesfullCAS(this,Tail,tail,node,newCount) e18
    e17b failedCAS(this,Tail,tail,node,newCount) e18
}
}


%%

/**************  Claims        ****************/
verifyProperty()
