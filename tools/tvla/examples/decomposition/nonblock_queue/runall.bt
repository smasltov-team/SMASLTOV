REM $Id: runall.bt 1848 2007-11-01 14:15:07Z rumster $

REM runall.bat
REM runs all nonblockq benchmarks
REM 1 - operation --
REM rebuild = rebuild all examples
REM run     = runs
REM ------ note ---- do not leave operation empty or params 2-4 would not be handled right
REM 2-7 - global parameter passed to all benchmarks (e.g., -join part)

if "%1"=="rebuild" goto :delLogs

:start

REM -------------------------------------------------------------
REM NON BLOCKING QUEUE
REM -------------------------------------------------------------

REM --- enqueue with a single enqueue-ing thread ---
call runstep nbq_enqueue nbq_enqueue nbq_enqueue_single_thread %2 %3 %4 %5 %6 %7

REM --- enqueue with dynamic allocation of enqueue-ing threads ---
call runstep nbq_enqueue nbq_enqueue nbq_enqueue_dalloc -DALLOC %2 %3 %4 %5 %6 %7

REM --- enqueue with unbounded number of enqueue-ing threads ---
call runstep nbq_enqueue nbq_enqueue nbq_enqueue_ubt -DUBT %2 %3 %4 %5 %6 %7

REM --- dequeue with a single dequeue-ing thread ---
call runstep nbq_dequeue nbq_dequeue_full nbq_dequeue_single_thread %2 %3 %4 %5 %6 %7

REM --- dequeue with unbounded number of dequeue-ing threads ---
call runstep nbq_dequeue nbq_dequeue_full nbq_dequeue_ubt -DUBT %2 %3 %4 %5 %6 %7

REM --- enqueue with unbounded number of erroneous enqueue-ing threads ---
REM --- only produce first 1 messages ---
call runstep nonblockq_err1 nonblockq nonblockq_err1_ubt -DUBT -mm 1 %2 %3 %4 %5 %6 %7

REM --- enqueue with unbounded number of erroneous enqueue-ing threads ---
REM --- only produce first 1 messages ---
REM call runstep nonblockq_err2 nonblockq nonblockq_err2_ubt -DUBT -mm 1 %2 %3 %4 %5 %6 %7

REM --- enqueue with unbounded number of enqueue-ing threads over an uninitialized queue ---
REM --- only produce first 1 messages ---
call runstep nbq_enqueue uninitialized nbq_enqueue_uninit_ubt -DUBT -mm 1 %2 %3 %4 %5 %6 %7

REM -------------------------------------------------------------
REM TWO LOCK QUEUE
REM -------------------------------------------------------------

REM --- two-lock-queue with one looping consumer ---
call runstep twolockqn tlq_dequeue twolockqn_single_cns %2 %3 %4 %5 %6 %7

REM --- two-lock-queue with one looping producer ---
call runstep twolockqn tlq_enqueue twolockqn_single_prd %2 %3 %4 %5 %6 %7

REM --- two-lock-queue with ubt looping consumers ---
call runstep twolockqn tlq_dequeue twolockqn_ubt_cns -DUBT %2 %3 %4 %5 %6 %7

REM --- two-lock-queue with ubt looping producers ---
call runstep twolockqn tlq_enqueue twolockqn_ubt_prd -DUBT %2 %3 %4 %5 %6 %7

REM --- two-lock-queue with one looping producer and one looping consumer ---
call runstep twolockqn twolockqn twolockqn_single_prd_single_cns %2 %3 %4 %5 %6 %7

REM --- two-lock-queue with no-loop single producer and single consumer ---
call runstep twolockqn_noloop twolockqn twolockqn_nloop_st_prd_st_cns  %2 %3 %4 %5 %6 %7

REM --- two-lock-queue with changed sync single producer and single consumer ---
call runstep twolockqn_sy twolockqn twolockqn_sy_st_prd_st_cns  %2 %3 %4 %5 %6 %7

REM --- two-lock-queue with changed sync ubt producers and ubt consumers ---
call runstep twolockqn_sy twolockqn twolockqn_sy_ubt_prd_ubt_cns  -DUBT %2 %3 %4 %5 %6 %7

REM --- two-lock-queue with no-loop but ubt looping producers and ubt looping consumers ---
call runstep twolockqn_noloop twolockqn twolockqn_nloop_ubt_prd_ubt_cns -DUBT %2 %3 %4 %5 %6 %7

REM --- two-lock-queue with err1 single producer, single consumer ---
call runstep twolockqn_err1 twolockqn twolockqn_err1_st_prd_st_cns -mm 1 %2 %3 %4 %5 %6 %7

REM --- two-lock-queue with err1 single producer, single consumer ---
call runstep twolockqn_err1 twolockqn twolockqn_err1_ubt_prd_ubt_cns -DUBT -mm 1 %2 %3 %4 %5 %6 %7

REM --- two-lock-queue with ubt looping producers and ubt looping consumers ---
REM call runstep twolockqn twolockqn twolockqn_ubt_prd_ubt_cns -DUBT %2 %3 %4 %5 %6 %7

REM -------------------------------------------------------------
REM LONG RUNNING EXAMPLES
REM -------------------------------------------------------------

REM --- enqueue with a single enqueue-ing thread and a single dequeue-ing thread ---
call runstep nbq_enq_deq nbq_enq_deq nbq_enqueue_st_dequeue_st %2 %3 %4 %5 %6 %7

REM --- enqueue with a single enqueue-ing thread and a single dequeue-ing thread ---
call runstep nbq_enq_deq nbq_enq_deq nbq_enqueue_ubt_dequeue_ubt -DUBT %2 %3 %4 %5 %6 %7

goto end

:delLogs
del *.log
goto start

:end
