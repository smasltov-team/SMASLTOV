// tlq_properties.tvm
// properties to be verified
// $Id: tlq_properties.tvm 1848 2007-11-01 14:15:07Z rumster $

#define CONNECTED_FOCUS
#define CONNECTED_PRE A(t) !at[ld_6a](t) & E(v_t) r_by[tail](v_t) \ 
                & A(v) r_by[tail](v) -> !rg[head,n](v) \
                & A(v) r_by[head](v) -> !rg[tail,n](v)  
#define CONNECTED_MESSAGE "queue list connectedness may be violated"

#define INSERTLAST_FOCUS
#define INSERTLAST_PRE E(t_i,v_i,v_t) \
    at[li_4](t_i) & rv[x_i](t_i,v_i) & rg[head,n](v_i) & r_by[tail](v_t) & !rv[next](v_t,v_i)
#define INSERTLAST_MESSAGE "insert-last property may be violated"

#define DELETEFIRST_FOCUS
#define DELETEFIRST_PRE E(t_d,v_d,v_h) \
    at[ld_7](t_d) & rv[node](t_d,v_d) & r_by[head](v_h) & !rv[next](v_d,v_h)
#define DELETEFIRST_MESSAGE "delete-first property may be violated"

#define HEADFIRST_FOCUS
#define HEADFIRST_PRE E(td,ph,h) ((at[ld_7](td) | at[ld_9](td)) & !r_by[node](ph) \
                            & r_by[head](h) & rv[next](ph,h))
#define HEADFIRST_MESSAGE "head-is-always-first property may be violated"

#define TAILLAST_FOCUS
#define TAILLAST_PRE E(pt,t) r_by[tail](t) & rv[next](t,pt)
#define TAILLAST_MESSAGE "tail-is-last property may be violated"

// "node inserted to queue (enq only)"

/********
///
LEAK_PRE E(tad,tai,q) at[li_end](tai) & at[ld_end](tad) & rv[this](tai,q) \
                         & E(x)is_lock(x) &!rv[headLock](q,x) & !rv[tailLock](q,x) & !r_by[this](x) \
                         & !rg[head,n](x) \
                         & !(E(tp) rt[x_d,n](tp,x) | rt[x_i,n](tp,x)) \ 
                         & !r_by[node](x)
                         
////#define LEAK_FOCUS { E(y) rv[x_i](t,y) }
LEAK_MESSAGE "item may be lost"
***********/

%action verifyProperty() {
    %t "verifyProperty"
    %p  !property_occured()
    #ifdef CONNECTED_PRE
    %message (CONNECTED_PRE) -> CONNECTED_MESSAGE
    #endif
    #ifdef INSERTLAST_PRE
    %message (INSERTLAST_PRE) -> INSERTLAST_MESSAGE
    #endif
    #ifdef DELETEFIRST_PRE
    %message (DELETEFIRST_PRE) -> DELETEFIRST_MESSAGE
    #endif
    #ifdef HEADFIRST_PRE
    %message (HEADFIRST_PRE) -> HEADFIRST_MESSAGE
    #endif
    #ifdef ENQ_ONLY_PRE
    %message (ENQ_ONLY_PRE) -> ENQ_ONLY_MESSAGE
    #endif
    #ifdef LEAK_PRE
    %message (LEAK_PRE) -> LEAK_MESSAGE
    #endif
    }
