/******************************************************************
* shape_stat.tvm
* statements for shape analysis
*
* assumptions:
* 1. thread objects can not be referenced by any other object (they are like globals)
* 2. the list is acyclic
*
******************************************************************/

/*******************
* isNull(ref)
* (ref == null)
********************/
%action isNull(ref) {
    %t ref + "== null"  
    %f { runnable(tr) & rv[ref](tr,o_ref) }
    %p !E(o_ref) rv[ref](tr,o_ref)
    #ifdef RECORD_RW
        %message (E(t_w) (t_w != tr) & |/{ wrat[lw,ref](tr) & prev[lw](t_w) : lw in Labels}) -> 
            "thread " + tr + " may RW interfere on " + ref + " at " + sl 
    {    

            reading[sl,ref](t_1,t_1) = reading[sl,ref](t_1,t_1) | (t_1 == tr)
            rdat[sl,ref](o) = rdat[sl,ref](o) | (o == tr)

    }
    #endif
}

/*******************
* isNotNull(ref)
* (ref != null)
********************/
%action isNotNull(ref) {
    %t ref + "!= null"  
    %f { runnable(tr) & rv[ref](tr,o_ref) }
    %p E(o_ref) rv[ref](tr,o_ref)
    #ifdef RECORD_RW
        %message (E(t_w) (t_w != tr) & |/{ wrat[lw,ref](tr) & prev[lw](t_w) : lw in Labels}) -> 
            "thread " + tr + " may RW interfere on " + ref + " at " + sl 

    { 
            reading[sl,ref](t_1,t_1) = reading[sl,ref](t_1,t_1) | (t_1 == tr)
            rdat[sl,ref](o) = rdat[sl,ref](o) | (o == tr)
      
    }
    #endif
}


/****
* assignNull(fld) (field or reference)
****/
%action assignNull(fld) {
    %t tr + "." + fld + " = null"
    %f { runnable(tr) & rv[fld](tr,dst) }
    #ifdef RECORD_RW
        %message (E(t_r) (t_r != tr) & |/{ rdat[lr,fld](tr) & at[lr](t_r) : lr in Labels}) -> 
            "thread " + tr + " may RW interfere on " + fld + " at " + sl
    #endif
    {
        rv[fld](t_1,o) = rv[fld](t_1,o) & (t_1 != tr)
                    
        #ifdef RECORD_RW
            writing[sl,fld](t_1,t_1) = writing[sl,fld](t_1,t_1) | (t_1 == tr)
            wrat[sl,fld](o) = wrat[sl,fld](o) | (o == tr)
        #endif
    }
}

/*******************
* assignReference(ref_1,ref_2)
* [ref_1 = ref_2]
********************/
%action assignReference(ref_1, ref_2) {
    %t ref_1 + "=" + ref_2
    %f { runnable(tr) & rv[ref_2](tr,o_t) }
    #ifdef RECORD_RW
        %message (E(tw) (tw != tr) & |/{ wrat[lw,ref_2](tr) & prev[lw](tw) : lw in Labels}) ->
            "thread " + tr + " may RW interfere on " + ref_2 + " at " + sl
        %message (E(t_r) (t_r != tr) & |/{ rdat[lr,ref_1](tr) & at[lr](t_r) : lr in Labels}) -> 
            "thread " + tr + " may RW interfere on " + ref_1 + " at " + sl
    #endif
    {     
        rv[ref_1](t_1,o_1) = rv[ref_1](t_1,o_1) | ((t_1 == tr) & rv[ref_2](tr,o_1))
                          
        #ifdef RECORD_RW
            writing[sl,ref_1](t_1,t_1) = writing[sl,ref_1](t_1,t_1) | (t_1 == tr)
            wrat[sl,ref_1](o) = wrat[sl,ref_1](o) | (o == tr)
            reading[sl,ref_2](t_1,t_1) = reading[sl,ref_2](t_1,t_1) | (t_1 == tr)
            rdat[sl,ref_2](o) = rdat[sl,ref_2](o) | (o == tr)
        #endif
    }
}



/*******************
* assignNew(ref)
* [ref = new T()]
* note - the type is currently ignored.
********************/
%action assignNew(ref) {
    %t ref + "= new T()" 
    #ifdef RECORD_RW
        %message (E(t_r) (t_r != tr) & |/{ rdat[lr,ref](tr) & at[lr](t_r) : lr in Labels} ) -> 
            "thread " + tr + " may RW interfere on " + ref 
    #endif
    %new 
    {
        rv[ref](t_1,o_t) = rv[ref](t_1,o_t) | ((t_1 ==tr) & isNew(o_t))
        is_lock(o_1) = is_lock(o_1) | isNew(o_1)

        #ifdef RBY
        r_by[ref](o_1) = r_by[ref](o_1) | isNew(o_1)
        #endif
        
        bn(o_1,o_2) = bn(o_1,o_2) | (isNew(o_1) & isNew(o_2))
        rt[ref,n](o_1) = rt[ref,n](o_1) | isNew(o_1)
        
        has[ref](t_1) = has[ref](t_1) | (t_1 == tr)
        
        #ifdef RECORD_RW
            writing[sl,ref](t_1,t_1) = writing[sl,ref](t_1,t_1) | (t_1 == tr)
            wrat[sl,ref](o) = wrat[sl,ref](o) | (o == tr)
        #endif
    }
} 

%action freeNode(ref) {
    %t "free " + ref
    %f { runnable(tr) & rv[ref](tr,o) }
    {
        #ifdef RBY
        r_by[ref](o_1) = r_by[ref](o_1) & !rv[ref](tr,o_1)
        
        r_by[next](o_1) = r_by[next](o_1) & !(E(o_d) rv[ref](tr,o_d) & rv[next](o_d,o_1))
        
        #endif
        
        has[ref](t_1) = has[ref](t_1) & (t_1 != tr)
        bn(o_1,o_2) = bn(o_1,o_2) & !(rv[ref](tr,o_1) | rv[ref](tr,o_2))
    }
    %retain !rv[ref](tr,o)
}


/***
* assignFromField(ref,obj,fld)
* ref = obj.fld
***/
%action assignFromField(ref,obj,fld) {
    %t ref + " = " + obj + "." + fld 
    %f { runnable(tr) & rv[obj](tr,o_t) & rv[fld](o_t,dst) }
    #ifdef RECORD_RW
        %message (E(tw) (tw != tr) & |/{ wrat[lw,fld](o_t) & prev[lw](tw) : lw in Labels} ) -> 
                       "thread " + tr + " may RW interfere on " + obj 
        %message (E(t_r) (t_r != tr) & |/{ rdat[lr,ref](tr) & prev[lr](t_r) : lr in Labels} ) -> 
                        "thread " + tr + " may RW interfere on " + ref 
    #endif
    {   
        rv[ref](t_1,o_1) = rv[ref](t_1,o_1) | ((t_1 == tr) & E(o_t) rv[obj](tr,o_t) & rv[fld](o_t,o_1))
        
        #ifdef RECORD_RW
            writing[sl,ref](t_1,t_1) = writing[sl,ref](t_1,t_1) | (t_1 == tr)
            wrat[sl,ref](o) = wrat[sl,ref](o) | (o == tr)
            reading[sl,fld](t_1,o) = reading[sl,fld](t_1,o) | ((t_1 == tr) & (o == o_t))
            rdat[sl,fld](o) = rdat[sl,fld](o) | (o == o_t)
        #endif
    }
}



/***
* SelectNextField(ref,obj)
* ref = obj.next
***/
%action selectNextField(ref,obj) {
    %t ref + " = " + obj + ".next"
    %f { runnable(tr) & rv[obj](tr,o_t) & rv[next](o_t,dst) }
    %message (!(E(o_t) rv[obj](tr,o_t))) -> "possible null dereference of " + obj
    #ifdef RECORD_RW
        %message (E(tw) (tw != tr) & |/{ wrat[lw,next](o_t) & prev[lw](tw) : lw in Labels} ) -> 
                       "thread " + tr + " may interfere on " + obj + " at " + sl
        %message (E(t_r) (t_r != tr) & |/{ rdat[lr,ref](tr) & prev[lr](t_r) : lr in Labels} ) -> 
                        "thread " + tr + " may interfere on " + ref + " at " + sl
    #endif
    {   
        rv[ref](t_1,o_1) = rv[ref](t_1,o_1) | 
                ((t_1 == tr) & (E(o_t) rv[obj](tr,o_t) & rv[next](o_t,o_1)))
                        
        #ifdef RECORD_RW
            writing[sl,ref](t_1,t_1) = writing[sl,ref](t_1,t_1) | (t_1 == tr)
            wrat[sl,ref](o) = wrat[sl,ref](o) | (o == tr)
            reading[sl,next](t_1,o) = reading[sl,next](t_1,o) | ((t_1 == tr) & (o == o_t))
            rdat[sl,next](o) = rdat[sl,next](o) | (o == o_t)
        #endif

    }
}

/***
* SelectFieldNext(ref,obj,fld)
* ref = obj.fld.next
***/
%action selectFieldNext(ref,obj,fld) {
    %t ref + " = " + obj + "." + fld + ".next"
    %f { runnable(tr) & rv[obj](tr,o_t) & rv[fld](o_t,o_f) & rv[next](o_f,dst) }
    %message (!(E(o_t,o_f) rv[obj](tr,o_t) & rv[fld](o_t,o_f))) -> "possible null dereference"
    #ifdef RECORD_RW
        %message (E(tw) (tw != tr) & |/{ wrat[lw,next](o_t) & prev[lw](tw) : lw in Labels} ) -> 
                       "thread " + tr + " may interfere on " + obj + " at " + sl
        %message (E(t_r) (t_r != tr) & |/{ rdat[lr,ref](tr) & prev[lr](t_r) : lr in Labels} ) -> 
                        "thread " + tr + " may interfere on " + ref + " at " + sl
    #endif
    {   
        rv[ref](t_1,o_1) = rv[ref](t_1,o_1) |
            ((t_1 == tr) & (E(o_t,o_f) rv[obj](tr,o_t) & rv[fld](o_t,o_f) & rv[next](o_f,o_1)))
            
        #ifdef RECORD_RW
            writing[sl,ref](t_1,t_1) = writing[sl,ref](t_1,t_1) | (t_1 == tr)
            wrat[sl,ref](o) = wrat[sl,ref](o) | (o == tr)
            reading[sl,next](t_1,o) = reading[sl,next](t_1,o) | ((t_1 == tr) & (o == o_t))
            rdat[sl,next](o) = rdat[sl,next](o) | (o == o_t)
        #endif

    }
}



/***
* updateNextField(obj,ref)
* obj.next = ref
***/
%action updateNextField(obj,ref) {
    %t obj + ".next =" + ref
    %f { runnable(tr) & rv[obj](tr,o_t) & rv[ref](tr,dst) }
    #ifdef RECORD_RW
        %message (E(t_r) (t_r != tr) & |/{ rdat[lr,next](o_t) & prev[lr](t_r) : lr in Labels} ) -> 
            "thread " + tr + " may interfere on " + obj + " at " + sl
        %message (E(tw) (tw != tr) & |/{ wrat[lw,ref](tr) & prev[lw](tw) : lw in Labels} ) -> 
            "thread " + tr + " may interfere on " + ref + " at " + sl
    #endif
    {
        
        rv[next](o_s,o_d) = rv[next](o_s,o_d) | (rv[obj](tr,o_s) & rv[ref](tr,o_d))
    
        #ifdef RECORD_RW
            writing[sl,next](t_1,o) = writing[sl,next](t_1,o) | ((t_1 == tr) & (o == o_t))
            wrat[sl,next](o) = wrat[sl,next](o) | (o == o_t)
            
            reading[sl,ref](t_1,t_1) = reading[sl,ref](t_1,t_1) | (t_1 == tr)
            rdat[sl,ref](o) = rdat[sl,ref](o) | (o == tr)
        #endif
    }   
}


/***
* assignField(obj,fld,ref)
* obj.fld = ref
***/
%action assignField(obj,fld,ref) {
    %t obj + "." + fld + "=" + ref
    %f { runnable(tr) & rv[obj](tr,o_t) & rv[ref](tr,dst) }
    %message (!(E(o_t) rv[obj](tr,o_t))) -> "possible null dereference of " + obj
    #ifdef RECORD_RW
        %message (E(t_r) (t_r != tr) & |/{ rdat[lr,fld](o_t) & prev[lr](t_r) : lr in Labels} ) -> 
            "thread " + tr + " may interfere on " + obj 
        %message (E(tw) (tw != tr) & |/{ wrat[lw,ref](tr) & prev[lw](tw) : lw in Labels} ) -> 
            "thread " + tr + " may interfere on " + ref 
    #endif
    {
        rv[fld](o_s,o_d) = rv[fld](o_s,o_d) | (rv[obj](tr,o_s) & rv[ref](tr,o_d))
   
        #ifdef RECORD_RW
            writing[sl,fld](t_1,o) = writing[sl,fld](t_1,o) | ((t_1 == tr) & (o == o_t))
            wrat[sl,fld](o) = wrat[sl,fld](o) | (o == o_t)
            
            reading[sl,ref](t_1,t_1) = reading[sl,ref](t_1,t_1) | (t_1 == tr)
            rdat[sl,ref](o) = rdat[sl,ref](o) | (o == tr)
        #endif
    }   
}

/***
* assignFieldNull(obj,fld)
* obj.fld = null
***/
%action assignFieldNull(obj,fld) {
    %t obj + "." + fld + "= null" 
    %f { runnable(tr) & rv[obj](tr,o_t) }
    %message (!E(o_t) rv[obj](tr,o_t)) -> "Internal error - possible null dereference"
    #ifdef RECORD_RW
        %message (E(t_r) (t_r != tr) & |/{ rdat[lr,fld](o_t) & prev[lr](t_r) : lr in Labels} ) -> 
            "thread " + tr + " may interfere on " + obj 
        %message (E(tw) (tw != tr) & |/{ wrat[lw,ref](tr) & prev[lw](tw) : lw in Labels} ) -> 
            "thread " + tr + " may interfere on " + ref 
    #endif
    {    
        rv[fld](o_s,o_d) = rv[fld](o_s,o_d) & !rv[obj](tr,o_s) 

        #ifdef RECORD_RW
            writing[sl,fld](t_1,o) = writing[sl,fld](t_1,o) | ((t_1 == tr) & (o == o_t))
            wrat[sl,fld](o) = wrat[sl,fld](o) | (o == o_t)
            
            reading[sl,ref](t_1,t_1) = reading[sl,ref](t_1,t_1) | (t_1 == tr)
            rdat[sl,ref](o) = rdat[sl,ref](o) | (o == tr)
        #endif
    }   
}


/***
* updateFieldNext(obj,fld,ref)
* obj.fld.next = ref
***/
%action updateFieldNext(obj,fld,ref) {
    %t obj + "." + fld + ".next=" + ref
    %f { runnable(tr) & rv[obj](tr,o_t) & rv[fld](o_t,o_1) & rv[ref](tr,dst) }
    #ifdef RECORD_RW
        %message (E(t_r) (t_r != tr) & |/{ rdat[lr,fld](o_t) & prev[lr](t_r) : lr in Labels} ) -> 
            "thread " + tr + " may interfere on " + obj 
        %message (E(tw) (tw != tr) & |/{ wrat[lw,ref](tr) & prev[lw](tw) : lw in Labels} ) -> 
            "thread " + tr + " may interfere on " + ref 
    #endif
    {
    
        rv[next](o_1,o_2) = rv[next](o_1,o_2) | 
            (E(o_t) rv[obj](tr,o_t) & rv[fld](o_t,o_1) & rv[ref](tr,o_2))

        #ifdef RECORD_RW
            writing[sl,fld](t_1,o) = writing[sl,fld](t_1,o) | ((t_1 == tr) & (o == o_t))
            wrat[sl,fld](o) = wrat[sl,fld](o) | (o == o_t)
            
            reading[sl,ref](t_1,t_1) = reading[sl,ref](t_1,t_1) | (t_1 == tr)
            rdat[sl,ref](o) = rdat[sl,ref](o) | (o == tr)
        #endif
    }   
}

    
/***
* assignNextFieldNull(obj)
* obj.next = null
***/

%action assignNextFieldNull(obj) {
    %t obj + ".next = null"   
    %f { runnable(tr) & rv[obj](tr,o_t) & rv[next](o_t,dst) }
    #ifdef RECORD_RW
        %message (E(t_r) (t_r != tr) & |/{ rdat[lr,next](o_t) & at[lr](t_r) : lr in Labels}) -> 
            "thread " + tr + " may interfere "  + obj + " at " + sl
    #endif
    {
    rv[next](o_s,o_d) = rv[next](o_s,o_d) & !rv[obj](tr,o_s)
    
    #ifdef RECORD_RW
            writing[sl,next](t_1,o) = writing[sl,next](t_1,o) | ((t_1 == tr) & (o == o_t))
            wrat[sl,next](o) = wrat[sl,next](o) | (o == o_t)
    #endif    
    }
}
