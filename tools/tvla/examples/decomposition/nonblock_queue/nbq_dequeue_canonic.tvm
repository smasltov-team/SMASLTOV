// nbq_dequeue.tvm
// $Id: nbq_dequeue_canonic.tvm 1848 2007-11-01 14:15:07Z rumster $
// Non Blocking Queue Implementation a-la PODC96 paper

/*********************** Sets ******************************/
%s FieldsAndParameters { this, head, tail, Tail, Head, n, node, next, newCount }

/**************** Predicates **************/

/**************** Core Predicates **************/

foreach (v in FieldsAndParameters) {
    %p rv[v](o_1, o_2) function 
    %p iv[v](o_1, o_2) function
    }

%p is_nat(v)
%p islock(l) 

%p heldby(l, t) 
%p blocked(t, l)

%p zero(v_1) unique
%p successor(v_1,v_2) function invfunction antisymmetric

%p property_occured()

/**************** Instrumentation Predicates **************/

%i is_acquired(l) = islock(l) & E(t) isthread(t) & heldby(l,t) nonabs

foreach (v in FieldsAndParameters) {
    %i r_by[v](o) = E(o_1) rv[v](o_1,o) nonabs
    %i is[v](o) = E(o_1,o_2) o_1 != o_2 & rv[v](o_1,o) & rv[v](o_2,o) nonabs
    %i ivs[v](o) = E(o_1,o_2) o_1 != o_2 & iv[v](o_1,o) & iv[v](o_2,o) nonabs
}

///%i rt[z,successor](v) = E(v_1) zero(v_1) & successor*(v_1,v) nonabs
foreach (f in FieldsAndParameters) {
    %i reach[f](o) = E(t_1,o_1) rv[f](t_1,o_1) & rv[f]*(o_1,o) nonabs
}
%i r[Head,n](o) = E(q,h) rv[Head](q,h) & rv[n]*(h,o) nonabs


// make sure integers have no bound -- throw away structures when end of "sucessor" has been reached
%r E(v) is_nat(v) & !E(v_1) succ(v,v_1) ==> 0

%%
/********************* Actions *******************/
#include "nonblockq_stat.tvm"
#include "nonblockq_properties.tvm"

/**************** Program *********************/

%%

/******************  Threads *******************/

#include "enqueue.tvm"
#include "dequeue.tvm"

%%

/**************  Claims        ****************/
verifyProperty()
