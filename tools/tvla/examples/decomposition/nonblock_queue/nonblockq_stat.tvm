/****************************************************************************************************
* nonblockq_stat.tvm
* $Id: nonblockq_stat.tvm 1848 2007-11-01 14:15:07Z rumster $
* Actions for the nonblockq implementation
****************************************************************************************************/

%action skip() {
    %t "skip ()"
    %p  !property_occured()
}


/***
* newNode(fld)
* allocates a new node and sets fld to reference the newly allocated node
* @param fld - name of a field (from the scheduled thread) to reference the newly allocated node
***/
%action newNode(fld) {
    %t fld + "= new Node()"
    %p !property_occured()
    %new
    {
        rv[fld](v_1,v_2) = rv[fld](v_1,v_2) | (v_1 == tr & isNew(v_2))
        iv[fld](v_1,v_2) = iv[fld](v_1,v_2) | (v_1 == tr & zero(v_2))
        r_by[fld](v_1) = r_by[fld](v_1) | isNew(v_1)
        reach[fld](v_1) = reach[fld](v_1) | isNew(v_1)
        has[fld](t_1) = has[fld](t_1) | (t_1 == tr)
        tn(v_1,v_2) = tn(v_1,v_2) | ( isNew(v_1) & isNew(v_2) )
    }
}

/***
* freeNode(fld)
* deallocates a node
* @param fld - name of a field (from the scheduled thread) to reference the node to be deallocated
***/
%action freeNode(fld) {
    %t "free " + fld
    %f { runnable(tr) & rv[fld](tr,v) }
    %p !property_occured()
    {
        r_by[n](v) = r_by[n](v) & !(E(v_d) rv[fld](tr,v_d) & rv[n](v_d,v))
        reach[n](v) = reach[n](v) & !(E(v_d) rv[fld](tr,v_d) & rv[n](v_d,v))
    }
    %retain !rv[fld](tr,v)
}

/***
* assignField(obj,fld,ref)
* obj.fld = ref
* @param obj - name of a field (from the scheduled thread) that references the object
* @param fld - name of a field (from object) to be updated
* @param ref - name of a field (from the scheduled thread) that references the source object
***/
%action assignField(obj,fld,ref) {
    %t obj + "." + fld + "=" + ref
    %f { runnable(tr) & rv[obj](tr,o_s) & rv[ref](tr,o_t) & iv[ref](tr,cnt) }
    %p !property_occured() & rv[obj](tr,o_s) & rv[ref](tr,o_t)
    {
        rv[fld](v_1,v_2) = rv[fld](v_1,v_2) | (v_1 == o_s & v_2 == o_t)
        iv[fld](v_1,v_2) = iv[fld](v_1,v_2) | (v_1 == o_s & iv[ref](tr,v_2))
        r_by[fld](v_1) = r_by[fld](v_1) | (v_1 == o_t)
    }
}

/***
* assignFieldFromField(obj,fld,ref)
* obj.fld = obj.ref
* @param obj - name of a field (from the scheduled thread) that references the object
* @param fld - name of an object field to be updated
* @param ref - name of an object field to be used as source
***/
%action assignFieldFromField(obj,fld,ref) {
    %t obj + "." + fld + "=" + obj + "." + ref
    %f { runnable(tr) & rv[obj](tr,o_s) & rv[ref](o_s,o_t) & iv[ref](o_s,cnt)}
    %p !property_occured() & rv[obj](tr,o_s) & rv[ref](o_s,o_t)
    {
        rv[fld](v_1,v_2) = rv[fld](v_1,v_2) | (v_1 == o_s & v_2 == o_t)
        iv[fld](v_1,v_2) = iv[fld](v_1,v_2) | (v_1 == o_s & iv[ref](o_s,v_2))
        r_by[fld](v_1) = r_by[fld](v_1) | (v_1 == o_t)
    }
}

/***
* assignFromField(fld,obj,ref)
* fld = obj.ref
* @param fld - name of a field (of scheduled thread) to be updated
* @param obj - name of a field (from the scheduled thread) that references the object
* @param ref - name of an object field to be used as source
***/
%action assignFromField(fld,obj,ref) {
    %t fld + "=" + obj + "." + ref
    %f { runnable(tr) & rv[obj](tr,o_s) & rv[ref](o_s,o_t) & iv[ref](o_s,cnt) }
    %p !property_occured()
    %message (!E(o_s) rv[obj](tr,o_s)) -> "obj " + obj + " is null"
    {
        rv[fld](v_1,v_2) = rv[fld](v_1,v_2) | (v_1 == tr & E(o_s) rv[obj](tr,o_s) & rv[ref](o_s,v_2))
        iv[fld](v_1,v_2) = iv[fld](v_1,v_2) | (v_1 == tr & E(o_s) rv[obj](tr,o_s) & iv[ref](o_s,v_2))
        r_by[fld](v_1) = r_by[fld](v_1) | (E(o_s) rv[obj](tr,o_s) & rv[ref](o_s,v_1))
    }
}

/***
* assignFieldNull(obj,fld)
* obj.fld = null
* @param obj - name of a field (from the scheduled thread) that references the object
* @param fld - name of a field (of scheduled thread) to be set to null
***/
%action assignFieldNull(obj,fld) {
    %t obj + "." + fld + "= null"
    %f { runnable(tr) & rv[obj](tr,o_s) & iv[fld](o_s,cnt) }
    %p !property_occured() & rv[obj](tr,o_s)
    {
        rv[fld](v_1,v_2) = rv[fld](v_1,v_2) & (v_1 != o_s)
        iv[fld](v_1,v_2) = iv[fld](v_1,v_2) & (v_1 != o_s)
    }
}

%action assignNull(fld) {
    %t tr + "." + fld + " = null"
    %f { runnable(tr) & rv[fld](tr,dst) & iv[fld](tr,cnt) }
    %p !property_occured()
    {
        rv[fld](t_1,o) = rv[fld](t_1,o) & (t_1 != tr)
        iv[fld](t_1,o) = iv[fld](t_1,o) & (t_1 != tr)
    }
}


/****************************************************************************************************
* Conditions
****************************************************************************************************/

%action isFieldEqual(fld,obj,ref) {
    %t fld + "==" + obj + "." + ref
    %f { runnable(tr) & rv[fld](tr,o_f) & rv[obj](tr,o_s) & rv[ref](o_s,o_t) & iv[fld](tr,cnt_f) & iv[ref](o_s,cnt_o_s) }
    %p !property_occured() & A(o_t) (rv[fld](tr,o_t) <-> (E(o_s) rv[obj](tr,o_s) & rv[ref](o_s,o_t)))
        & A(cnt_t) (iv[fld](tr,cnt_t) <-> (E(o_s) rv[obj](tr,o_s) & iv[ref](o_s,cnt_t)))
    %message (!E(o_s) rv[obj](tr,o_s)) -> "obj is null"
}

%action isFieldNotEqual(fld,obj,ref) {
    %t fld + "!=" + obj + "." + ref
    %f { runnable(tr) & rv[fld](tr,o_f) & rv[obj](tr,o_s) & rv[ref](o_s,o_t) }
    %p !property_occured() &
        !(
            A(o_t) (rv[fld](tr,o_t) <-> (E(o_s) rv[obj](tr,o_s) & rv[ref](o_s,o_t)))
            & A(cnt_t) (iv[fld](tr,cnt_t) <-> (E(o_s) rv[obj](tr,o_s) & iv[ref](o_s,cnt_t)))
        )
    %message (!E(o_s) rv[obj](tr,o_s)) -> "obj is null"
}

%action isFieldPtrEqual(fld1,fld2) {
    %t fld1 + " == " + fld2
    %f {runnable(tr) & rv[fld1](tr,o_f1) & rv[fld2](tr,o_f2) }
    %p !property_occured() & A(o_t) (rv[fld1](tr,o_t) <-> rv[fld2](tr,o_t))
}

%action isFieldPtrNotEqual(fld1,fld2) {
    %t fld1 + " == " + fld2
    %f {runnable(tr) & rv[fld1](tr,o_f1) & rv[fld2](tr,o_f2) }
    %p !property_occured() & !(A(o_t) (rv[fld1](tr,o_t) <-> rv[fld2](tr,o_t)))
}


%action isFieldNull(fld) {
    %t fld + "== null"
    %f { runnable(tr) & rv[fld](tr,o_f) }
    %p !property_occured() & !E(o_f) rv[fld](tr,o_f)
}

%action isFieldNotNull(fld) {
    %t fld + "!= null"
    %f { runnable(tr) & rv[fld](tr,o_f) }
    %p !property_occured() & E(o_f) rv[fld](tr,o_f)
}

/****************************************************************************************************
* Special Operations
****************************************************************************************************/


/***
* succesfullCAS(obj,ref,fld,newVal,cnt)
* succesfull compare-and-swap operation
* obj.ref == expected valued provided in fld, obj.ref is updated to <newVal,cnt>
* @param obj - name of a field (from the scheduled thread) that references the object
* @param ref - name of an object field to be updated after being compared to expected value
* @param fld - name of a field (of scheduled thread) containing the expected value
* @param newVal - name of a field (of scheduled thread) with the new value for obj.ref
* @param cnt - name of field (of scheduled thread) with the new value for obj.ref counter
***/
%action succesfullCAS(obj,ref,fld,newVal,cnt) {
    %t "succCAS(" + obj + "," + ref + "," + fld + "," + newVal + "," + cnt
    %f { runnable(tr) & rv[obj](tr,o_s) & rv[ref](o_s,o_t) & rv[fld](tr,o_f) & rv[newVal](tr,o_nv) }
    %p A(o_t) ((E(o_s) rv[obj](tr,o_s) & rv[ref](o_s,o_t)) <-> rv[fld](tr,o_t))
    {
        rv[ref](v_1,v_2) = (rv[ref](v_1,v_2) & !rv[obj](tr,v_1))
            | (rv[obj](tr,v_1) & rv[newVal](tr,v_2))
        iv[ref](v_1,v_2) = (iv[ref](v_1,v_2) & !rv[obj](tr,v_1))
            | (rv[obj](tr,v_1) & rv[cnt](tr,v_2))
    }
}
/***
* failedCAS(obj,ref,fld,newVal,cnt)
* failed compare-and-swap operation
* obj.ref != expected valued provided in fld, obj.ref is therefore not updated
* @param obj - name of a field (from the scheduled thread) that references the object
* @param ref - name of an object field to be updated after being compared to expected value
* @param fld - name of a field (of scheduled thread) containing the expected value
* @param newVal - name of a field (of scheduled thread) with the new value for obj.ref
* @param cnt - name of field (of scheduled thread) with the new value for obj.ref counter
***/
%action failedCAS(obj,ref,fld,newVal,cnt) {
    %t "failCAS(" + obj + "," + ref + "," + fld + "," + newVal + "," + cnt
    %f { runnable(tr) & rv[obj](tr,o_s) & rv[ref](o_s,o_t) & rv[fld](tr,o_f) & rv[newVal](tr,o_nv) }
    %p !(A(o_t) ((E(o_s) rv[obj](tr,o_s) & rv[ref](o_s,o_t)) <-> rv[fld](tr,o_t)))
}


%action getFieldSuccessor(ref,fld) {
    %t  ref + " = " + fld + ".succ"
    %f { runnable(tr) & iv[fld](tr,cnt) & succ(cnt,dst) }
    %p !property_occured()
    {
        rv[ref](t_1,o_1) = rv[ref](t_1,o_1)
            | ((t_1 == tr) & (E(cnt) iv[fld](tr,cnt) & succ(cnt,o_1)))
            | ((t_1 == tr) & (!E(cnt) iv[fld](tr,cnt)) & zero(o_1))
        r_by[ref](o_1) = r_by[ref](o_1) | (E(cnt) iv[fld](tr,cnt) & succ(cnt,o_1))
            | ((!E(cnt) iv[fld](tr,cnt)) & zero(o_1))
    }
}

//%action getSuccessor(ref,obj,fld) {
//    %t  ref + " = " + obj + "." +fld + ".succ"
//    %f { runnable(tr) & rv[obj](tr,o_t) & rv[fld](o_t,cnt) & succ(cnt,dst) }
//    %p !property_occured() & rv[obj](tr,o_t) & rv[fld](o_t,cnt) & succ(cnt,dst)
//    {
//        rv[ref](t_1,o_1) = rv[ref](t_1,o_1) | ((t_1 == tr) & (o_1 == dst))
//        r_by[ref](o_1) = r_by[ref](o_1) | (o_1 == dst)
//    }
//}


/****************************************************************************************************
* Thread Operations
****************************************************************************************************/

%action allocateNewProducer(fld) {
    %t "allocate new producer"
    %f { runnable(tr) & rv[fld](tr,o_t) }
    %message (!(E(o_t) rv[fld](tr,o_t)))-> "possible null pointer exception"
    %new
    {
        isthread(v) = isthread(v) | isNew(v)
        ready(v) = ready(v) | isNew(v)
        at[e1](v) = at[e1](v) | isNew(v)
        rv[this](v_1,v_2) = rv[this](v_1,v_2) | (isNew(v_1) & rv[fld](tr,v_2))
    }
}

%action start(fld) {
    %t fld + ".start()"
    %f { runnable(tr) & rv[fld](tr,o_t) }
    %p !property_occured() & rv[fld](tr,o_t)
    %message !isthread(o_t) -> "UnsupportedOperationException (cannot start non-thread object)"
    {
        ready(v_1) = ready(v_1) | (v_1 == o_t)
    }
}

/***
* succLock(fld)
* succesful lock operation
* @param fld - name of a field (from the scheduled thread) that refereneces the lock
***/
%action succLock(fld) {
    %t "SuccesfulLock(" + fld + ")"
    %f  { is_acquired(l), runnable(tr) & rv[fld](tr,l) }
    %p  !property_occured() & rv[fld](tr,l) & (!is_acquired(l) | heldby(l, tr))
    {
        heldby(l_1, t_1) = heldby(l_1, t_1) | (t_1 == tr & l_1 == l)
        blocked(t_1,l_1) = blocked(t_1,l_1) & ((t_1 != tr) | (l_1 != l))
        is_acquired(l_1) = is_acquired(l_1) | (l_1 == l)
   }
}

/***
* blockLock(fld)
* blocking lock operation
* @param fld - name of a field (from the scheduled thread) that refereneces the lock
***/
%action blockLock(fld) {
    %t "blockLock (" + fld + ")"
    %f { runnable(tr) & rv[fld](tr,l), is_acquired(l) }
    %p  !property_occured() & rv[fld](tr,l) & is_acquired(l) & !heldby(l,tr)
    {
        blocked(t_1, l_1) =
            (blocked(t_1, l_1) &  (t_1 != tr | l_1 != l)) |
            (t_1 == tr & l_1 == l)
   }
}

/***
* unlock(fld)
* unlock operation
* @param fld - name of a field (from the scheduled thread) that refereneces the lock
***/
%action unlock(fld) {
    %t "unLock(" + fld + ")"
    %f { is_acquired(l), runnable(tr) & rv[fld](tr,l) }
    %p !property_occured() & rv[fld](tr,l)
    {
        heldby(l_1, t_1) = heldby(l_1, t_1) &  (t_1 != tr | l_1 != l)
        is_acquired(l_1) = is_acquired(l_1) & (l_1 != l)
   }
}
