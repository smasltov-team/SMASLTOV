/***********************************************************
* con_macro.tvp
* concurrency support mcaros.
***********************************************************/

/**************** Macro Definitions **************/

/***************************************
* UNSCHEDULE
* ---------------------
* The unschedule operation makes other threads that are not currently running possible candidates
* to be scheduled for running. It does so by setting runnable to 1/2.
* If wait/notify is enabled, only non-waiting threads should be marked as possibly runnable.
* The predicate tw(t) is used to filter-out threads that are waiting.
*
* If wait/notify is disabled, we use a lighter version that assigns runnable(t) = 1/2 
* to all threads in the system.
* 
* UNSCHEDULE_AND_WAIT sets the runnable to 0 for the currently running thread t.
* this macro is only used by the wait() method.
***************************************/
#ifdef WAIT_NOTIFY
    
    #define UNSCHEDULE runnable(t_r) = isthread(t_r) & !tw(t_r) & 1/2
    #define UNSCHEDULE_AND_WAIT runnable(t_r) = isthread(t_r) & (t_r != t) & 1/2
#endif

// possibly redefines UNSCHEDULE
#ifdef THREAD_STATE
    #define UNSCHEDULE runnable(t_r) = isthread(t_r) & ts_running(t_r) & 1/2
    #define UNSCHEDULE_AND_START runnable(t_r) = isthread(t_r) & (ts_running(t_r) | (t_r == thread))& 1/2
#endif


//else
#ifndef WAIT_NOTIFY
#ifndef THREAD_STATE

    #define UNSCHEDULE runnable(t_r) = isthread(t_r) & 1/2

#endif
#endif
