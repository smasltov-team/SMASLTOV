/***********************************************************
* stack_pred.tvm
***********************************************************/

%p tr_scheduled(v) unique
foreach (loc in locations) {
  %p at[loc](thread)
  %r at[loc](v) ==> isthread(v)
  %r !isthread(v) ==> !at[loc](v)
}

foreach (tname in StaticThreadNames) {
  %p tname(v) unique
}

/**********************************************/
/*************** Core Predicates **************/
//pointer field fld of object o_1 points to object o_2.
foreach (fld in NextFields) {
    %p rv[fld](o_1, o_2) function
	%r isthread(v) ==> !rv[fld](v, w)
	%r isthread(w) ==> !rv[fld](v, w)
	%r E(w) rv[fld](v, w) ==> !isthread(v)
	%r E(v) rv[fld](v, w) ==> !isthread(w)
}

//referenced-by predicate for global variables (fields of stack ds)
foreach (fld in StackFields) {
    %p r_by[fld](o) unique pointer
	%r isthread(v) ==> !r_by[fld](v)
	%r r_by[fld](v) ==> !isthread(v)
}

//referenced-by prediacte for thread-local variables
foreach (nm in StaticThreadNames) {
    foreach (fld in LocalFields) {
        %p r_by[fld,nm](o) unique pointer
		%r isthread(v) ==> !r_by[fld,nm](v)
		%r r_by[fld,nm](v) ==> !isthread(v)
    }
}

//node v has different successors in the two heaps
%p dnext(v)

//node v appears only in the concurrent heap or only in the sequential heap.
%p dnode(v)


/*********************************************************/
/*************** Instrumentation Predicates **************/

%i rest(v) = !isthread(v) & !dnext(v) & !dnode(v)

foreach (var in LocalFields) {
    %p is[var](v) nonabs 
/*
#if GNUM > 1
	%i is[var](v) = |/{ |/{ r_by[var, tn1](v) & r_by[var, tn2](v) : tn2 in StaticThreadNames-{tn1} } : tn1 in StaticThreadNames } nonabs
#else
	%i is[var](v) = 0 & v != v
#endif
*/	
	foreach (tn1 in StaticThreadNames) {
	  foreach (tn2 in StaticThreadNames - {tn1}) {
		%r !is[var](v) & r_by[var, tn1](v) ==> !r_by[var, tn2](v)
	  }
	}
}

/*********************************************************/
/*************** Consistency Rules **************/
