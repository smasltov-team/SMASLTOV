/***********************************************************
* stack_pred.tvm
***********************************************************/

%p tr_scheduled(v) unique
foreach (loc in locations) {
#ifdef NODECOMP
  %p at[loc](thread) nonabs
#else
  %p at[loc](thread)
#endif
  %r at[loc](v) ==> isthread(v)
  %r !isthread(v) ==> !at[loc](v)
}

#ifdef NODECOMP
foreach (loc1 in locations) {
foreach (loc2 in locations-{loc1}) {
%r at[loc1](thread) ==> !at[loc2](thread)
}
}
#endif

foreach (tname in Threads) {
  %p tname(v) unique
}

foreach (tn1 in Threads) {
	foreach (tn2 in Threads-{tn1}) {
  		%r tn1(v) ==> !tn2(v)
  	}
}

%p t_(v)

#ifdef NODECOMP
foreach (tn in Threads+{t_}) {
foreach (loc in locations) {
	%i at[loc,tn](v) = tn(v) & at[loc](v) 
}
}
#endif

/**********************************************/
/*************** Core Predicates **************/
//pointer field fld of object o_1 points to object o_2.
foreach (fld in NextFields) {
    %p rv[fld](o_1, o_2) function
	%r isthread(v) ==> !rv[fld](v, w)
	%r isthread(w) ==> !rv[fld](v, w)
	%r E(w) rv[fld](v, w) ==> !isthread(v)
	%r E(v) rv[fld](v, w) ==> !isthread(w)
}

//referenced-by predicate for global variables (fields of stack ds)
foreach (fld in StackFields) {
    %p r_by[fld](o) unique pointer
	%r isthread(v) ==> !r_by[fld](v)
	%r r_by[fld](v) ==> !isthread(v)
}

//referenced-by predicate for thread-local variables
foreach (nm in Threads) {
    foreach (fld in LocalFields) {
        %p r_by[fld,nm](o) unique pointer
		%r isthread(v) ==> !r_by[fld,nm](v)
		%r r_by[fld,nm](v) ==> !isthread(v)
    }
}

foreach (fld in LocalFields) {
    %p r_by[fld,t_](o) 
	%r isthread(v) ==> !r_by[fld,t_](v)
	%r r_by[fld,t_](v) ==> !isthread(v)
}

//node v has different successors in the two heaps
%p dnext(v)

//node v appears only in the concurrent heap or only in the sequential heap.
%p dnode(v)


/*********************************************************/
/*************** Instrumentation Predicates **************/

#ifndef NODECOMP
%i rest(v) = !isthread(v) & !dnext(v) & !dnode(v)
#endif

foreach (var in LocalFields) {
    %p is[var](v) nonabs 
	foreach (tn1 in Threads+{t_}) {
	  foreach (tn2 in (Threads+{t_}) - {tn1}) {
		%r !is[var](v) & r_by[var, tn1](v) ==> !r_by[var, tn2](v)
	  }
	}
}

/*********************************************************/
/*************** Consistency Rules **************/
