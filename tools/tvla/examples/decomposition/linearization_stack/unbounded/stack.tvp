/************************************************************************
 * stack.tvm
 * Treiber's non-blocking stack
 ***********************************************************************/

//#define SANITY

//////////////////////// Names of threads ////////////////////
//// General client
%pset Threads {t1,t2}

//////////////////////////////////////////////////////////////
%s locations { 
    li_1, li_2, li_3, li_4, lis_1, lis_2, lis_3, li_exit, l_dispatch, 
    ld_1, lds_1a, ld_2, ld_3, ld_3b, lds_1, lds_2, lds_3, ld_4, ld_exit 
}

/*********************** Sets ******************************/

// generally, every variable in the concurrent implementation has a corresponding
// sequential variables, unless it doesn't appear in the sequential version.
%s StackFields {Top,Top_seq}

%s LocalFields {x_i,next,top,top_seq} 
%s LocalFieldsAbs {x_i,next} 
%s LocalFieldsNonAbs {top,top_seq}

// local variables for the push procedure
%s PushLocals {x_i,top}
%s OnlyPushLocals {x_i}

// local variables for the pop procedure
%s PopLocals {top,top_seq,next}
%s OnlyPopLocals {top_seq,next}

%s NextFields {n,n_seq}

/**************** Predicates **************/

#include "stack_pred.tvp"

#ifdef NODECOMP
%i true(v) = (1 | v==v)

foreach (tn in Threads) {
  %dname (tn(v) | true(v)) &
    &/{&/{ !r_by[fld,other](v) : fld in LocalFields} & 
    	   !other(v) & 
    	   &/{ !at[loc,other](v) : loc in locations }
    	 : other in (Threads+{t_})-{ tn }} tn
}
#else
%dname (rest(v) | |/{ r_by[fld](v) : fld in StackFields}) &
  (&/{ !at[loc](v) : loc in locations} & 
   &/{&/{ !r_by[fld,tn](v) : fld in LocalFields} & !tn(v) : tn in Threads+{t_}}) rest

foreach (tn in Threads) {
  %dname (tn(v) | |/{ r_by[fld,tn](v) : fld in LocalFields} | |/{ r_by[fld](v) : fld in StackFields}) &
    &/{&/{ !r_by[fld,other](v) : fld in LocalFields} & !other(v) : other in (Threads+{t_})-{ tn }} tn
}
#endif

%%
/********************* Actions *******************/

#include "stack_stat.tvp"

%action schedule(loc) {
  %param trnm in Threads
  %t "schedule " + loc
  %f { tr_scheduled(tr), tr_scheduled(tr) & trnm(tr) & at[loc](tr) }
  %p tr_scheduled(tr) & trnm(tr) & at[loc](tr)  
}

%action unschedule() {
  %t "unschedule"
#ifdef SANITY
  %message (E(v) !(r_by[Top](v) <-> r_by[Top_seq](v)))
  	-> "Top and Top_seq should always be visibly equal"
#endif
  {
    tr_scheduled(tr) = (isthread(tr) ? 1/2 : 0)
  }
}

/**************** Program *********************/

%%

/***********************************************/
/************** Producer Threads ****************/

pre_schedule unschedule() l_ready

/***************** CFG for thread one *********************************/

/* Push() */
/* concurrent */
l_ready schedule(li_1) li_1
l_ready schedule(li_4) li_4
/* atomic { */
li_1 assignNew(li_1, li_2, x_i) li_2
li_2 assignFromGlbField(li_2, li_3, top,Top) li_3
li_3 assignNext_Con(li_3, li_4, x_i,top) pre_schedule
/* } */
/* atomic { */
li_4 FailCAS(li_4, li_2, Top,top,x_i) pre_schedule
li_4 SuccCAS(li_4, lis_1, Top,top,x_i) lis_1  /*commit point*/
/* sequential */
lis_1 assignNew_Seq(lis_1, lis_2, x_i) lis_2
lis_2 assignNextFromField_Seq(lis_2, lis_3, x_i,Top_seq) lis_3
lis_3 assignField(lis_3, li_exit, Top_seq,x_i) li_exit
/* li_corr verifyCorrelation() li_exit */
li_exit Clear_Push(li_exit, l_dispatch) pre_schedule   /*local action - added to atomic block*/
/* } */

/* Pop() */
l_ready schedule(ld_1) ld_1
l_ready schedule(ld_3b) ld_3b
l_ready schedule(ld_3) ld_3
/*atomic { */
ld_1 assignFromGlbField(ld_1, lds_1a, top,Top) lds_1a           /*first commit point*/
lds_1a assignFromGlbField(lds_1a, ld_2, top_seq,Top_seq) ld_2   /*"atomic action"*/
ld_2 isNull(ld_2, ld_4, top) pre_schedule       /*local action - added to atomic block*/
ld_2 isNotNull(ld_2, ld_3b, top) pre_schedule   /*local action - added to atomic block*/
/*} */
ld_3b assignFromNextField(ld_3b, ld_3, next,top) pre_schedule
/*atomic { */
ld_3 FailCAS(ld_3, ld_1, Top,top,next) pre_schedule
ld_3 SuccCAS(ld_3, lds_1, Top,top,next) lds_1      /*second commit point*/
/* sequential */
lds_1 assignFromGlbField(lds_1, lds_2, top_seq,Top_seq) lds_2
lds_2 isNull(lds_2, ld_4, top_seq) ld_4
lds_2 isNotNull(lds_2, lds_3, top_seq) lds_3
lds_3 assignNextToField_Seq(lds_3, ld_4, Top_seq,top_seq) ld_4
/* ld_corr verifyCorrelation() ld_4 */
ld_4 verifySamePopRes(ld_4, ld_exit) ld_exit   /*lin test, local action added to block*/
ld_exit Clear_Pop(ld_exit, l_dispatch) pre_schedule /*local action - added to atomic block*/
/*} */

/**********************    Thread Creation **********************/

//general client
/*nondeterministic choice of transaction*/
l_ready schedule(l_dispatch) l_dispatch
l_dispatch skip(l_dispatch, li_1) li_1
l_dispatch skip(l_dispatch, ld_1) ld_1
