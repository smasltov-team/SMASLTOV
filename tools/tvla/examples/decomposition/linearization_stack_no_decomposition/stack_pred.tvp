/***********************************************************
* stack_pred.tvm
***********************************************************/

%p tr_scheduled(v) unique
foreach (loc in locations) {
  %p at[loc](thread)
  %r at[loc](v) ==> isthread(v)
}

%p general_g1(v) unique
%p general_g2(v) unique
%p general_g3(v) unique
%p general_g4(v) unique

/**********************************************/
/*************** Core Predicates **************/
//pointer field fld of object o_1 points to object o_2.
foreach (fld in NextFields) {
    %p rv[fld](o_1, o_2) function
}

//referenced-by predicate for global variables (fields of stack ds)
foreach (fld in StackFields) {
    %p r_by[fld](o) unique pointer
}

//referenced-by prediacte for thread-local variables
foreach (nm in StaticThreadNames) {
    foreach (fld in LocalFieldsAbs) {
        %p r_by[fld,nm](o) unique pointer
    }
    foreach (fld in LocalFieldsNonAbs) {
        %p r_by[fld,nm](o) unique pointer// nonabs
    }
}

//object v is a node (distinguishes node objects from stack object).
//%p is_node(v)

//node v has different successors in the two heaps
%p dnext(v)

//node v appears only in the concurrent heap or only in the sequential heap.
%p dnode(v)

//thread t has static name nm
//foreach (nm in StaticThreadNames) {
//    %p is_name[nm](t) unique
//}

//object o is a stack
//%p is_stack(o) unique

/*********************************************************/
/*************** Instrumentation Predicates **************/

//node u is the concurrent successor of the unique node v satisfying dnext(v)
//%i nextcon(u) = E(v) dnext(v) & rv[n](v,u)

//node u is the sequential successor of the unique node v satisfying dnext(v)
//%i nextseq(u) = E(v) dnext(v) & rv[n_seq](v,u)


/*********************************************************/
/*************** Consistency Rules **************/
