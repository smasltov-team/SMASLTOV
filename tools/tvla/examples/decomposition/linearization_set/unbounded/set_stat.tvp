/******************************************************************
* set_stat.tvm
*
* assumptions:
* 1. thread objects can not be referenced by any other object (they are like globals)
* 2. the list is acyclic
*
******************************************************************/

#define CondAssign(cond,pred,result) pred = ((cond) ? (result) : (pred))
#define UPDATE_AT(from,to,trnm)\
    CondAssign(tr_scheduled(v) & trnm(v), at[from](v), 0)\
    CondAssign(tr_scheduled(v) & trnm(v), at[to](v), 1)\

/*******************
* skip()
********************/
%action skip(from, to) {
    %param trnm in Threads
    %t "skip" + " [" + trnm + "]"
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    {
		UPDATE_AT(from,to,trnm)
    }
}

//NOTE: We assume that a node can exist only in the concurrent heap and not in
//the sequential heap (and is then marked by dnode) but not vice versa.
/*******************
* assignNew(ref)
* [ref = new T()]
* Allocation to local variable.
* note - the type is currently ignored.
********************/
//ref IS assumed to be null before allocation.

%action assignNew(from, to, ref) {
    %param trnm in Threads
    %t ref + "= new T()" + " [" + trnm + "]"
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    %message [trnm(v)] (E(v) r_by[ref,trnm](v)) -> "possible assignment to non-null field"
    %new
    {
        r_by[ref,trnm](v) = isNew(v)

        dnode(v) = dnode(v) | isNew(v)

        //new node holds some value val s.t. -inf < val < +inf
        dle(v_1, v_2) =
       (((isNew(v_1) & isNew(v_2)) |
             (r_by[Head](v_1) & isNew(v_2)) |
             (isNew(v_1) & r_by[Tail](v_2))) ? 1 :
                (((isNew(v_1) & !r_by[Head](v_2) & !isthread(v_2)) |
                  (isNew(v_2) & !r_by[Tail](v_1) & !isthread(v_1))) ? 1/2 :
                 dle(v_1, v_2)))
		eq(v_1, v_2) =
       (((isNew(v_1) & isNew(v_2)) |
             (r_by[Head](v_1) & isNew(v_2)) |
             (isNew(v_1) & r_by[Tail](v_2))) ? 0 :
                (((isNew(v_1) & !r_by[Head](v_2) & !isthread(v_2)) |
                  (isNew(v_2) & !r_by[Tail](v_1) & !isthread(v_1))) ? 1/2 :
                 eq(v_1, v_2)))
			

        inSOrder[dle,n](v) = inSOrder[dle,n](v) | isNew(v)

        bn[n](o_1,o_2) = bn[n](o_1,o_2) | (isNew(o_1) & isNew(o_2))


		foreach (var in {x_i}) {
		  is[var](v) = is[var](v)
		}
		

        //updates due to universe-changing action:

        foreach (fld in NextFields) {
              rv[fld](o_1,o_2) = rv[fld](o_1,o_2)
        }

        foreach (fld in GlobalFields) {
              r_by[fld](o) = r_by[fld](o)
        }

        foreach (nm in Threads+{t_}-{trnm}) {
             foreach (fld in LocalFields) {
                r_by[fld,nm](v) = r_by[fld,nm](v)
             }
             foreach (loc in locations) {
             	at[loc,nm](v) = at[loc,nm](v) 
             }
        }

        foreach (fld in LocalFields-{ref}) {
            r_by[fld,trnm](v) = r_by[fld,trnm](v)
        }


        //dnext(v) = dnext(v)

        foreach (nm in Threads+{t_}) {
             locked_by[nm](v) = locked_by[nm](v)
		     foreach (op in Operations) {
     			choice[op,nm](v) = choice[op,nm](v)
   			 }
        }
        locked(v) = locked(v)

       true(v) = 1

        foreach (op in Operations) {
             choice[op](t) = choice[op](t)
        }

        //bn[n](o_1,o_2) = bn[n](o_1,o_2)      //irreflexive

        foreach (fld in GlobalRt) {
             rt[fld,n](o) = rt[fld,n](o)
        }

        //If bn[n] is reflexive, this update is correct provided ref not in LocalRt
        foreach (nm in Threads+{t_}) {
             foreach (fld in LocalRt) {
                  rt[fld,nm,n](o) = rt[fld,nm,n](o)    //irreflexive, hence no rt from ref
             }
        }

        foreach (loc in locations-{from,to}) {
        	at[loc,trnm](v) = at[loc,trnm](v) 
        }

 	    at[from,trnm](v) = 0
	    at[to,trnm](v) = trnm(v)
	   
		UPDATE_AT(from,to,trnm)
    }
}


//allocating in sequential heap a node that already appears in concurrent heap.
%action assignNew_Seq(from, to, ref) {
    %param trnm in Threads
    %t "assignNew_Seq(" + ref + ")" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & member(v2)
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
     {
        dnode(v) = dnode(v) & !r_by[ref,trnm](v)

        //Before the action, the node pointed-to by ref didn't exist in the sequential heap
        //and hence didn't have a sequential successor and also wasn't dnext
        //(when allocating a node and when updating its next field (in con or seq),
        // the node shouldn't become dnext if it's dnode).
        //If it had a successor in the concurrent heap it becomes dnext.
        //dnext(v) = dnext(v) | (r_by[ref,trnm](v) & E(u) rv[n](v,u))

		UPDATE_AT(from,to,trnm)
     }
     %decompose
}

/***
* assignFromGlbField(from, to, ref,fld,trnm)
* ref = fld where ref is a local field and fld is a global field
***/
//ref is not assumed to be null before assignment.
%action assignFromGlbField(from, to, ref,fld) {
    %param trnm in Threads
    %t ref + " = " + fld + " [" + trnm + "]"
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    %message [trnm(v)] (E(v) r_by[ref,trnm](v)) -> "possible assignment to non-null field"
    {
        r_by[ref,trnm](v) = r_by[fld](v)
		foreach (ref2 in {ref}-(LocalFields-{x_i})) {                                       
			is[ref2](v) = (r_by[fld](v) ? 1/2 : is[ref2](v))
		} 
		UPDATE_AT(from,to,trnm)
    }
}

/***
* assignFromNextField(ref,obj,trnm)
* ref = obj.n where ref is a local field and obj is a local field
***/
//ref IS assumed to be null before assignment.
%action assignFromNextField(from, to, ref,obj) {
    %param trnm in Threads
    %t ref + " = " + obj + "." + n + " [" + trnm + "]"
    %combine trnm(v1) & member(v2)
   //focus needed becuase we read a successor
    %f { r_by[obj,trnm](v1) & rv[n](v1,v2)  & bn[n](v2,v)}
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    %message [trnm(v)] (!(E(v) r_by[obj,trnm](v))) -> "possible null dereference of " + obj + " for " + trnm
    %message [trnm(v)] (E(v) r_by[ref,trnm](v)) -> "possible assignment to non-null field"
    {
        r_by[ref,trnm](o_1) = E(o_t) r_by[obj,trnm](o_t) & rv[n](o_t,o_1)
		foreach (ref2 in {ref}-(LocalFields-{x_i})) {                                       
			is[ref2](v) = ((E(u) r_by[obj,trnm](u) & rv[n](u,v)) ? 1/2 : is[ref2](v))
		} 
       UPDATE_AT(from,to,trnm)
    }
    %decompose
}

/***
* isDataGreaterEq(ref1,ref2)
* Is the value of the node pointed-to by local variable ref1 greater-or-equal to
* the value of the node pointed-to by local variable ref2.
***/
%action isDataGreaterEq(from, to, ref1,ref2) {
    %param trnm in Threads
    %t "tr." + ref1 + "->data >= " + tr + "." + ref2 + "->data" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & member(v2)
    %f {r_by[ref1,trnm](v_1) & r_by[ref2,trnm](v_2) & dle(v_2, v_1)}
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
		 & A(v_1,v_2) ((r_by[ref1,trnm](v_1) & r_by[ref2,trnm](v_2)) -> dle(v_2, v_1))
    %message (!E(v_1,v_2) (r_by[ref1,trnm](v_1) & r_by[ref2,trnm](v_2))) ->
             "possible null dereference of " + ref1 + " or " + ref2
    {
      UPDATE_AT(from,to,trnm)
    }
    %decompose
}

/***
* isDataLess(ref1,ref2,trnm)
* Is the value of the node pointed-to by local variable ref1 less than
* the value of the node pointed-to by local variable ref2.
***/
%action isDataLess(from, to, ref1,ref2) {
    %param trnm in Threads
    %t "tr." + ref1 + "->data < " + tr + "." + ref2 + "->data" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & member(v2)
    %f {r_by[ref1,trnm](v_1) & r_by[ref2,trnm](v_2) & dle(v_2, v_1)}
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
         & !A(v_1,v_2) ((r_by[ref1,trnm](v_1) & r_by[ref2,trnm](v_2)) -> dle(v_2, v_1))
    %message (!E(v_1,v_2) (r_by[ref1,trnm](v_1) & r_by[ref2,trnm](v_2))) ->
             "possible null dereference of " + ref1 + " or " + ref2
    {
      UPDATE_AT(from,to,trnm)
    }
    %decompose
}

/***
* isDataEq(ref1,ref2,trnm)
* Is the value of the node pointed-to by local variable ref1 equal to
* the value of the node pointed-to by local variable ref2.
***/
%action isDataEq(from, to, ref1,ref2) {
    %param trnm in Threads
    %t "tr." + ref1 + "->data == " + tr + "." + ref2 + "->data" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & member(v2)
    %f {r_by[ref1,trnm](v_1) & r_by[ref2,trnm](v_2) & eq(v_1,v_2)}
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
         & A(v_1,v_2) ((r_by[ref1,trnm](v_1) & r_by[ref2,trnm](v_2)) ->
                   eq(v_1,v_2))
    %message (!E(v_1,v_2) (r_by[ref1,trnm](v_1) & r_by[ref2,trnm](v_2))) ->
             "possible null dereference of " + ref1 + " or " + ref2
    {
      UPDATE_AT(from,to,trnm)
    }
    %decompose
}

/***
* isDataNotEq(ref1,ref2,trnm)
* Is the value of the node pointed-to by local variable ref1 not equal to
* the value of the node pointed-to by local variable ref2.
***/
%action isDataNotEq(from, to, ref1,ref2) {
    %param trnm in Threads
    %t "tr." + ref1 + "->data != " + tr + "." + ref2 + "->data" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & member(v2)
    %f {r_by[ref1,trnm](v_1) & r_by[ref2,trnm](v_2) & eq(v_1,v_2)}
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
         & !A(v_1,v_2) ((r_by[ref1,trnm](v_1) & r_by[ref2,trnm](v_2)) ->
                    eq(v_1,v_2))
    %message (!E(v_1,v_2) (r_by[ref1,trnm](v_1) & r_by[ref2,trnm](v_2))) ->
             "possible null dereference of " + ref1 + " or " + ref2
    {
      UPDATE_AT(from,to,trnm)
    }
    %decompose
}

/***
* assignNull(ref,trnm)
* ref = null where ref is a local field
***/
%action assignNull(from, to, ref) {
    %param trnm in Threads
    %t ref + " = null" + " [" + trnm + "]"
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    {
      UPDATE_AT(from,to,trnm)
        r_by[ref,trnm](o_1) = 0
		foreach (ref2 in {ref}-(LocalFields-{x_i})) {                                       
			is[ref2](v) = (r_by[ref,trnm](v) ? 1/2 : is[ref2](v))
		} 
    }
}

/***
* assignRef(from, to, ref1,ref2,trnm)
* ref1 = ref2 where ref1 and ref2 are local fields
***/
//ref1 IS assumed to be null before assignment
%action assignRef(from, to, ref1,ref2) {
    %param trnm in Threads
    %t ref1 + " = " + ref2 + " [" + trnm + "]"
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    %message [trnm(v)] (E(v) r_by[ref1,trnm](v)) -> "possible assignment to non-null field"
    {
      UPDATE_AT(from,to,trnm)
        r_by[ref1,trnm](o_1) = r_by[ref2,trnm](o_1)
		foreach (ref3 in {ref1}-(LocalFields-{x_i})) {                                       
			is[ref3](v) = (r_by[ref2,trnm](v) ? 1/2 : is[ref3](v))
		} 
    }
}

/****
* setChoice(op,trnm)
* Set operation choice to op.
***/
%action setChoice(from, to, op) {
    %param trnm in Threads
    %t "setChoice(" + op + ")" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    {
      UPDATE_AT(from,to,trnm)
        choice[op](t) = choice[op](t) | trnm(t)
    }
	%decompose
}

/****
* isChoice(op,trnm)
* Is op the operation choice of tr.
***/
%action isChoice(from, to, op) {
    %param trnm in Threads
    %t "isChoice(" + op + ")" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & member(v2)
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
         & choice[op](tr)
    {
      UPDATE_AT(from,to,trnm)
    }
	%decompose
}

/*******************
* Clear(trnm)
* null assignment to all local variables and clear to operation choice.
********************/
//We clear all local fields, no matter which action was performed.
%action Clear(from, to) {
    %param trnm in Threads
    %t "Clear()" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    {
      UPDATE_AT(from,to,trnm)
        foreach (fld in LocalFields) {
            r_by[fld,trnm](o_1) = 0
        }
		foreach (ref in {x_i}) {                                       
			is[ref](v) = (r_by[ref,trnm](v) ? 1/2 : is[ref](v))
		} 

        foreach (op in Operations) {
            choice[op](t) = choice[op](t) & !trnm(t)
        }

    }
	%decompose
}

/****************************
* verifySameRes(trnm)
* (res == res_seq)
*****************************/
%action verifySameRes(from, to) {
    %param trnm in Threads
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    %message [trnm(v)] (!A(v) (r_by[res,trnm](v) <-> r_by[res_seq,trnm](v)))
             -> "operation results may differ\n"
    {
      UPDATE_AT(from,to,trnm)
    }
}

/***
* updateNext(obj,ref,trnm)
* obj->n = ref where obj and ref are thread-local variables.
***/
//Similar to SuccCAS_Next in nbq, but without the condition on oldVal.
//obj->n IS assumed to be null before assignment.
//Note: Updates are simplified due to this assumption. Is focus still needed?
%action updateNext(from, to, obj,ref) {
    %param trnm in Threads
    %t "updateNext(" + obj + "," + ref + "," + trnm + ")"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & member(v2)
    %f { r_by[obj,trnm](o_t) & rv[n](o_t,dst) & bn[n](dst,v)
         //, runnable(tr) & r_by[obj,trnm](o_t) & rv[n_seq](o_t,dst) & bn[n](dst,v)
         , r_by[ref,trnm](o_r) & bn[n](o_r,u)  //with E?
       }
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    %message (!(E(o_t) r_by[obj,trnm](o_t))) -> "possible null dereference of " + obj
    %message (E(o_t,dst) r_by[obj,trnm](o_t) & rv[n](o_t,dst))
             -> "possible assignment to non-null field"
	%message (E(u,v) r_by[ref,trnm](u) & r_by[obj,trnm](v) & bn[n](u,v)) ->
			"Possible cycle introduction"
    {
      UPDATE_AT(from,to,trnm)

        rv[n](o_1,o_2) = (rv[n](o_1,o_2) | (r_by[obj,trnm](o_1) & r_by[ref,trnm](o_2)))
    }
    %decompose
}

/***
* assignNextNull(obj,trnm)
* obj->n = null where obj is a thread-local variable.
***/
%action assignNextNull(from, to, obj) {
    %param trnm in Threads
    %t "assignNextNull(" + obj + "," + trnm + ")"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & member(v2)
    %f { r_by[obj,trnm](o_t) & rv[n](o_t,dst) & bn[n](dst,v)
         //, runnable(tr) & r_by[obj,trnm](o_t) & rv[n_seq](o_t,dst)& bn[n](dst,v)
       }
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    %message (!(E(o_t) r_by[obj,trnm](o_t))) -> "possible null dereference of " + obj
    {
      UPDATE_AT(from,to,trnm)
        rv[n](o_1,o_2) = (rv[n](o_1,o_2) & !r_by[obj,trnm](o_1))

    }
    %decompose
}

/***
* Successful_Insert_Seq(ref,trnm)
* Successful insertion of (the value of) the node pointed-to by local variable ref
* to sequential set. Insertion is successful provided the set doesn't already include
* an equal value.
***/
%action Successful_Insert_Seq(from, to, ref) {
    %param trnm in Threads
    %t "successful insert seq" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & member(v2)
    //focus formula correct?
    %f {r_by[ref,trnm](v_1) & member(u_1) & eq(v_1,u_1)}
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
         & A(v,u) ((r_by[ref,trnm](v) & member(u)) -> !eq(v,u))
    //message given if ref==null since the action uses the value of the node
    //pointed-to by ref
    %message (!(E(o_t) r_by[ref,trnm](o_t))) -> "possible null dereference of " + ref
    {
      UPDATE_AT(from,to,trnm)

        member(o_1) = member(o_1) | r_by[ref,trnm](o_1)

        r_by[res_seq,trnm](o_1) = r_by[ref,trnm](o_1)

    }
    %decompose
}

/***
* Failed_Insert_Seq(ref,trnm)
* Failed insertion of (the value of) the node pointed-to by local variable ref
* to sequential set. Insertion fails when the set already includes
* an equal value.
***/
%action Failed_Insert_Seq(from, to, ref) {
    %param trnm in Threads
    %t "failed insert seq" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & member(v2)
    //focus formula correct?
    %f {r_by[ref,trnm](v_1) & member(u_1) & eq(v_1,u_1)}
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
         & !A(v,u) ((r_by[ref,trnm](v) & member(u)) -> !eq(v,u))
    //message given if ref==null since the action uses the value of the node
    //pointed-to by ref
    %message (!(E(o_t) r_by[ref,trnm](o_t))) -> "possible null dereference of " + ref
    {
      UPDATE_AT(from,to,trnm)

        r_by[res_seq,trnm](o_1) = 0
    }
    %decompose
}

/***
* Delete_Seq(ref,trnm)
* Deletion of THE VALUE OF the node pointed-to by local variable ref
* from the sequential set.
* Action includes both successful and failed deletion (failed = value not in set).
***/
%action Delete_Seq(from, to, ref) {
    %param trnm in Threads
    %t "delete seq" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}}
    	| trnm(v1) & member(v2)
    //focus formula correct?
    %f {r_by[ref,trnm](v_1) & member(u_1) & eq(v_1,u_1)}
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    //message given if ref==null since the action uses the value of the node
    //pointed-to by ref
    %message (!(E(o_t) r_by[ref,trnm](o_t))) -> "possible null dereference of " + ref
    //DEBUG message
    %message (E(v_1,u_1,u_2)
                  (r_by[ref,trnm](v_1) & member(u_1) & eq(v_1,u_1)
                                       & member(u_2) & eq(v_1,u_2)
                                       & u_1!=u_2 ))
             -> "possible duplicate values in sequential set"
    {
      UPDATE_AT(from,to,trnm)

        member(o_1) = member(o_1) & !E(o_2)(r_by[ref,trnm](o_2) & eq(o_1,o_2))

        r_by[res_seq,trnm](o_1) =
                      member(o_1) & E(o_2)(r_by[ref,trnm](o_2) & eq(o_1,o_2))

    }
    %decompose
}

/***
* Successful_Delete_Seq(ref,trnm)
* Successful deletion of THE VALUE OF the node pointed-to by local variable ref
* from the sequential set. Deletion is successful provided the set includes the value.
* Note that we delete all members with the given value, without checking
* there is exactly one (correctness of declerative specification assumed).
***/
%action Successful_Delete_Seq(from, to, ref) {
    %param trnm in Threads
    %t "successful delete seq" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}}
    	| trnm(v1) & member(v2)
    //focus formula correct?
    %f {r_by[ref,trnm](v_1) & member(u_1) & eq(v_1,u_1)}
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
         & E(v,u) (r_by[ref,trnm](v) & member(u) & eq(v,u))
    //message given if ref==null since the action uses the value of the node
    //pointed-to by ref
    %message (!(E(o_t) r_by[ref,trnm](o_t))) -> "possible null dereference of " + ref
    {
      UPDATE_AT(from,to,trnm)

        member(o_1) = member(o_1) & !E(o_2)(r_by[ref,trnm](o_2) & eq(o_1,o_2))

        r_by[res_seq,trnm](o_1) =
                      member(o_1) & E(o_2)(r_by[ref,trnm](o_2) & eq(o_1,o_2))

    }
    %decompose
}

/***
* Failed_Delete_Seq(ref,trnm)
* Failed deletion of THE VALUE OF the node pointed-to by local variable ref
* from the sequential set. Deletion fails when the set doesn't include the value.
***/
%action Failed_Delete_Seq(from, to, ref) {
    %param trnm in Threads
    %t "failed delete seq" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}}
    	| trnm(v1) & member(v2)
    //focus formula correct?
    %f {r_by[ref,trnm](v_1) & member(u_1) & eq(v_1,u_1)}
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
         & !E(v,u) (r_by[ref,trnm](v) & member(u) & eq(v,u))
    //message given if ref==null since the action uses the value of the node
    //pointed-to by ref
    %message (!(E(o_t) r_by[ref,trnm](o_t))) -> "possible null dereference of " + ref
    {
      UPDATE_AT(from,to,trnm)

        r_by[res_seq,trnm](o_1) = 0

    }
    %decompose
}

/***
* succLockNode(ref,trnm)
* Succesful locking of node pointed-to by local variable ref.
***/
%action succLockNode(from, to, ref) {
    %param trnm in Threads
    %t "succLockNode (" + ref + "," + trnm + ")"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}}
    	| trnm(v1) & member(v2)
    %f { r_by[ref,trnm](v) & locked(v) }
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
       & A(v) (r_by[ref,trnm](v) -> !locked(v))
/*
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
       & A(v) (r_by[ref,trnm](v) -> &/{(!locked_by[nm](v)) : nm in (Threads+{t_})-{trnm}})
    %message (E(v_1) (r_by[ref,trnm](v_1) & locked_by[trnm](v_1)))
              -> "thread may relock a node it already holds"
*/             
    {
      UPDATE_AT(from,to,trnm)
        locked_by[trnm](v_1) = locked_by[trnm](v_1) | r_by[ref,trnm](v_1)

    }
    %decompose
}

/***
* unlockNode(ref,trnm)
* Unlocking node pointed-to by local variable ref.
***/
%action unlockNode(from, to, ref) {
    %param trnm in Threads
    %t "unlockNode (" + ref + "," + trnm + ")"
    // Could have been done without composition if was a way not to kill other thread locks.
    // The problem is that locked[t1] is not in the voc of t2, thus there is no
    // way to deduce from locked[t2] that !locked[t1] thus there is no way to relativize the 
    // transformer appropriately. 
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}}
    	| trnm(v1) & member(v2)
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    %message (E(v_1) (r_by[ref,trnm](v_1) & !locked_by[trnm](v_1)))
             -> "thread may unlock a node it doesn't hold"
    {
      UPDATE_AT(from,to,trnm)
        locked_by[trnm](v_1) = locked_by[trnm](v_1) & !r_by[ref,trnm](v_1)
        // Because at most one thread can lock an object
		locked(v_1) = locked(v_1) & !r_by[ref,trnm](v_1)
    }
    %decompose
}
