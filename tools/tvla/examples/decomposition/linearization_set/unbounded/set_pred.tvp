/***********************************************************
* set_pred.tvp
***********************************************************/

// Hack for many threads
%p alien(v) nonabs
%r A(v) !alien(v) ==> 0

%p tr_scheduled(v) unique
foreach (loc in locations) {
  %p at[loc](thread) nonabs
  %r at[loc](v) ==> isthread(v)
}

foreach (loc1 in locations) {
  foreach (loc2 in locations-{loc1}) {
    %r at[loc1](thread) ==> !at[loc2](thread)
  }
}

foreach (tname in Threads) {
  %p tname(v) unique
}

foreach (tn1 in Threads) {
	%r tn1(v) ==> isthread(v)
	%r !isthread(v) ==> !tn1(v)
	%r A(v) !tn1(v) ==> 0
	
	foreach (tn2 in Threads-{tn1}) {
  		%r tn1(v) ==> !tn2(v)
  	}
}

%p t_(v)

/**********************************************/
/*************** Core Predicates **************/
//pointer field fld of object o_1 points to object o_2
//NOTE: is "acyclic" correct?
foreach (fld in NextFields) {
    %p rv[fld](o_1, o_2) function acyclic
}

//referenced-by predicate for global variables (fields of shared ds)
foreach (fld in GlobalFields) {
    %p r_by[fld](o) unique pointer
}

//referenced-by prediacte for thread-local variables
foreach (nm in Threads) {
    foreach (fld in LocalFields) {
        %p r_by[fld,nm](o) unique pointer
    }
}

foreach (fld in LocalFields) {
  %p r_by[fld,t_](o) 
}


//node v has different successors in the two heaps
//%p dnext(v)

//node v appears only in the concurrent heap or only in the sequential heap.
%p dnode(v)

//lock representation (predicate not unique - several nodes may be locked by same thread)
foreach (tn1 in Threads+{t_}) {
   %p locked_by[tn1](v)
}
/* Not enough because of t_ in outside the voc, 
   instead we will update locked manually at unlock */
/*
foreach (tn1 in Threads+{t_}) {
	foreach (tn2 in Threads+{t_}) {
		%r locked_by[tn1](v) ==> !locked_by[tn2](v)
	}
}
*/

//value of node v_1 is less or equal to value of node v_2
%p dle(v_1, v_2) transitive

//thread t (general client) is executing operation op (IN THE NON-COMMON PART OF THE CODE)
foreach (op in Operations) {
   %p choice[op](t) nonabs
}

//node v is a member of the sequential set
%p member(v)

/*********************************************************/
/*************** Instrumentation Predicates **************/

%i eq(v1,v2) = dle(v1,v2) & dle(v2,v1)

foreach (tn in Threads+{t_}) {
  foreach (loc in locations) {
	  %i at[loc,tn](v) = tn(v) & at[loc](v) 
  }
  foreach (op in Operations) {
     %i choice[op,tn](v) = tn(v) & choice[op](v) 
  }
}


//node v is in ascending order with respect to its "n" successor
//NOTE: 1) why nonabs? 2) is inSOrder needed instead:
//node v is in strictly ascending order with respect to its "n" successor
%i inSOrder[dle,n](v) = !isthread(v) &
                        (A(v_1) (rv[n](v, v_1) -> (dle(v, v_1) & !dle(v_1, v)))) nonabs

%i bn[n](o_1,o_2) = rv[n]*(o_1,o_2) transitive reflexive

//reachability from global fields
//NOTE: needed from all fields (seq in particular)?
foreach (fld in GlobalRt) {
   %i rt[fld,n](o) = (E(o_1) (r_by[fld](o_1) & bn[n](o_1,o)))
}

%i locked(v) = |/{ locked_by[trnm](v) : trnm in Threads+{t_} } nonabs
foreach (tn1 in Threads+{t_}) {
  %r !locked(v) ==> !locked_by[tn1](v)	
  %r locked_by[tn1](v) ==> locked(v)	
  foreach (tn2 in (Threads+{t_}) - {tn1}) {
	  %r locked_by[tn1](v) ==> !locked_by[tn2](v)	
  }
}

//reachability from local fields
//NOTE: needed from all LocalFields (seq in particular)?
foreach (nm in Threads+{t_}) {
    foreach (fld in LocalRt) {
        %i rt[fld,nm,n](o) = (E(o_1) (r_by[fld,nm](o_1) & bn[n](o_1,o)))
    }
}

//sharing
//NOTE: needed?
// %i is[n](v) =   E(v_1, v_2) ( v_1 != v_2 & rv[n](v_1, v) & rv[n](v_2, v) )

foreach (var in {x_i}) {
    %p is[var](v) nonabs 
	foreach (tn1 in Threads+{t_}) {
	  foreach (tn2 in (Threads+{t_}) - {tn1}) {
		%r !is[var](v) & r_by[var, tn1](v) ==> !r_by[var, tn2](v)
	  }
	}
}

/*********************************************************/
/*************** Consistency Rules **************/

//correct?
//check generated constraints
%r !isthread(v_1) & !isthread(v_2) & !dle(v_1, v_2) ==> dle(v_2, v_1)

//replaces reflexivity of dle (since dle should apply only to list-nodes, not threads)
%r (v_1 == v_2) & !isthread(v_1) ==> dle(v_1,v_2)

//needed?
%r dle(v_1,v_2) & dle(v_2,v_3) & !dle(v_3,v_2) ==> !dle(v_3,v_1)

//%r (v_1 == v_2) & !c[n](v_1) ==> !rv[n](v_1,v_2)
%r rv[n](v_1,v_2) ==> bn[n](v_1,v_2)

// Transitivity
%r E(v_2) bn[n](v_1,v_2) & bn[n](v_2,v_3) ==> bn[n](v_1,v_3)

// Acyclicity
%r bn[n](v_1, v_2) ==> !rv[n](v_2,v_1)
%r E(v_2) rv[n](v_1,v_2) & bn[n](v_1,v_3) & v_1 != v_3 ==> bn[n](v_2,v_3)
%r E(v_2) (v_1 != v_2 & bn[n](v_1,v_2) & !bn[n](v_3,v_2)) ==> !rv[n](v_1,v_3)

// Order (n is a function)
%r E(v_1) bn[n](v_1,v_2) & bn[n](v_1,v_3) & !bn[n](v_2,v_3) ==> bn[n](v_3,v_2)

%r v_1 != v_2 & bn[n](v_1,v_2) & !E(v_3) (v_3 != v_1 & v_3 != v_2 & rv[n](v_1,v_3))
   ==> rv[n](v_1,v_2)


%r inSOrder[dle,n](v) & rv[n](v,v_1) ==> dle(v, v_1)
%r inSOrder[dle,n](v) & rv[n](v,v_1) ==> !dle(v_1, v)

%r u != v & bn[n](u,v) & A(w) (bn[n](u,w) -> inSOrder[dle,n](w)) ==> dle(u,v)
%r u != v & bn[n](u,v) & A(w) (bn[n](u,w) -> inSOrder[dle,n](w)) ==> !dle(v,u)
