/***********************************************************
* tlq_pred.tvm
***********************************************************/

%p tr_scheduled(v) unique
foreach (loc in locations) {
  %p at[loc](thread)
  %r !isthread(v) ==> !at[loc](v)
/*  
  %r at[loc](v) ==> isthread(v)
*/  
}

foreach (tname in StaticThreadNames) {
  %p tname(v) unique
}

foreach (tn in StaticThreadNames) {
	%r tn(v) ==> isthread(v)
	%r !isthread(v) ==> !tn(v)
/*	
	foreach (tn2 in StaticThreadNames-{tn}) {
		%r tn(v) ==> !tn2(v)
	}
*/
}

/**********************************************/
/*************** Core Predicates **************/
//pointer field fld of object o_1 points to object o_2.
foreach (fld in NextFields) {
    %p rv[fld](o_1, o_2) function
    /*
	%r isthread(v) ==> !rv[fld](v, w)
	%r isthread(w) ==> !rv[fld](v, w)
	%r E(w) rv[fld](v, w) ==> !isthread(v)
	%r E(v) rv[fld](v, w) ==> !isthread(w)
	*/

	// No simple loops
	%r rv[fld](o_1, o_2) ==> !rv[fld](o_2, o_1)
}

//referenced-by predicate for global variables (fields of queue ds)
foreach (fld in QFields) {
    %p r_by[fld](o) unique pointer
    /*
	%r isthread(v) ==> !r_by[fld](v)
	%r r_by[fld](v) ==> !isthread(v)
	*/
}

//referenced-by prediacte for thread-local variables
foreach (nm in StaticThreadNames) {
    foreach (fld in LocalFields) {
        %p r_by[fld,nm](o) unique pointer
        /*
		%r isthread(v) ==> !r_by[fld,nm](v)
		%r r_by[fld,nm](v) ==> !isthread(v)
		*/
    }
}

//node v has different successors in the two heaps
%p dnext(v)

//node v appears only in the concurrent heap or only in the sequential heap.
%p dnode(v)

/*
%r dnode(v) ==> !isthread(v)
%r isthread(v) ==> !dnode(v)
%r dnext(v) ==> !isthread(v)
%r isthread(v) ==> !dnext(v)
*/

//lock representation
foreach (l in Locks) {
   %p holds[l](t) unique
}


/*********************************************************/
/*************** Instrumentation Predicates **************/

/*
foreach (l in Locks) {
   %i locked[l]() = E(t) holds[l](t)
   %r !locked[l]() ==> !holds[l](t)
}
*/

%i rest(v) = !isthread(v) & !dnext(v) & !dnode(v)

/*
%i r_out[n](v) = E(w) rv[n](v,w) 
%r !r_out[n](v) ==> !rv[n](v, w)
%r r_out[n](v1) & A(v) v==v2 | !rv[n](v1,v) ==> rv[n](v1,v2)

%i is[n](v) = E(v_1,v_2) v_1 != v_2 & (rv[n](v_1,v) | rv[n_seq](v_1,v)) & (rv[n](v_2,v) | rv[n_seq](v_2,v)) nonabs
%r !is[n](v) & rv[n](v_1, v) & v_1 != v_2 ==> !rv[n](v_2, v)
%r !is[n](v) & rv[n](v_1, v) & v_1 != v_2 ==> !rv[n_seq](v_2, v)
%r !is[n](v) & rv[n_seq](v_1, v) & v_1 != v_2 ==> !rv[n](v_2, v)
%r !is[n](v) & rv[n_seq](v_1, v) & v_1 != v_2 ==> !rv[n_seq](v_2, v)
 
*/

foreach (var in {x_i}) {
    %p is[var](v) nonabs 
/*
#if GNUM > 1
	%i is[var](v) = |/{ |/{ r_by[var, tn1](v) & r_by[var, tn2](v) : tn2 in StaticThreadNames-{tn1} } : tn1 in StaticThreadNames } nonabs
#else
	%i is[var](v) = 0 & v != v
#endif
*/	
	foreach (tn1 in StaticThreadNames) {
	  foreach (tn2 in StaticThreadNames - {tn1}) {
		%r !is[var](v) & r_by[var, tn1](v) ==> !r_by[var, tn2](v)
	  }
	}
}


/*********************************************************/
/*************** Consistency Rules **************/