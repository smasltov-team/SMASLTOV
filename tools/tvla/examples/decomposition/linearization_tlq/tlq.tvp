/************************************************************************ 
 * tlq.tvm
 ***********************************************************************/


/*********************** Sets ******************************/

%s QFields {Head,Head_seq,Tail,Tail_seq}

%s LocalFields {x_i,t,node,new_head,new_head_seq}  
//"node" is equivalent to "h" in nbq, 
//"new_head" and "new_head_seq" equivalent to "next" and "next_seq".
//"t" does not appear in original algorithm.

%s EnqLocals {x_i,t} 

%s DeqLocals {node,new_head,new_head_seq}  

%s NextFields {n,n_seq}

%s Locks {Hl,Tl}

//////////////////////// Names of threads ////////////////////
//// General client
#if(0 < GNUM)
%s StaticThreadNames {g1}
#endif
#if(1 < GNUM)
%s StaticThreadNames {g1,g2}
#endif
#if(2 < GNUM)
%s StaticThreadNames {g1,g2,g3}
#endif
#if(3 < GNUM)
%s StaticThreadNames {g1,g2,g3,g4}
#endif

//// Consumer Producer
#if(0 < KNUM)
%s StaticThreadNames {c1,p1}
#endif
#if(1 < KNUM)
%s StaticThreadNames {c1,p1,c2,p2}
#endif
#if(2 < KNUM)
%s StaticThreadNames {c1,p1,c2,p2,c3,p3}
#endif
#if(3 < KNUM)
%s StaticThreadNames {c1,p1,c2,p2,c3,p3,c4,p4}
#endif
//////////////////////////////////////////////////////////////


/**************** Predicates **************/

%s locations { 
	init, pre_schedule, l_ready, l_dispatch,
	li_1, li_2, li_3a, li_3, lis_1, lis_2, lis_3, li_4, li_5, li_exit,
	ld_1, ld_2, ld_3, lds_1, lds_2, lds_3, ld_4, ld_5, ld_6, ld_7, ld_exit
}

#include "tlq_pred.tvp"

%dname (|/{ r_by[fld](v) : fld in QFields}  | |/{holds[l](v) : l in Locks} ) &
  (&/{ !at[loc](v) : loc in locations } & &/{ !rv[fld](v1,v2) : fld in NextFields } & 
  !tr_scheduled(v) & !dnode(v) & !dnext(v) & !rest(v) &
  &/{&/{ !r_by[fld,tn](v) : fld in LocalFields} & !tn(v) : tn in StaticThreadNames}) locks

%dname (rest(v) | |/{ r_by[fld](v) : fld in QFields} ) & 
  (&/{ !at[loc](v) : loc in locations } & !tr_scheduled(v) &
  &/{&/{ !r_by[fld,tn](v) : fld in LocalFields} & !tn(v) : tn in StaticThreadNames}) rest

foreach (tn in StaticThreadNames) {
	%dname (tn(v) | |/{ r_by[fld,tn](v) : fld in LocalFields} | |/{ r_by[fld](v) : fld in QFields} /* |  |/{holds[l](v) : l in Locks} */ ) & 
	  &/{&/{ !r_by[fld,tn2](v) : fld in LocalFields} : tn2 in StaticThreadNames-{ tn }} tn 
}

%%
/********************* Actions *******************/

#include "tlq_stat.tvp"

%action schedule(loc, trnm) {
  %t "schedule " + loc
  %f { tr_scheduled(tr) }
  %p tr_scheduled(tr) & at[loc](tr) & trnm(tr)
}

%action unschedule() {
  %t "unschedule"
  {
    tr_scheduled(tr) = (isthread(tr) ? 1/2 : 0)
  }
}

/**************** Program *********************/

%%

pre_schedule unschedule() l_ready

/***********************************************/
/************** Producer Threads ****************/

#define PRD(TN) \
/* Enq()      */ \
/* concurrent */ \
\
l_ready schedule(li_1, TN) li_1_##TN \
l_ready schedule(li_3a, TN) li_3a_##TN \
l_ready schedule(li_3, TN) li_3_##TN \
l_ready schedule(li_4, TN) li_4_##TN \
l_ready schedule(li_5, TN) li_5_##TN \
li_1_##TN assignNew(li_1, li_2, x_i,TN) li_2_##TN \                      
li_2_##TN succLockField(li_2, li_3a, Tl,TN) pre_schedule \ 
li_3a_##TN assignFromGlbField(li_3a, li_3, t,Tail,TN) pre_schedule \   
/* atomic { */ \
li_3_##TN updateNext(li_3, lis_1, t,x_i,TN) lis_1_##TN    /*linearization point*/ \ 
lis_1_##TN assignNew_Seq(lis_1, lis_2, x_i,TN) lis_2_##TN \
lis_2_##TN updateFieldNext_Seq(lis_2, lis_3, Tail_seq,x_i,TN) lis_3_##TN \
lis_3_##TN assignField(lis_3, li_4, Tail_seq,x_i,TN) pre_schedule \
/* } */ \
li_4_##TN assignField(li_4, li_5, Tail,x_i,TN) pre_schedule \
/* atomic { */ \
li_5_##TN unlockField(li_5, li_exit, Tl,TN) li_exit_##TN \
li_exit_##TN Clear(li_exit, l_dispatch, TN) pre_schedule      /*can be merged with unlock into atomic block*/ \
/* } */ \
 
 
 
#define CNS(TN) \
/* Deq() */ \
\   
l_ready schedule(ld_1, TN) ld_1_##TN \
l_ready schedule(ld_2, TN) ld_2_##TN \
l_ready schedule(ld_3, TN) ld_3_##TN \
l_ready schedule(ld_4, TN) ld_4_##TN \
l_ready schedule(ld_6, TN) ld_6_##TN \
ld_1_##TN succLockField(ld_1, ld_2, Hl,TN) pre_schedule \
ld_2_##TN assignFromGlbField(ld_2, ld_3, node,Head,TN) pre_schedule \
/* atomic { */ \
ld_3_##TN assignFromNextField(ld_3, lds_1, new_head,node,TN) lds_1_##TN     /*linearization point*/ \
lds_1_##TN selectFieldNext_Seq(lds_1, lds_2, new_head_seq,Head_seq,TN) lds_2_##TN \ 
lds_2_##TN isNull(lds_2, ld_4, new_head_seq,TN) ld_4_##TN \  
lds_2_##TN isNotNull(lds_2, lds_3, new_head_seq,TN) lds_3_##TN \                                               
lds_3_##TN assignField(lds_3, ld_4, Head_seq,new_head_seq,TN) pre_schedule \
/* } */ \ 
/* atomic { */ \
ld_4_##TN isNull(ld_4, ld_6, new_head,TN) pre_schedule    /*can be merged with assignField or above block*/ \
ld_4_##TN isNotNull(ld_4, ld_5, new_head,TN) ld_5_##TN  /*can be merged with assignField or above block*/ \                                               
ld_5_##TN assignField(ld_5, ld_6, Head,new_head,TN) pre_schedule \
/* } */ \
/* atomic { */ \
ld_6_##TN unlockField(ld_6, ld_7, Hl,TN) ld_7_##TN \
ld_7_##TN verifySameDeqRes(ld_7, ld_exit, TN) ld_exit_##TN     /*can be merged with unlock*/ \
ld_exit_##TN Clear(ld_exit, l_dispatch, TN) pre_schedule       /*can be merged with unlock*/ \
/* } */ \



/**********************    Thread Creation **********************/

//producer
#define CREATE_P(TN) \
/* %thread producer_##TN { */ \
l_ready schedule(l_dispatch, TN) l_dispatch_##TN \
l_dispatch_##TN skip(l_dispatch, li_1, TN) li_1_##TN \
 \
PRD(TN) \
 \
/* } */ \

//consumer
#define CREATE_C(TN) \
/* %thread consumer_##TN { */ \
l_ready schedule(l_dispatch, TN) l_dispatch_##TN \
l_dispatch_##TN skip(l_dispatch, ld_1, TN) ld_1_##TN \
 \
CNS(TN) \
 \
/* } */ \

//general client
#define CREATE_G(TN) \
/* %thread general_##TN { */ \
/*nondeterministic choice of transaction*/ \
l_ready schedule(l_dispatch, TN) l_dispatch_##TN \
l_dispatch_##TN skip(l_dispatch, li_1, TN) li_1_##TN \
l_dispatch_##TN skip(l_dispatch, ld_1, TN) ld_1_##TN \
 \
PRD(TN) \
 \
CNS(TN) \
 \
/* } */ \


//create producer types
#if(0 < KNUM)
CREATE_P(p1)
#endif

#if(1 < KNUM)
CREATE_P(p2)
#endif

#if(2 < KNUM)
CREATE_P(p3)
#endif

#if(3 < KNUM)
CREATE_P(p4)
#endif

//create consumer types
#if(0 < KNUM)
CREATE_C(c1)
#endif

#if(1 < KNUM)
CREATE_C(c2)
#endif

#if(2 < KNUM)
CREATE_C(c3)
#endif

#if(3 < KNUM)
CREATE_C(c4)
#endif

//create general types
#if(0 < GNUM)
CREATE_G(g1)
#endif

#if(1 < GNUM)
CREATE_G(g2)
#endif

#if(2 < GNUM)
CREATE_G(g3)
#endif

#if(3 < GNUM)
CREATE_G(g4)
#endif


//%%