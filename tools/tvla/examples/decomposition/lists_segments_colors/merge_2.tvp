///////
// Sets

%s PVar {t, q, p, h, nn}
%s BVar {}
%s colors {}

#include "predicates.tvp"

#ifdef REFINE
%i pqnn() = E(w1,w2) p(w1) & q(w2)
#endif

%%

#include "actions.tvp"

%%

/////////////////////////////////////////////////////////////////////////////
// Transition system for a function that merges two ordered lists (pointed by
// variables p and q) into one ordered list (pointed by variable h).

L1  Is_Null_Var(p)     exit // if (p == NULL)
L1  Is_Not_Null_Var(p) L2
                            //   return q;
L2  Is_Null_Var(q)     exit // if (q == NULL)
L2  Is_Not_Null_Var(q) L3
                            //   return p;
L3  uninterpreted()    L4   // if (p->val < q->val) {
L3  uninterpreted()    L6
L4  Set_Null_L(h)      L4a
L4a Copy_Var_L(h, p)   L5   //   head_list = p;
L5  Get_Next_L(nn, p)  L5a  //   p = p->n;
L5a Set_Null_L(p)      L5b
L5b Copy_Var_L(p, nn)  L5c
L5c Set_Null_L(nn)     L8
                            // }
                            // else {
L6  Set_Null_L(h)      L6a
L6a Copy_Var_L(h, q)   L7   //   head_list = q;
L7  Get_Next_L(nn, q)  L7a  //   q = q->n;
L7a Set_Null_L(q)      L7b
L7b Copy_Var_L(q, nn)  L7c
L7c Set_Null_L(nn)     L8
                            // }
L8  Set_Null_L(t)      L8a
L8a Copy_Var_L(t, h)   L9   // tail_list = head_list;
L9  Is_Not_Null_Var(p) L10  // while(p != NULL && q != NULL) {
L9  Is_Null_Var(p)     L19
L10  Is_Not_Null_Var(q) L11
L10  Is_Null_Var(q)     L19
L11  uninterpreted()    L12  //   if (p->val < q->val) {
L11  uninterpreted()    L15
L12  Get_Next_L(nn, t)  L12a
L12a Set_Next_Null_L(t) L12b //     tail_list->n = NULL;
L12b Set_Null_L(nn)     L13
L13  Set_Next_L(t, p)   L14  //     tail_list->n = p;
L14  Get_Next_L(nn, p)  L14a //     p = p->n;
L14a Set_Null_L(p)      L14b
L14b Copy_Var_L(p, nn)  L14c
L14c Set_Null_L(nn)     L18
                             //   }
                             //   else {
L15  Get_Next_L(nn, t)  L15a
L15a Set_Next_Null_L(t) L15b //     tail_list->n = NULL;
L15b Set_Null_L(nn)     L16
L16  Set_Next_L(t, q)   L17  //     tail_list->n = q;
L17  Get_Next_L(nn, q)  L17a //     q = q->n;
L17a Set_Null_L(q)      L17b
L17b Copy_Var_L(q, nn)  L17c
L17c Set_Null_L(nn)     L18
                             //   }
L18  Get_Next_L(nn, t)  L18a //   tail_list = tail_list->n;
L18a Set_Null_L(t)      L18b
L18b Copy_Var_L(t, nn)  L18c
L18c Set_Null_L(nn)     L9
                             // }
L19  Is_Not_Null_Var(q) L20  // if (p != NULL) {
L19  Is_Null_Var(q)     L22
L20  Get_Next_L(nn, t)  L20a
L20a Set_Next_Null_L(t) L20b //   tail_list->n = NULL;
L20b Set_Null_L(nn)     L21
L21  Set_Next_L(t, q)   L25  //   tail_list->n = p;
                             // }
L22  Is_Not_Null_Var(p) L23  // else if (q != NULL) {
L22  Is_Null_Var(p)     L25
L23  Get_Next_L(nn, t)  L23a
L23a Set_Next_Null_L(t) L23b //   tail_list->n = NULL;
L23b Set_Null_L(nn)     L24
L24  Set_Next_L(t, p)   L25  //   tail_list->n = q;
                            // }
L25 skip()             preexit1

preexit1 Set_Null_L(q) preexit2
preexit2 Set_Null_L(p) preexit3
preexit3 Set_Null_L(t) exit
exit Assert_ListInvariants(h) error
exit Assert_No_Leak(h)        error

//%%

/////////////////////////////////////////////////////////////////////////
// Display only structures that arise at the following program locations.
//L1, exit
