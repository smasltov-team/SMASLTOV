///////
// Sets

%s colors {c1, c2, c3, c4, c5}
%s PVar {a, p, t, pn, an}
%s BVar {}

#include "predicates.tvp"

%%

#include "actions.tvp"

%%

///////////////////////////////////////////////////////////////////////////////
// Create a list 5->(1->)*(2->)*(3->)*(4->)*5,
// Reverse the list and check that we get 5->(4->)*(3->)*(2->)*(1->)*5
// Color 5 is used as a sentinel on both sides

                   // void main() {
                   //   int __BLAST_NONDET;
                   //
                   //   /* Build a list of the form 1->...->1->2->....->2->3 */
                   //   List a = (List) malloc(sizeof(struct node));
L0  Set_Null_L(a) L1
L1  Malloc_L(a) L2
                   //   if (a == 0) exit(1);
                   //   List t;
                   //   List p = a;
L2  Copy_Var_L(p,a) L3
                   //   p->h = 5;
L3  Set_Color(p,c5) L4
                   //     t = (List) malloc(sizeof(struct node));
L4  Malloc_L(t) L5
                   //     p->n = t;
L5  Set_Next_Null_L(p) L6
L6  Set_Next_L(p,t) L7
                   //     p = p->n;
L7  Get_Next_L(pn,p) L8
L8  Set_Null_L(p) L9
L9  Copy_Var_L(p,pn) L10
L10 Set_Null_L(pn) LOOP1

LOOP1 If_Nondet() L1_1
LOOP1 If_Nondet() LOOP2
                   //   while (__BLAST_NONDET) {
                   //     p->h = 1;
L1_1  Set_Color(p,c1) L1_2
                   //     t = (List) malloc(sizeof(struct node));
L1_2  Set_Null_L(t) L1_2b
L1_2b Malloc_L(t) L1_3
                   //     if (t == 0) exit(1);
                   //     p->n = t;
L1_3  Set_Next_Null_L(p) L1_4
L1_4  Set_Next_L(p,t) L1_5
                   //     p = p->n;
L1_5  Get_Next_L(pn,p) L1_6
L1_6  Set_Null_L(p) L1_7
L1_7  Copy_Var_L(p,pn) L1_8
L1_8  Set_Null_L(pn) LOOP1
                   //   }
LOOP2 If_Nondet() L2_1
LOOP2 If_Nondet() LOOP3
                   //   while (__BLAST_NONDET) {
                   //     p->h = 2;
L2_1  Set_Color(p,c2) L2_2
                   //     t = (List) malloc(sizeof(struct node));
L2_2  Set_Null_L(t) L2_2b
L2_2b Malloc_L(t) L2_3
                   //     if (t == 0) exit(1);
                   //     p->n = t;
L2_3  Set_Next_Null_L(p) L2_4
L2_4  Set_Next_L(p,t) L2_5
                   //     p = p->n;
L2_5  Get_Next_L(pn,p) L2_6
L2_6  Set_Null_L(p) L2_7
L2_7  Copy_Var_L(p,pn) L2_8
L2_8  Set_Null_L(pn) LOOP2
                   //   }
LOOP3 If_Nondet() L3_1
LOOP3 If_Nondet() LOOP4
                   //   while (__BLAST_NONDET) {
                   //     p->h = 3;
L3_1  Set_Color(p,c3) L3_2
                   //     t = (List) malloc(sizeof(struct node));
L3_2  Set_Null_L(t) L3_2b
L3_2b Malloc_L(t) L3_3
                   //     if (t == 0) exit(1);
                   //     p->n = t;
L3_3  Set_Next_Null_L(p) L3_4
L3_4  Set_Next_L(p,t) L3_5
                   //     p = p->n;
L3_5  Get_Next_L(pn,p) L3_6
L3_6  Set_Null_L(p) L3_7
L3_7  Copy_Var_L(p,pn) L3_8
L3_8  Set_Null_L(pn) LOOP3
                   //   }
LOOP4 If_Nondet() L4_1
LOOP4 If_Nondet() L_SENTINEL
                   //   while (__BLAST_NONDET) {
                   //     p->h = 4;
L4_1  Set_Color(p,c4) L4_2
                   //     t = (List) malloc(sizeof(struct node));
L4_2  Set_Null_L(t) L4_2b
L4_2b Malloc_L(t) L4_3
                   //     if (t == 0) exit(1);
                   //     p->n = t;
L4_3  Set_Next_Null_L(p) L4_4
L4_4  Set_Next_L(p,t) L4_5
                   //     p = p->n;
L4_5  Get_Next_L(pn,p) L4_6
L4_6  Set_Null_L(p) L4_7
L4_7  Copy_Var_L(p,pn) L4_8
L4_8  Set_Null_L(pn) LOOP4
                   //   }
                   //   p->h = 5;
                   //
L_SENTINEL Set_Color(p,c5) L_REVERSE // Install the sentinel 5

// Now reverse the list

L_REVERSE  Set_Null_L(p) LR2   // p = NULL;
LR2  Is_Null_Var(a)     LR8    // while (a != NULL) {
LR2  Is_Not_Null_Var(a) LR3
LR3  Set_Null_L(t)      LR3a
LR3a Copy_Var_L(t, p)   LR4   //   t = p;
LR4  Set_Null_L(p)      LR4a
LR4a Copy_Var_L(p, a)   LR5   //   p = a;
LR5  Get_Next_L(an, a)  LR5a  //   an = a->n;
LR5a Set_Null_L(a)      LR5b
LR5b Copy_Var_L(a, an)  LR5c  //   a = an;
LR5c Set_Null_L(an)     LR6
LR6  Set_Next_Null_L(p) LR7   //   p->n = NULL;
LR7  Set_Next_L(p, t)   LR2   //   p->n = t;
                              // }
LR8  Copy_Var_L(a,p)    LF1   // a=p;

// Now check that the list has the structure 5->(4->)*(3->)*(2->)*(1->)*5

LF1  Assert_Color(a,c5) LF2
LF2  Get_Next_L(pn, p)  LF3  // p = p->n
LF3  Set_Null_L(p)      LF4
LF4  Copy_Var_L(p, pn)  LF5
LF5  Set_Null_L(pn)     CL1_1

                   //   /* Check it */
CL1_1 Is_Eq_Color(p,c4)     CL1_2
CL1_1 Is_Not_Eq_Color(p,c4) CL2_1
                   //   while (p->h == 4)
CL1_2  Get_Next_L(pn,p) CL1_3
CL1_3  Set_Null_L(p)    CL1_4
CL1_4  Copy_Var_L(p,pn) CL1_5
CL1_5  Set_Null_L(pn)   CL1_1
                   //     p = p->n;
CL2_1 Is_Eq_Color(p,c3)     CL2_2
CL2_1 Is_Not_Eq_Color(p,c3) CL3_1
                   //   while (p->h == 3)
CL2_2  Get_Next_L(pn,p) CL2_3
CL2_3  Set_Null_L(p)    CL2_4
CL2_4  Copy_Var_L(p,pn) CL2_5
CL2_5  Set_Null_L(pn)   CL2_1
                   //     p = p->n;
CL3_1 Is_Eq_Color(p,c2)     CL3_2
CL3_1 Is_Not_Eq_Color(p,c2) CL4_1
                   //   while (p->h == 2)
CL3_2  Get_Next_L(pn,p) CL3_3
CL3_3  Set_Null_L(p)    CL3_4
CL3_4  Copy_Var_L(p,pn) CL3_5
CL3_5  Set_Null_L(pn)   CL3_1
                   //     p = p->n;
CL4_1 Is_Eq_Color(p,c1)     CL4_2
CL4_1 Is_Not_Eq_Color(p,c1) CL5_1
                   //   while (p->h == 1)
CL4_2  Get_Next_L(pn,p) CL4_3
CL4_3  Set_Null_L(p)    CL4_4
CL4_4  Copy_Var_L(p,pn) CL4_5
CL4_5  Set_Null_L(pn)   CL4_1
                   //     p = p->n;
CL5_1 Is_Eq_Color(p,c5)     preexit
CL5_1 Is_Not_Eq_Color(p,c5) error_CL5_1 error_CL5_1 Error(CL5_1) error
                   //   if(p->h != 5)
                   //     ERROR: goto ERROR;
                   //
                   //   return 0;
                   // }
preexit Set_Null_L(p) preexit2
preexit2 Set_Null_L(t) exit
exit Assert_ListInvariants(a) error
exit Assert_No_Leak(a)        error
