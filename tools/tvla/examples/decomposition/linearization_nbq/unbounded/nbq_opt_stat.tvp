/******************************************************************
* nbq_stat.tvm
*
* assumptions:
* 1. thread objects can not be referenced by any other object (they are like globals)
* 2. the list is acyclic
*
******************************************************************/

#define CondAssign(cond,pred,result) pred = ((cond) ? (result) : (pred))
#define UPDATE_AT(from,to,trnm)\
    CondAssign(tr_scheduled(v) & trnm(v), at[from](v), 0)\
    CondAssign(tr_scheduled(v) & trnm(v), at[to](v), 1)\


/*******************
* skip()
********************/
%action skip(from, to) {
    %param trnm in Threads
    %t "skip" + " [" + trnm + "]"
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    {
      UPDATE_AT(from,to,trnm)
    }
}

/*******************
* nullifyLocals(trnm) 
* null assignment to all local variables EXCEPT x_i
********************/
%action nullifyLocals(from, to) {
    %param trnm in Threads
    %t "nullifyLocals()"
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    {
       UPDATE_AT(from,to,trnm)

        foreach (fld in LocalFields-{x_i}) {
            r_by[fld,trnm](o_1) = 0
        }
    }
}

//NOTE: We assume that a node can exist only in the concurrent heap and not in
//the sequential heap (and is then marked by dnode) but not vice versa.

//NOTE: We assume that a node can exist only in the concurrent heap and not in
//the sequential heap (and is then marked by dnode) but not vice versa.
/*******************
* assignNew(ref)
* [ref = new T()]
* Allocation to local variable.
* note - the type is currently ignored.
********************/
//ref isn't assumed to be null before allocation.
//NEED TO FIX: allocation is specific to x_i, not general allocation to local
%action assignNew(from, to, ref) {
    %param trnm in Threads
    %t ref + "= new T()" + " [" + trnm + "]"
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    %new
    {
        r_by[ref,trnm](v) = isNew(v)

        dnode(v) = dnode(v) | isNew(v)

        //updates due to universe-changing action:

        foreach (fld in NextFields) {
              rv[fld](v1,v2) = rv[fld](v1,v2)
        }

        foreach (fld in QFields) {
              r_by[fld](v) = r_by[fld](v)
        }

        foreach (nm in Threads-{trnm}) {
             foreach (fld in LocalFields) {
                r_by[fld,nm](v) = r_by[fld,nm](v)
             }
        }

        foreach (fld in LocalFields-{ref}) {
            r_by[fld,trnm](v) = r_by[fld,trnm](v)
        }

        dnext(v) = dnext(v)

        rest(v) = rest(v)

        foreach (nm in Threads+{t_}) {
           tNext[n,nm](v) = tNext[n,nm](v)
        }
        foreach (nm in Threads+{t_}) {  
           hNext[n,nm](v) = hNext[n,nm](v)  
        }
		r_out[n](v) = r_out[n](v)
		//r_in[n](v) = r_in[n](v)

		is[n](v) = is[n](v)

		foreach (var in {x_i}) {
		  is[var](v) = is[var](v)
		}

       UPDATE_AT(from,to,trnm)
    }
}


//allocating in sequential heap a node that already appears in concurrent heap.
%action assignNew_Seq(from, to, ref) {
    %param trnm in Threads
    %t "assignNew_Seq(" + ref + ")" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & rest(v2)
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
	%message (E(v1,v2) !outside(v1) & !outside(v2) &
		at[from](v1) & at[from](v2) & v1 != v2) -> "ASDFASF"
     {
        dnode(v) = dnode(v) & !r_by[ref,trnm](v)

        //Before the action, the node pointed-to by ref didn't exist in the sequential heap
        //and hence didn't have a sequential successor and also wasn't dnext
        //(when allocating a node and when updating its next field (in con or seq),
        // the node shouldn't become dnext if it's dnode).
        //If it had a successor in the concurrent heap it becomes dnext.
        dnext(v) = dnext(v) | (r_by[ref,trnm](v) & E(u) rv[n](v,u))

       UPDATE_AT(from,to,trnm)
     }
     %decompose
}

/***
* assignFromGlbField(ref,fld,trnm)
* ref = fld where ref is a local field and fld is a QUEUE field
***/
//ref is not assumed to be null before assignment.
%action assignFromGlbField(from, to, ref,fld) {
    %param trnm in Threads
    %t ref + " = " + fld + " [" + trnm + "]"
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    {
        r_by[ref,trnm](v) = r_by[fld](v)
        foreach (ref2 in {ref}-(LocalFields-{x_i})) { // Only update if x_i
			is[ref](v) = (r_by[fld](v) ? 1/2 : is[ref](v))
		} 
       UPDATE_AT(from,to,trnm)
    }
}

/***
* assignFromNextField(ref,obj,trnm)
* ref = obj.n where ref is a local field and obj is a local field
***/
//ref is not assumed to be null before assignment.
%action assignFromNextField(from, to, ref,obj) {
    %param trnm in Threads
    %t ref + " = " + obj + "." + n + " [" + trnm + "]"
    %compose trnm(v1) & rest(v2)
   //focus needed becuase we read a successor
    %f { r_by[obj,trnm](v1) & rv[n](v1,v2) }
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    %message [trnm(v) & rest(v2)] (!(E(v) r_by[obj,trnm](v))) -> "possible null dereference of " + obj + " for " + trnm
    {
        r_by[ref,trnm](v) = E(u) r_by[obj,trnm](u) & rv[n](u,v)
        foreach (ref2 in {ref}-(LocalFields-{x_i})) { // Only update if x_i
			is[ref](v) = (r_by[ref,trnm](v) | (E(u) r_by[obj,trnm](u) & rv[n](u,v)) ? 1/2 : is[ref](v))
		} 
       UPDATE_AT(from,to,trnm)
    }
    %decompose
}


/***
* SuccCAS(fld,oldVal,ref,trnm)
* Successful CAS where fld is a QUEUE field.
* fld == oldVal and we assign fld = ref.
***/
//obj.fld is not assumed to be null before assignment.
%action SuccCAS(from, to, fld,oldVal,ref) {
    %param trnm in Threads
    %t "SuccCAS(" + fld + "," + oldVal + "," + ref + ")" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & rest(v2)
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr) & A(v) (r_by[fld](v) <-> r_by[oldVal,trnm](v))
    {
        r_by[fld](v) = r_by[ref,trnm](v)
       UPDATE_AT(from,to,trnm)
    }
    %decompose
}

/***
* FailCAS(fld,oldVal,ref,trnm)
* Failed CAS where fld is a QUEUE field, since fld != oldVal.
***/
%action FailCAS(from, to, fld,oldVal,ref) {
    %param trnm in Threads
    %t "FailCAS(" + obj + "," + fld + "," + oldVal + "," + ref + ")" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & rest(v2)
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr) & !(A(v) (r_by[fld](v) <-> r_by[oldVal,trnm](v)))
    //NOTE: Nullifying locals cannot be performed as in stack,
    //      since we don't wish to nullify in all calls to FailCAS.
    //      Can be added as a separate action, for efficiency.
    {
       UPDATE_AT(from,to,trnm)
    }
    %decompose
}


/***
* SuccCAS_Next(obj,oldVal,ref,trnm)
* Successful CAS where obj is a thread-local variable and fld is n.
* obj->n == oldVal and we assign obj->n = ref.
***/

//obj->n is not assumed to be null before assignment.
%action SuccCAS_Next(from, to, obj,oldVal,ref) {
    %param trnm in Threads
    %t "SuccCAS_Next(" + obj + "," + oldVal + "," + ref + ")"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & rest(v2)
    %f { r_by[obj,trnm](o_t) & rv[n](o_t,o_f),
         r_by[obj,trnm](o_t) & rv[n_seq](o_t,o_f) }
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr) &
    	((A(v) !r_by[oldVal,trnm](v)) <-> (!E(o_t) r_by[obj,trnm](o_t) & r_out[n](o_t))) &
    	A(o_f) ((E(o_t) r_by[obj,trnm](o_t) & rv[n](o_t,o_f)) <-> r_by[oldVal,trnm](o_f))
    %message (!(E(o_t) r_by[obj,trnm](o_t))) -> "possible null dereference of " + obj
    %message [trnm(v1) & rest(v2)] (E(o_1, o_2) r_by[obj,trnm](o_1) & r_by[ref,trnm](o_2) & rv[n](o_2,o_1))
    	-> "Creating simple loop!"
    {
       UPDATE_AT(from,to,trnm)

        rv[n](o_1,o_2) = ( r_by[obj,trnm](o_1) ?
                           r_by[ref,trnm](o_2) : rv[n](o_1,o_2) ) 
        
        rv[n_seq](o_1,o_2) = ( r_by[obj,trnm](o_1) ?
                               !dnode(o_1) & 
                               (rv[n_seq](o_1,o_2) | (!dnext(o_1) & rv[n](o_1,o_2)))
                               & !r_by[ref,trnm](o_2) :  
                               rv[n_seq](o_1,o_2) )

        dnext(o_1) = ( r_by[obj,trnm](o_1) ?
                       !dnode(o_1) & 
                       !A(o_2) ((rv[n_seq](o_1,o_2) | (!dnext(o_1) & rv[n](o_1,o_2))) <->
                                r_by[ref,trnm](o_2)) :
                       dnext(o_1) )

        rest(o_1) = ( r_by[obj,trnm](o_1) ?
                       !dnode(o_1) &
                       A(o_2) ((rv[n_seq](o_1,o_2) | (!dnext(o_1) & rv[n](o_1,o_2))) <->
                                r_by[ref,trnm](o_2)) :
                       rest(o_1) )
		is[n](v) = (r_by[ref,trnm](v) ?
				1/2 // Let coerce figure it out
				: is[n](v))
		r_out[n](v) = (r_by[obj,trnm](v) ?
				(E(w) r_by[ref,trnm](w))
				: r_out[n](v))
		/*
		r_in[n](v) = (r_by[ref,trnm](v) ?
				(E(w) r_by[obj,trnm](w))
				: r_in[n](v))
		*/
    }
    %decompose
}

/***
* FailCAS_Next(obj,oldVal,ref,trnm)
* Failed CAS where obj is a thread-local variable and fld is n,
* since obj->n != oldVal.
***/

%action FailCAS_Next(from, to, obj,oldVal,ref) {
    %param trnm in Threads
    %t "FailCAS_Next(" + obj + "," + oldVal + "," + ref + ")"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & rest(v2)
    %f { r_by[obj,trnm](o_t) & rv[n](o_t,o_f) }
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr) &
    	!(((A(v) !r_by[oldVal,trnm](v)) <-> (!E(o_t) r_by[obj,trnm](o_t) & r_out[n](o_t))) &
    	A(o_f) ((E(o_t) r_by[obj,trnm](o_t) & rv[n](o_t,o_f)) <-> r_by[oldVal,trnm](o_f)))
//    %p tr_scheduled(tr) & at[from](tr) & trnm(tr) & !(A(o_f) ((E(o_t) r_by[obj,trnm](o_t) & rv[n](o_t,o_f)) <-> r_by[oldVal,trnm](o_f)))
    %message (!(E(o_t) r_by[obj,trnm](o_t))) -> "possible null dereference of " + obj
    {
       UPDATE_AT(from,to,trnm)
    }
    %decompose
}


/***
* updateFieldNext_Seq(fld,ref,trnm)
* fld.next = ref, in sequential ds.
* fld is a global field, ref is a local field.
***/

%action updateFieldNext_Seq(from, to, fld,ref) {
    %param trnm in Threads
    %t fld + "." + n + "=" + ref + "(sequential)"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & rest(v2)
    %f { r_by[fld](o_f) & rv[n](o_f,dst) }
    //is focus formula needed? is focus formula for n_seq also needed?
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    %message [trnm(v1) & rest(v2)] (!(E(o_f) r_by[fld](o_f))) -> "possible null dereference of " + fld
    %message [trnm(v1) & rest(v2)] (E(o_1, o_2) r_by[fld](o_1) & r_by[ref,trnm](o_2) & rv[n](o_2,o_1))
    	-> "Creating simple loop!"
    {
       UPDATE_AT(from,to,trnm)

        rv[n_seq](o_1,o_2) = ( r_by[fld](o_1) ?           
                               r_by[ref,trnm](o_2) & !rv[n](o_1,o_2) : 
                               rv[n_seq](o_1,o_2) )

        dnext(o_1) = ( r_by[fld](o_1) ?
                       !A(o_2) (rv[n](o_1,o_2) <-> r_by[ref,trnm](o_2)) :
                       dnext(o_1) )
        rest(o_1) = ( r_by[fld](o_1) ?
        				!dnode(o_1) &
                       A(o_2) (rv[n](o_1,o_2) <-> r_by[ref,trnm](o_2)) :
                       rest(o_1) )

		is[n](v) = (r_by[ref,trnm](v) ?
				1/2 // Let coerce figure it out
				: is[n](v))
    }
    %decompose
}


/***
* assignField(from, to, fld,ref,trnm)
* fld = ref where fld is a QUEUE field
***/
//We don't assume fld==null before assignment.
%action assignField(from, to, fld,ref) {
    %param trnm in Threads
    %t fld + "=" + ref + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & rest(v2)
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    {
         r_by[fld](v) = r_by[ref,trnm](v)
       UPDATE_AT(from,to,trnm)  
    }   
    %decompose
}

/*******************
* Clear(trnm) 
* null assignment to all local variables
********************/
//We clear all local fields, no matter which action was performed (Enq or Deq).
%action Clear(from, to) {
    %param trnm in Threads
    %t "Clear()"
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    {
       UPDATE_AT(from,to,trnm)
        foreach (fld in LocalFields) {
            r_by[fld,trnm](o_1) = 0
        }
    }
}


/*********
    //following messages check "atomicity" requirement:
    %message ((A(t) (isthread(t) -> (at[li_exit](t) | at[ld_exit](t)))) &
              (E(o_q) (rv[this](tr,o_q) & !(A(v) (rv[tail](o_q,v) <-> rv[tail_seq](o_q,v)))))) 
             -> " note: tails may differ at quiescent point"
    %message ((A(t) (isthread(t) -> (at[li_exit](t) | at[ld_exit](t)))) &
              (E(o_q) (rv[this](tr,o_q) & !(A(v) (rv[head](o_q,v) <-> rv[head_seq](o_q,v)))))) 
             -> " note: heads may differ at quiescent point"
    %message ((A(t) (isthread(t) -> (at[li_exit](t) | at[ld_exit](t)))) &
              (E(v) (dnode(v) | dnext(v)))) 
             -> " note: heaps may differ at quiescent point"
*********/


/***
* selectFieldNext_Seq(ref,fld,trnm)
* ref = fld.next, in sequential ds.
* ref is a local field and fld is a global field.
***/
//ref is NOT assumed to be null before assignment.
%action selectFieldNext_Seq(from, to, ref,fld) {
    %param trnm in Threads
    %t ref + " = " + fld + "." + n + "(sequential)"
    %compose trnm(v1) & rest(v2)
    %f { r_by[fld](o_f) & rv[n](o_f,dst),
         r_by[fld](o_f) & rv[n_seq](o_f,dst)
       }
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    %message [trnm(v1) & rest(v2)] (!(E(o_f) r_by[fld](o_f))) -> "possible null dereference of " + fld
    {
       UPDATE_AT(from,to,trnm)
        r_by[ref,trnm](o_1) = E(o_f) (r_by[fld](o_f) &
                                      ((!dnext(o_f) & rv[n](o_f,o_1)) |
                                       (dnext(o_f) & rv[n_seq](o_f,o_1)))) 
        foreach (ref2 in {ref}-(LocalFields-{x_i})) { // Only update if x_i
			is[ref](v) = ( r_by[ref,trnm](v) | (E(o_f) (r_by[fld](o_f) &
                                      ((!dnext(o_f) & rv[n](o_f,o_1)) |
                                       (dnext(o_f) & rv[n_seq](o_f,o_1))))
						) ? 1/2 : is[ref](v))
		}        
    }
    %decompose 
}


/*******************
* isEq(fld1,fld2,trnm)
* fld1 == fld2
********************/
%action isEq(from, to, fld1,fld2) {
    %param trnm in Threads
    %t fld1 + " == " + fld2
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & rest(v2)

    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr) & A(o_t) (r_by[fld1,trnm](o_t) <-> r_by[fld2,trnm](o_t))
    {
       UPDATE_AT(from,to,trnm)
    }
    %decompose
}

/*******************
* isNotEq(fld1,fld2,trnm)
* fld1 != fld2
********************/
%action isNotEq(from, to, fld1,fld2) {
    %param trnm in Threads
    %t fld1 + " != " + fld2
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & rest(v2)

    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr) & !(A(o_t) (r_by[fld1,trnm](o_t) <-> r_by[fld2,trnm](o_t)))
    {
       UPDATE_AT(from,to,trnm)
    }
    %decompose
}

/***
* isEqField(ref,fld,trnm)
* ref == fld where ref is a local field and fld is a global field
***/
%action isEqField(from, to, ref,fld) {
    %param trnm in Threads
    %t ref + "==" + fld
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & rest(v2)
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr) & A(o_f) (r_by[ref,trnm](o_f) <-> r_by[fld](o_f))
    {
       UPDATE_AT(from,to,trnm)
    }
    %decompose    
}


/***
* isNotEqField(ref,fld,trnm)
* ref != fld where ref is a local field and fld is a global field
***/
%action isNotEqField(from, to, ref,fld) {
    %param trnm in Threads
    %t ref + "!=" + fld
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & rest(v2)
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr) & !(A(o_f) (r_by[ref,trnm](o_f) <-> r_by[fld](o_f)))
    {
       UPDATE_AT(from,to,trnm)
    }
    %decompose
}

/*******************
* isNull(ref,trnm)
* (ref == null)
********************/

%action isNull(from, to, ref) {
    %param trnm in Threads
    %t ref + "== null" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & rest(v2)
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr) & !E(v) r_by[ref,trnm](v) 
    {
       UPDATE_AT(from,to,trnm)
    }
    %decompose
}


/*******************
* isNotNull(ref,trnm)
* (ref != null)
********************/

%action isNotNull(from, to, ref) {
    %param trnm in Threads
    %t ref + "!= null" + " [" + trnm + "]"
    %compose |/{trnm(v1) & otrnm(v2) : otrnm in Threads-{trnm}} 
    	| trnm(v1) & rest(v2)
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr) & E(v) r_by[ref,trnm](v)
    {
       UPDATE_AT(from,to,trnm)
    }
    %decompose
}

/****************************
* verifySameDeqRes(trnm)
* (next == next_seq)
*****************************/
%action verifySameDeqRes(from, to) {
    %param trnm in Threads
    %p E(tr) tr_scheduled(tr) & at[from](tr) & trnm(tr)
    %message [trnm(v1)] (!A(v) (r_by[next,trnm](v) <-> r_by[next_seq,trnm](v)))
             -> "deq results may differ\n"
    {
       UPDATE_AT(from,to,trnm)
    }
    %decompose
}

