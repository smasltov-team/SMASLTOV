/************************************************************************
 * nbq.tvm
 ***********************************************************************/


/*********************** Sets ******************************/

//%s FieldsAndParameters {tail,tail_seq,x_i,this,n,n_seq,
//                        head,head_seq,t_enq,next_enq,
//                        t_deq,h_deq,new_head_c,new_head_s}

%s QFields {Head,Head_seq,Tail,Tail_seq}

%s LocalFields {x_i,h,t,next,next_seq}

%s EnqLocals {x_i,t,next}

%s DeqLocals {h,t,next,next_seq}

%s NextFields {n,n_seq}

//////////////////////// Names of threads ////////////////////
//// General client
%pset Threads {t1,t2}

//////////////////////////////////////////////////////////////

%s locations { 
    li_1, li_2, li_2a, li_3, li_4, li_5, li_6, 
    li_7, lis_1, lis_2, lis_3, li_8, li_8, li_exit, 
    ld_1, ld_1a, ld_2, ld_3, ld_4, ld_5, 
    ld_6, ld_7, ld_8, lds_1a, lds_1, lds_2, lds_3, ld_ver, 
    ld_exit, l_dispatch 
}
//////////////////////////////////////////////////////////////


/**************** Predicates **************/

#include "nbq_pred.tvp"


%dname (rest(v) | |/{ r_by[fld](v) : fld in QFields}) & 
  (&/{ !at[loc](v) : loc in locations } &
  &/{&/{ !r_by[fld,tn](v) : fld in LocalFields} & !tNext[n,tn](v) : tn in Threads+{t_}}) rest

foreach (tn in Threads) {
	%dname (tn(v) | |/{ r_by[fld,tn](v) : fld in LocalFields} | |/{ r_by[fld](v) : fld in QFields}) & 
	  &/{&/{ !r_by[fld,tn2](v) : fld in LocalFields} & !tn2(v) & !tNext[n,tn2](v) : tn2 in (Threads+{t_})-{ tn }} tn
}

%%
/********************* Actions *******************/

#include "nbq_stat.tvp"

%action schedule(loc) {
  %param trnm in Threads
  %t "schedule " + loc
  %f { tr_scheduled(tr), tr_scheduled(tr) & trnm(tr) & at[loc](tr) }
  %p tr_scheduled(tr) & trnm(tr) & at[loc](tr)  
}

%action unschedule() {
  %t "unschedule"
#ifdef SANITY
  %message (E(v) !(r_by[Head](v) <-> r_by[Head_seq](v)))
    -> "Head and Head_seq should always be visibly equal"
  %message (E(v) r_by[Head](v) & !rest(v))
    -> "Head must visibly point to a rest node"
  %message (A(v) !(r_by[Head](v)))
    -> "Head cannot be null"
  %message (A(v) !(r_by[Tail](v)))
    -> "Tail cannot be null"
  %message (A(v) !(r_by[Head_seq](v)))
    -> "Head_seq cannot be null"
  %message (A(v) !(r_by[Tail_seq](v)))
    -> "Tail_seq cannot be null"
  %message (E(v) r_by[Head](v) & !r_by[Tail](v) & !r_out[n](v))
    -> "If head and tail are different, r_out must be true!"
#endif
  {
    tr_scheduled(tr) = (isthread(tr) ? 1/2 : 0)
  }
}

/**************** Program *********************/

%%

pre_schedule unschedule() l_ready

/***********************************************/
/************** Producer Threads ****************/

//general client

/***************** CFG for one thread  *********************************/

/* Enq()      */ 
/* concurrent */ 

l_ready schedule(li_1) li_1
l_ready schedule(li_2a) li_2a
l_ready schedule(li_3) li_3
l_ready schedule(li_4) li_4
l_ready schedule(li_5) li_5
l_ready schedule(li_7) li_7
l_ready schedule(li_8) li_8
/*atomic {*/ 
li_1 assignNew(li_1, li_2, x_i) li_2
/*concurrent*/ 
li_2 nullifyLocals(li_2, li_2a) pre_schedule 
li_2a assignFromGlbField(li_2a, li_3, t,Tail) pre_schedule 
/* } */ 
li_3 assignFromNextField(li_3, li_4, next,t) pre_schedule 
li_4 isNotEqField(li_4, li_2, t,Tail) li_2
li_4 isEqField(li_4, li_5, t,Tail) pre_schedule 
/*atomic {*/ 
li_5 isNull(li_5, li_7, next) li_7
li_5 isNotNull(li_5, li_6, next) li_6
li_6 FailCAS(li_6, li_2, Tail,t,next) li_2
li_6 SuccCAS(li_6, li_2, Tail,t,next) li_2
/* } */ 
/* atomic { */ 
li_7 FailCAS_Next(li_7, li_2, t,next,x_i) li_2
li_7 SuccCAS_Next(li_7, lis_1, t,next,x_i) lis_1
lis_1 assignNew_Seq(lis_1, lis_2, x_i) lis_2
lis_2 updateFieldNext_Seq(lis_2, lis_3, Tail_seq,x_i) lis_3
lis_3 assignField(lis_3, li_8, Tail_seq,x_i) pre_schedule 
/* } */ 
/* atomic { */ 
li_8 SuccCAS(li_8, li_exit, Tail,t,x_i) li_exit
li_8 FailCAS(li_8, li_exit, Tail,t,x_i) li_exit
li_exit Clear(li_exit, l_dispatch) pre_schedule 
/* } */ 


/* Deq() */ 

l_ready schedule(ld_1) ld_1
l_ready schedule(ld_1a) ld_1a
l_ready schedule(ld_2) ld_2
l_ready schedule(ld_3) ld_3
l_ready schedule(ld_4) ld_4
l_ready schedule(ld_5) ld_5
l_ready schedule(ld_8) ld_8
/* atomic { */ 
ld_1 nullifyLocals(ld_1, ld_1a) pre_schedule 
ld_1a assignFromGlbField(ld_1a, ld_2, h,Head) pre_schedule 
/*}*/ 
ld_2 assignFromGlbField(ld_2, ld_3, t,Tail) pre_schedule 
/*atomic {*/ 
ld_3 assignFromNextField(ld_3, lds_1a, next,h) lds_1a               /*first commit point*/ 
lds_1a selectFieldNext_Seq(lds_1a, ld_4, next_seq,Head_seq) pre_schedule     
/*}*/ 
ld_4 isNotEqField(ld_4, ld_1, h,Head) ld_1
ld_4 isEqField(ld_4, ld_5, h,Head) pre_schedule 
/*atomic {*/ 
ld_5 isNotEq(ld_5, ld_8, h,t) ld_8
ld_5 isEq(ld_5, ld_6, h,t) ld_6
ld_6 isNull(ld_6, ld_ver, next) ld_ver
ld_6 isNotNull(ld_6, ld_7, next) ld_7
ld_7 FailCAS(ld_7, ld_1, Tail,t,next) ld_1
ld_7 SuccCAS(ld_7, ld_1, Tail,t,next) ld_1
/*}*/ 
/*atomic {*/ 
ld_8 FailCAS(ld_8, ld_1, Head,h,next) ld_1
ld_8 SuccCAS(ld_8, lds_1, Head,h,next) lds_1                    /*second commit point*/ 
lds_1 selectFieldNext_Seq(lds_1, lds_2, next_seq,Head_seq) lds_2
lds_2 isEqGlbs(lds_2, ld_ver, Head_seq,Tail_seq) ld_ver
lds_2 isNotEqGlbs(lds_2, lds_3, Head_seq,Tail_seq) lds_3
lds_3 assignField(lds_3, ld_ver, Head_seq,next_seq) ld_ver
ld_ver verifySameDeqRes(ld_ver, ld_exit) ld_exit                  /*linearizability test*/ 
ld_exit Clear(ld_exit, l_dispatch) pre_schedule 
/*}*/ 


/**********************    Thread Creation **********************/

//general client
/*%thread general {*/ 
l_ready schedule(l_dispatch) l_dispatch
/*nondeterministic choice of transaction*/ 
l_dispatch skip(l_dispatch, li_1) pre_schedule 
l_dispatch skip(l_dispatch, ld_1) pre_schedule 
  
/*}*/ 

//%%
