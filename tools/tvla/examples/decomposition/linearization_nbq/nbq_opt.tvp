/************************************************************************
 * nbq.tvm
 ***********************************************************************/


/*********************** Sets ******************************/

//%s FieldsAndParameters {tail,tail_seq,x_i,this,n,n_seq,
//                        head,head_seq,t_enq,next_enq,
//                        t_deq,h_deq,new_head_c,new_head_s}

%s QFields {Head,Head_seq,Tail,Tail_seq}

%s LocalFields {x_i,h,t,next,next_seq}

%s EnqLocals {x_i,t,next}

%s DeqLocals {h,t,next,next_seq}

%s NextFields {n,n_seq}

//////////////////////// Names of threads ////////////////////
//// General client
#if(0 < GNUM)
%s StaticThreadNames {g1}
#endif
#if(1 < GNUM)
%s StaticThreadNames {g1,g2}
#endif
#if(2 < GNUM)
%s StaticThreadNames {g1,g2,g3}
#endif
#if(3 < GNUM)
%s StaticThreadNames {g1,g2,g3,g4}
#endif

//// Consumer Producer
#if(0 < KNUM)
%s StaticThreadNames {c1,p1}
#endif
#if(1 < KNUM)
%s StaticThreadNames {c1,p1,c2,p2}
#endif
#if(2 < KNUM)
%s StaticThreadNames {c1,p1,c2,p2,c3,p3}
#endif
#if(3 < KNUM)
%s StaticThreadNames {c1,p1,c2,p2,c3,p3,c4,p4}
#endif
//////////////////////////////////////////////////////////////

%s locations { 
	init, pre_schedule, l_ready, l_dispatch,
	li_1, li_2, li_2a, li_3, li_4, li_5, li_6, li_7, lis_1, lis_2, lis_3, li_8, li_exit,
	ld_1, ld_1a, ld_2, lds_1a, ld_3, ld_4, ld_5, lds_1, lds_2, lds_3, ld_6, ld_7, ld_8, ld_ver, ld_exit	
}

/**************** Predicates **************/

#include "nbq_opt_pred.tvp"

%dname (rest(v) | |/{ r_by[fld](v) : fld in QFields}) & 
  (&/{ !at[loc](v) : loc in locations } &
  &/{&/{ !r_by[fld,tn](v) : fld in LocalFields} & !tNext[n,tn](v) & !hNext[n,tn](v) : tn in StaticThreadNames}) rest

foreach (tn in StaticThreadNames) {
	%dname (tn(v) | |/{ r_by[fld,tn](v) : fld in LocalFields} | |/{ r_by[fld](v) : fld in QFields}) & 
	  &/{&/{ !r_by[fld,tn2](v) : fld in LocalFields} & !tNext[n,tn2](v) & !hNext[n,tn2](v) : tn2 in StaticThreadNames-{ tn }} tn 
}


%%
/********************* Actions *******************/

#include "nbq_opt_stat.tvp"

%action schedule(loc, trnm) {
  %t "schedule " + loc
  %f { tr_scheduled(tr) & at[loc](tr) & trnm(tr) }
  %p tr_scheduled(tr) & at[loc](tr) & trnm(tr)
}

%action unschedule() {
  %t "unschedule"
  {
    tr_scheduled(tr) = (isthread(tr) ? 1/2 : 0)
  }
}

/**************** Program *********************/

%%

pre_schedule unschedule() l_ready


/***********************************************/
/************** Producer Threads ****************/

//general client

/***************** CFG for one thread  *********************************/

#define PRD(TN) \
/* Enq()      */ \
/* concurrent */ \
\
l_ready schedule(li_1, TN) li_1_##TN \
l_ready schedule(li_2a, TN) li_2a_##TN \
l_ready schedule(li_3, TN) li_3_##TN \
l_ready schedule(li_4, TN) li_4_##TN \
l_ready schedule(li_5, TN) li_5_##TN \
l_ready schedule(li_7, TN) li_7_##TN \
l_ready schedule(li_8, TN) li_8_##TN \
/*atomic {*/ \
li_1_##TN assignNew(li_1, li_2, x_i,TN) li_2_##TN \
/*concurrent*/ \
li_2_##TN nullifyLocals(li_2, li_2a, TN) pre_schedule \
li_2a_##TN assignFromGlbField(li_2a, li_3, t,Tail,TN) pre_schedule \
/* } */ \
li_3_##TN assignFromNextField(li_3, li_4, next,t,TN) pre_schedule \
li_4_##TN isNotEqField(li_4, li_2, t,Tail,TN) li_2_##TN \
li_4_##TN isEqField(li_4, li_5, t,Tail,TN) pre_schedule \
/*atomic {*/ \
li_5_##TN isNull(li_5, li_7, next,TN) li_7_##TN \
li_5_##TN isNotNull(li_5, li_6, next,TN) li_6_##TN \
li_6_##TN FailCAS(li_6, li_2, Tail,t,next,TN) li_2_##TN \
li_6_##TN SuccCAS(li_6, li_2, Tail,t,next,TN) li_2_##TN \
/* } */ \
/* atomic { */ \
li_7_##TN FailCAS_Next(li_7, li_2, t,next,x_i,TN) li_2_##TN \
li_7_##TN SuccCAS_Next(li_7, lis_1, t,next,x_i,TN) lis_1_##TN \
lis_1_##TN assignNew_Seq(lis_1, lis_2, x_i,TN) lis_2_##TN \
lis_2_##TN updateFieldNext_Seq(lis_2, lis_3, Tail_seq,x_i,TN) lis_3_##TN \
lis_3_##TN assignField(lis_3, li_8, Tail_seq,x_i,TN) pre_schedule \
/* } */ \
/* atomic { */ \
li_8_##TN SuccCAS(li_8, li_exit, Tail,t,x_i,TN) li_exit_##TN \
li_8_##TN FailCAS(li_8, li_exit, Tail,t,x_i,TN) li_exit_##TN \
li_exit_##TN Clear(li_exit, l_dispatch, TN) pre_schedule \
/* } */ \


#define CNS(TN) \
/* Deq() */ \
\
l_ready schedule(ld_1, TN) ld_1_##TN \
l_ready schedule(ld_1a, TN) ld_1a_##TN \
l_ready schedule(ld_2, TN) ld_2_##TN \
l_ready schedule(ld_3, TN) ld_3_##TN \
l_ready schedule(ld_5, TN) ld_5_##TN \
l_ready schedule(ld_6, TN) ld_6_##TN \
l_ready schedule(ld_8, TN) ld_8_##TN \
/* atomic { */ \
ld_1_##TN nullifyLocals(ld_1, ld_1a, TN) pre_schedule \
ld_1a_##TN assignFromGlbField(ld_1a, ld_2, h,Head,TN) pre_schedule \
/* } */ \
/* atomic { */ \
ld_2_##TN assignFromNextField(ld_2, lds_1a, next,h,TN) lds_1a_##TN  /*first commit point*/ \
lds_1a_##TN selectFieldNext_Seq(lds_1a, ld_3, next_seq,Head_seq,TN) pre_schedule \
/* } */ \
/* atomic { */ \
ld_3_##TN isNotEqField(ld_3, ld_1, h,Head,TN) ld_1_##TN \
ld_3_##TN isEqField(ld_3, ld_4, h,Head,TN) ld_4_##TN \
ld_4_##TN isNull(ld_4, ld_ver, next,TN) ld_ver_##TN \
ld_4_##TN isNotNull(ld_4, ld_5, next,TN) pre_schedule \
/* } */ \
/* atomic { */ \
ld_5_##TN FailCAS(ld_5, ld_1, Head,h,next,TN) ld_1_##TN \
ld_5_##TN SuccCAS(ld_5, lds_1, Head,h,next,TN) lds_1_##TN         /*second commit point*/ \
lds_1_##TN selectFieldNext_Seq(lds_1, lds_2, next_seq,Head_seq,TN) lds_2_##TN \
lds_2_##TN isNull(lds_2, ld_6, next_seq,TN) pre_schedule \
lds_2_##TN isNotNull(lds_2, lds_3, next_seq,TN) lds_3_##TN \
lds_3_##TN assignField(lds_3, ld_6, Head_seq,next_seq,TN) pre_schedule \
/* } */ \
/* atomic { */ \
ld_6_##TN assignFromGlbField(ld_6, ld_7, t,Tail,TN) ld_7_##TN \
ld_7_##TN isNotEq(ld_7, ld_ver, h,t,TN) ld_ver_##TN \
ld_7_##TN isEq(ld_7, ld_8, h,t,TN) pre_schedule \
/* } */ \
/* atomic { */ \
ld_8_##TN FailCAS(ld_8, ld_ver, Tail,t,next,TN) ld_ver_##TN \
ld_8_##TN SuccCAS(ld_8, ld_ver, Tail,t,next,TN) ld_ver_##TN \
ld_ver_##TN verifySameDeqRes(ld_ver, ld_exit, TN) ld_exit_##TN   /*linearizability test*/ \
ld_exit_##TN Clear(ld_exit, l_dispatch, TN) pre_schedule \
/* } */ \



/**********************    Thread Creation **********************/

//producer
#define CREATE_P(TN) \
/* %thread producer_##TN { */ \
l_ready schedule(l_dispatch, TN) l_dispatch_##TN \
l_dispatch_##TN skip(l_dispatch, li_1, TN) pre_schedule \
 \
PRD(TN) \
 \
/* } */ \

//consumer
#define CREATE_C(TN) \
/* %thread consumer_##TN { */ \
l_ready schedule(l_dispatch, TN) l_dispatch_##TN \
l_dispatch_##TN skip(l_dispatch, ld_1, TN) pre_schedule \
 \
CNS(TN) \
 \
/* } */ \

//general client
#define CREATE_G(TN) \
/* %thread general_##TN { */ \
/*nondeterministic choice of transaction*/ \
l_ready schedule(l_dispatch, TN) l_dispatch_##TN \
l_dispatch_##TN skip(l_dispatch, li_1, TN) pre_schedule \
l_dispatch_##TN skip(l_dispatch, ld_1, TN) pre_schedule \
 \
PRD(TN) \
 \
CNS(TN) \
 \
/* } */ \


//create producer types
#if(0 < KNUM)
CREATE_P(p1)
#endif

#if(1 < KNUM)
CREATE_P(p2)
#endif

#if(2 < KNUM)
CREATE_P(p3)
#endif

#if(3 < KNUM)
CREATE_P(p4)
#endif

//create consumer types
#if(0 < KNUM)
CREATE_C(c1)
#endif

#if(1 < KNUM)
CREATE_C(c2)
#endif

#if(2 < KNUM)
CREATE_C(c3)
#endif

#if(3 < KNUM)
CREATE_C(c4)
#endif

//create general types
#if(0 < GNUM)
CREATE_G(g1)
#endif

#if(1 < GNUM)
CREATE_G(g2)
#endif

#if(2 < GNUM)
CREATE_G(g3)
#endif

#if(3 < GNUM)
CREATE_G(g4)
#endif


//%%
