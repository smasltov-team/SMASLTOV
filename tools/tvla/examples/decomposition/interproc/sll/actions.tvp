%action Skip() { 
    %t "skip"
}


///////////////////////////////////////
// Actions related to boolean variables

%action Set_True(lhs) {
  %t lhs + " = true"
  {
    lhs() = 1
  }
}

%action Set_False(lhs) {
  %t lhs + " = false"
  {
    lhs() = 0
  }
}

%action Is_True(lhs) {
  %t lhs
  %p lhs()
}

%action Is_False(lhs) {
  %t "!" + lhs
  %p !lhs()
}


///////////////////////////////////////
// Actions related to pointer variables

%action Set_Null_L(lhs) {
  %t lhs + " = NULL"
  {
    lhs(v) = 0
  }
}

%action Copy_Var_L(lhs, rhs) {
  %t lhs + " = " + rhs
  %f { rhs(v) } 
  {
    lhs(v) = rhs(v) 
  }
}

%action Malloc_L(lhs) {
  %t lhs + " = (L) malloc(sizeof(struct node))"
  %new
  {
    lhs(v) = isNew(v)
    t[n](v_1, v_2) = (isNew(v_1) ? v_1 == v_2 : t[n](v_1, v_2))
    r[n,lhs](v) = isNew(v)
    dle(v_1, v_2) = (isNew(v_1) & isNew(v_2)) |
                    (v_1 != v_2  & (isNew(v_1)| isNew(v_2))? 1/2 : dle(v_1, v_2))
    inOrder[dle,n](v) = (isNew(v) ? 1 : inOrder[dle,n](v))
    inROrder[dle,n](v) = (isNew(v) ? 1 : inROrder[dle,n](v))
    call(v) = call(v)
    local(v) = local(v) | isNew(v)
  }
}

%action Get_Next_L(lhs, rhs) {
  %t lhs + " = " + rhs + "->" + n
  %f { E(v_1, v_2) rhs(v_1) & n(v_1, v_2) &  t[n](v_2, v) }
  %message [local(v)]  (!E(v) rhs(v)) ->
            "Illegal dereference to\n" + n + " component of " + rhs
  {
    lhs(v) = E(v_1) rhs(v_1) & n(v_1, v)
  }
}

%action Set_Next_Null_L(lhs) {
  %t lhs + "->" + n + " = NULL"
  %f { lhs(v),
       // Optimized change-formula for t[n] update-formula.
       E(v_1, v_2) lhs(v_1) & n(v_1, v_2) & t[n](v_2, v)   
     }
  %message [local(v)] (!E(v) lhs(v)) ->
           "Illegal dereference to\n" + n + " component of " + lhs
  {
    n(v_1, v_2) = n(v_1, v_2) & !lhs(v_1)
  }
}

%action Set_Next_L(lhs, rhs) {
  %t lhs + "->" + n + " = " + rhs
  %f { lhs(v), rhs(v),
       // Optimized change-formula for t[n] upate-formula.
       E(v_4) rhs(v_4) & t[n](v_4, v_2)
     }
  %message [local(v)] (E(v_1, v_2) lhs(v_1) & n(v_1, v_2)) ->
           "Internal Error! assume that " + lhs + "->" + n + "==NULL"
  %message [local(v)] (E(v_1, v_2) lhs(v_1) & rhs(v_2) & t[n](v_2, v_1)) ->
           "A cycle may be introduced\nby assignment " +
           lhs + "->" + n + "=" + rhs
  {
    n(v_1, v_2) = n(v_1, v_2) | lhs(v_1) & rhs(v_2)
  }
}

%action Is_Not_Null_Var(lhs) {
  %t lhs + " != NULL"
  %f { lhs(v) } 
  %p non_null[lhs]() // E(v) lhs(v)
}

%action Is_Null_Var(lhs) {
  %t lhs + " == NULL"
  %f { lhs(v) } 
  %p !non_null[lhs]() // !(E(v) lhs(v))
}

%action Is_Eq_Var(lhs, rhs) {
  %t lhs + " == " + rhs
  %f { lhs(v), rhs(v) } 
  %p A(v) lhs(v) <-> rhs(v)
}

%action Is_Not_Eq_Var(lhs, rhs) {
  %t lhs + " != " + rhs
  %f { lhs(v), rhs(v) } 
  %p !A(v) lhs(v) <-> rhs(v)
}


//////////////////////
// Numeric comparisons

%action Greater_Data_L(lhs, rhs) {
  %t lhs + "->data > " + rhs + "->data"  
  %f { lhs(v_1) & rhs(v_2) & dle(v_1, v_2) }
  %p !E(v_1, v_2) lhs(v_1) & rhs(v_2) & dle(v_1, v_2)
}

%action Less_Equal_Data_L(lhs, rhs) {
  %t lhs + "->data <= " + rhs + "->data"     
  %f { lhs(v_1) & rhs(v_2) & dle(v_1, v_2) }
  %p E(v_1, v_2) lhs(v_1) & rhs(v_2) & dle(v_1, v_2)
}

%action Greater_Equal_Data_L(lhs, rhs) {
  %t lhs + "->data >= " + rhs + "->data"     
  %f { lhs(v_1) & rhs(v_2) & dle(v_2, v_1) }
  %p E(v_1, v_2) lhs(v_1) & rhs(v_2) & dle(v_2, v_1)
}


///////////////////////////
// Sorting specific actions

%action Assert_Sorted_L(lhs) {
  %t "AssertSorted(" + lhs +  ")"
  %p !(A(v) ((E(w) lhs(w) & t[n](w,v) & r[n,lhs](v)) -> inOrder[dle,n](v)))
  %message [local(v)] !(A(v) ((E(w) lhs(w) & t[n](w,v) & r[n,lhs](v)) -> inOrder[dle,n](v))) ->
           "Unable to prove that the list pointed-to by " + lhs + " is sorted"
}

%action Assert_Reverse_Sorted_L(lhs) {
  %t "AssertReverseSorted(" + lhs +  ")"
  %p !(A(v) ((E(w) lhs(w) & t[n](w,v) & r[n,lhs](v)) -> inROrder[dle,n](v)))
  %message [local(v)] !(A(v) ((E(w) lhs(w) & t[n](w,v) & r[n,lhs](v)) -> inROrder[dle,n](v))) ->
           "Unable to prove that the list pointed-to by " + lhs + 
           " is sorted in reversed order"
}

%action Assert_No_Leak(lhs) {
  %t "assertNoLeak(" + lhs + ")"
  %f { lhs(v) }
  %p E(v) !r[n,lhs](v) & local(v) & !live(v)
  %message [local(v)] ( E(v) !r[n,lhs](v) & local(v) & !live(v) ) -> 
           "There may be a list element not reachable from variable " + lhs + "!"
}


// Interprocedural
%action Call_2args(arg1, arg2, formal1, formal2) {
	%t "call(" + formal1 + "=" + arg1 + " , " + formal2 + "=" + arg2 + ")"
	%compose call(v1) & local(v2)
	{
		local(v) = local(v) & (|/{r[n,x](v) : x in {arg1, arg2}} | live(v))

		// Param passing: formal_i = arg_i
		in[formal1](v) = arg1(v)		
		in[formal2](v) = arg2(v)
		r_in[n,formal1](v) = r[n,arg1](v)
		r_in[n,formal2](v) = r[n,arg2](v)
		non_null_in[formal1]() = non_null[arg1]()
		non_null_in[formal2]() = non_null[arg2]()
    }
	%decompose
}

%action Call2Return_2args(arg1, arg2, formal1, formal2, lhs) {
	%t "call2return(" + formal1 + "=" + arg1 + " , " + formal2 + "=" + arg2 + ")"
	%compose call(v1) & local(v2)
	{
		local(v) = local(v) & 
			(!|/{r[n,x](v) : x in {arg1, arg2}} | |/{x(v) : x in {arg1, arg2}}) 
		// Record argument values for meet
		foreach (z in {arg1, arg2}) {
			arg[z](v) = z(v)
			r_arg[n,z](v) = r[n,z](v)
			non_null_arg[z]() = non_null[z]()			
		}
		// Prepare for lhs
		arg[lhs](v) = 1/2
	}
	%decompose
}

%action Return_2args(arg1, arg2, formal1, formal2, lhs, retVal) {
	%t "return(" + formal1 + "=>" + arg1 + " , " + formal2 + "=>" + arg2 + "," + retVal + "=>" + lhs + ")"
	%compose call(v1) & local(v2)
	{
		call(v) = local(v)
		local(v) = 0
		// Param return: arg_i = formal_i
		arg[arg1](v) = in[formal1](v)
		arg[arg2](v) = in[formal2](v)
		arg[lhs](v) = retVal(v) // Return value
		r_arg[n,arg1](v) = r_in[n,formal1](v)
		r_arg[n,arg2](v) = r_in[n,formal2](v)
		r_arg[n,lhs](v) = r[n,retVal](v)
		non_null_arg[arg1]() = non_null_in[formal1]()
		non_null_arg[arg2]() = non_null_in[formal2]()
		non_null_arg[lhs]() = non_null[retVal]()
		// Promise nothing on locals and formals
		foreach (formal in {formal1,formal2}) {
			in[formal](v) = 1/2
			formal(v) = 1/2			
		}
		foreach (arg in {arg1,arg2,retVal}) {
			arg(v) = 1/2			
		}
	}
	%decompose
}

%action Merge_2args(arg1, arg2, lhs) {
	%t "merge"
	%compose call(v1) & local(v2)
	%p E(v) live(v) & local(v) & call(v)
	{
		call(v) = 0
		local(v) = local(v) | call(v)
		// Kill recorded arguments
		foreach (z in {arg1, arg2, lhs}) {
			arg[z](v) = 0
		}
		// Assign the recorded return value
		lhs(v) = arg[lhs](v)
		r[n,lhs](v) = r_arg[n,lhs](v)
		non_null[lhs]() = non_null_arg[lhs]()
	}
	%decompose
}
	
%action Init_Formals() {
	%t "init"
	{
		foreach (z in Formals) {
			z(v) = in[z](v)
			r[n,z](v) = r_in[n,z](v) 
			non_null[z]() = non_null_in[z]() 
		}
		foreach (z in PVar - Formals) {
			z(v) = 0
		}
	}
}


