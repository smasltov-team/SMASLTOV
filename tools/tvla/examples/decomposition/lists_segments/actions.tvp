%action uninterpreted() { 
  %t "uninterpreted"
}

%action skip() { 
  %t "skip"
}


///////////////////////////////////////////////////////////////////////////
// Actions for statements manipulating pointer variables and pointer fields

%action Set_Null_L(lhs) {
  %t lhs + " = NULL"
  %compose |/{ z(v1) & lhs(v2) : z in PVar-{lhs}}
#ifndef STOP_ON_SHARE
  %message (E(v) lhs(v) & &/{!z2(v) : z2 in PVar-{lhs}} & &/{!CUList[n,z2](v) : z2 in PVar-{lhs}})
  	-> "Garbage is formed!"
#endif  	
  {
#ifdef STOP_ON_SHARE
#define LastInterruption(lhs,w) lhs(w) & !HeapShared(w) & &/{!z2(w) : z2 in PVar-{lhs}}
#else
#define LastInterruption(lhs,w) lhs(w) & &/{!z2(w) : z2 in PVar-{lhs}}
#endif
    lhs(v) = 0
    UList(a,b) = UList(a,b) |
    	(E(w) LastInterruption(lhs,w) & UList(a,w) & (w==b | CUList[n,lhs](b)))
    CUList[n,lhs](v) = 0
    foreach(z in PVar-{lhs}) {
      CUList[n,z](v) = CUList[n,z](v) |
    	(E(w) LastInterruption(lhs,w) & CUList[n,z](w) & (w==v | CUList[n,lhs](v)))      
    }
  }
  %decompose
}

%action Copy_Var_L(lhs, rhs) {
  %t lhs + " = " + rhs  
//  %compose |/{ lhs(v1) & z(v3) : z in PVar-{lhs}}
  %compose |/{ lhs(v1) & rhs(v2) & z(v3) : z in PVar-{lhs,rhs}}
  %f { lhs(v), rhs(v) } 
  %message (E(v) lhs(v)) -> 
           "Internal Error! " + lhs + " != NULL"  
  {
    lhs(v) = rhs(v) 
    UList(a,b) = UList(a,b)
    CUList[n,lhs](v) = CUList[n,rhs](v)
    foreach(z in PVar-{lhs}) {
      CUList[n,z](v) = CUList[n,z](v)
    }
  }
  %decompose
}

%action Malloc_L(lhs) {
  %t lhs + " = (L) malloc(sizeof(struct node)) "
  %compose |/{ z(v1) & lhs(v2) : z in PVar-{lhs}}
  %new
  {
    lhs(v) = isNew(v)
    CUList[n,lhs](v) = 0
    foreach(z in PVar-{lhs}) {
      CUList[n,z](v) = CUList[n,z](v)
    }
    UList(a,b) = UList(a,b) 
  }
  %decompose
}

%action Free_L(lhs) {
  %t "free(" + lhs + ")"
  %compose |/{ z(v1) & lhs(v2) : z in PVar-{lhs}}
  %f { lhs(v) }
  %message (E(v, v_1) lhs(v) & n(v, v_1)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  {
    foreach(z in PVar) {
      CUList[n,z](v) = CUList[n,z](v)
    }
    UList(a,b) = UList(a,b) 
  }
  %retain !lhs(v)
  %decompose
}

%action Get_Next_L(lhs, rhs) {
  %t lhs + " = " + rhs + "->" + n
  %compose |/{ z1(v1) & lhs(v2) & rhs(v3) : z1 in PVar-{lhs,rhs}}
//  %compose |/{ |/{ z1(v1) & z2(v2) & lhs(v3) & rhs(v4) : z2 in PVar-{lhs,rhs,z1}} : z1 in PVar-{lhs,rhs}}
  %f { E(v_1, v_2) rhs(v_1) & n(v_1, v_2) /*&  t[n](v_2, v)*/ }
  %message (!E(v) rhs(v)) ->
           "Illegal dereference to\n" + n + " component of " + rhs
  {
    lhs(v) = succ(rhs,v)
    CUList[n,lhs](v) = E(w) succ(rhs,w) & 
    	(Interruption(w) ? UList(w, v) : (CUList[n,rhs](v) & !v==w))
    CUList[n,rhs](v) = succ(rhs,v)
    UList(a,b) = UList(a,b) & !(rhs(a) & !succ(rhs,b))
    foreach(z in PVar-{lhs,rhs}) {
      CUList[n,z](v) = (Aliased(z,rhs) ? succ(rhs,v) : CUList[n,z](v))
    }
  }
  %decompose
}

%action Set_Next_Null_L(lhs) {
  %t lhs + "->" + n + " = NULL"
  %compose |/{ z(v1) & lhs(v2) : z in PVar-{lhs}}
  %f { 
       lhs(v)//,
       // optimized change-formula for t[n] update-formula
       //E(v_1, v_2) lhs(v_1) & n(v_1, v_2) & t[n](v_2, v)   
     }
  %message (E(v,w) lhs(v) & n(v,w) & &/{!z(w) : z in PVar}) ->
           "Internal Error! " + lhs + "->" + n + " is not pointed to"
  %message (!E(v) lhs(v)) -> "Illegal dereference to\n" +
                             n + " component of " + lhs
  {
    n(v_1, v_2) = n(v_1, v_2) & !lhs(v_1)
    CUList[n,lhs](v) = 0
    UList(a,b) = UList(a,b) & !(lhs(a) & succ(lhs,b))
    foreach(z in PVar-{lhs}) {
      CUList[n,z](v) = (Aliased(z,lhs) ? 0 : CUList[n,z](v))
    }
  }
  %decompose
}

%action Set_Next_L(lhs, rhs) {
  %t lhs + "->" + n + " = " + rhs
  %compose |/{ z(v1) & lhs(v2) & rhs(v3) : z in PVar-{lhs,rhs}}
  %f {
       lhs(v), rhs(v)//,
       // optimized change-formula for t[n] upate-formula
       //E(v_4) rhs(v_4) & t[n](v_4, v_2)
     }
  %message (E(v_1, v_2) lhs(v_1) & n(v_1, v_2)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
#ifndef CYCLIC
  %message (E(v_1, v_2) lhs(v_1) & rhs(v_2) & UList*(v_2, v_1)) -> 
           "A cycle may be introduced\nby assignment " + lhs + "->" + n + "=" + rhs
#endif           
  {
    n(v_1, v_2) = n(v_1, v_2) | lhs(v_1) & rhs(v_2)
    CUList[n,lhs](v) = rhs(v)
    UList(a,b) = UList(a,b) | (lhs(a) & rhs(b))
    foreach(z in PVar-{lhs}) {
      CUList[n,z](v) = (Aliased(z,lhs) ? rhs(v) : CUList[n,z](v))
    }
  }
  %decompose
}

//////////////////////////////////////////////////////////////////
// Actions needed to simulate program conditions involving pointer
// equality tests.

%action Is_Not_Null_Var(lhs) {
  %t lhs + " != NULL"
  %compose |/{ z(v1) & lhs(v2) : z in PVar-{lhs}}
  %f { lhs(v) } 
  %p E(v) lhs(v)
  %decompose
}

%action Is_Null_Var(lhs) {
  %t lhs + " == NULL"
  %compose |/{ z(v1) & lhs(v2) : z in PVar-{lhs}}
  %f { lhs(v) } 
  %p !(E(v) lhs(v))
  %decompose
}

%action Is_Eq_Var(lhs, rhs) {
  %t lhs + " == " + rhs
  %compose |/{ z(v1) & lhs(v2) & rhs(v3) : z in PVar-{lhs,rhs}}
  %f { lhs(v), rhs(v) } 
  %p A(v) lhs(v) <-> rhs(v)
  %decompose
}

%action Is_Not_Eq_Var(lhs, rhs) {
  %t lhs + " != " + rhs
  %compose |/{ z(v1) & lhs(v2) & rhs(v3) : z in PVar-{lhs,rhs}}
  %f { lhs(v), rhs(v) } 
  %p !A(v) lhs(v) <-> rhs(v)
  %decompose
}


/////////////////////////////////////////
// Actions for testing various properties

%action Assert_ListInvariants(lhs) {
  %t "assertListInvariants(" + lhs + ")"
  %compose |/{ z(v1) & lhs(v2) : z in PVar-{lhs}}
  %f { lhs(v) }
#ifdef CYCLIC
  %p 0
#else  
  %p E(w,v) lhs(w) & UList*(w,v) & is[n](v)
  %message ( E(w,v) lhs(w) & UList*(w,v) & is[n](v) ) -> 
           "The list pointed by " + lhs + " may be shared!"
#endif  
  %decompose
}

%action Assert_No_Leak(lhs) {
  %t "assertNoLeak(" + lhs + ")"
  %compose |/{ z(v1) & lhs(v2) : z in PVar-{lhs}}
  %f { lhs(v) }
#ifdef STOP_ON_SHARE
  %p E(v) (A(w) lhs(w) -> !UList*(w,v))
  %message ( E(v) (A(w) lhs(w) -> !UList*(w,v)) ) -> 
           "There may be a list element not reachable from variable " + lhs + "!"
#else  
  %p 0
#endif
  %decompose
}

