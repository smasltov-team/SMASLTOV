#ifdef CYCLIC
#define EDGE_PROPS
#else
#define EDGE_PROPS acyclic
#endif

//////////////////
// Core Predicates

// For every program variable z there is a unary predicate that holds for
// list elements pointed by z.
// The unique property is used to convey the fact that the predicate can hold
// for at most one individual.
// The pointer property is a visualization hint for graphical renderers.
foreach (z in PVar) {
  %p z(v_1) unique pointer
}

// The predicate n represents the n field of the list data type.
%p n(v_1, v_2) function EDGE_PROPS


/////////////////////////////////////////////
// Instrumentation (i.e., derived) predicates
/*
// The c[v] predicate holds for elements that reside on a cycle
// along the n field.
%i c[n](v) =  E(v_1) (n(v_1, v) & n*(v, v_1))


// For every program variable z the predicate r[n,z] holds for individual
// v when v is reachable from variable z along the n field (more formally,
// the corresponding list element is reachable from z).
foreach (z in PVar) {
   %i r[n,z](v) = E(v_1) (z(v_1) & n*(v_1, v))
}
*/

// The is[n] predicate holds for list elements pointed by two different
// list elements.
%i is[n](v) = E(v_1, v_2) (v_1 != v_2 & n(v_1, v) & n(v_2, v))


#define PtByVar(v1)      (|/{ z1(v1) : z1 in PVar })
#define HeapShared(v2)   is[n](v2) 
//(E(w1,w2) n(w1,v2) & n(w2,v2) & w1!=w2)
#ifdef STOP_ON_SHARE
#define Interruption(v3) (PtByVar(v3) | HeapShared(v3))
#else
#define Interruption(v3) PtByVar(v3)
#endif

#define UListOne(u,v)       (n(u,v))
#define UListTwo(v4,v5)   (E(w3) (!Interruption(w3) & n(v4,w3) & n(w3,v5)))
#define UListGTwo(v6,v7)  (E(w4,w5) n(v6,w4) & n(w5,v7) & TC(w4,w5)(w6,w7)(n(w6,w7) & !Interruption(w6) & !Interruption(w7)))

%i UList(va,vb) = UListOne(va,vb) | UListTwo(va,vb) | UListGTwo(va,vb)

foreach (z in PVar) {
   %i CUList[n,z](v) = E(v_1) z(v_1) & UList(v_1,v)
   
#ifndef DISABLE_NON_NULL       
   %i nonNull[z]() = E(v) z(v)
#endif
}

#ifndef DISABLE_INCOMING       
%i incoming[n](v) = E(w) n(w, v)
%r w==w & !incoming[n](v) ==> !n(w, v)
#endif       

//%r E(v_2)  UList(v_1, v_2) &  UList(v_2, v_3) & !Interruption(v_2) ==>  UList(v_1, v_3)
//%r E(v_1)  UList(v_1, v_2) & !UList(v_1, v_3) & !Interruption(v_2) ==> !UList(v_2, v_3)
//%r E(v_3) !UList(v_1, v_3) &  UList(v_2, v_3) & !Interruption(v_2) ==> !UList(v_1, v_2)

//%r E(v_1) UList(v_1, v_2) &  UList(v_1, v_3) & !UList(v_2, v_3) & v_2 != v_3 ==> UList(v_3, v_2) 

   
foreach (z in PVar) {
   // Induced by the uniqueness of variables
   %r z(v_1) & CUList[n,z](v_2) ==> UList(v_1, v_2)

   %r z(v_1) & !CUList[n,z](v_2) ==> !n(v_1, v_2)

   %r CUList[n,z](v_1) & !CUList[n,z](v_2) & !Interruption(v_1) ==> !n(v_1, v_2)

#ifndef STOP_ON_SHARE
   // No garbage! For each node there must be atleast one CUList[n,z]
   %r &/{!z2(w) : z2 in PVar} & &/{!CUList[n,z2](w) : z2 in PVar-{z}} ==> CUList[n,z](w)
#endif   

#ifndef DISABLE_INCOMING
  %r CUList[n,z](v) ==> incoming[n](v)
#endif  
}

#define Aliased(z1,z2)    (E(v37) (z1(v37) & z2(v37)))
#define succ(x, v) (E(v_1) x(v_1) & n(v_1, v))

#ifndef CYCLIC
%r v_1 == v_2 ==> !n(v_1, v_2)
#endif


foreach (z in PVar) {
  %dname z(v) | CUList[n,z](v)
}
