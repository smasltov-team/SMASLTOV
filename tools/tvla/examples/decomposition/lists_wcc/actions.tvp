%action uninterpreted() { 
  %t "uninterpreted"
}

%action skip() { 
  %t "skip"
}


///////////////////////////////////////////////////////////////////////////
// Actions for statements manipulating pointer variables and pointer fields

%action Set_Null_L(lhs) {
  %t lhs + " = NULL"
  %message [wcc[lhs](v)] (E(v) lhs(v) & &/{!r[n,z1](v) : z1 in PVar-{lhs}})
  	-> "Garbage is formed!"
  {
    lhs(v) = 0
    wcc[lhs](v) = 0
  }
}

%action Copy_Var_L(lhs, rhs) {
  %t lhs + " = " + rhs
  %compose wcc[rhs](v1) & wcc[lhs](v2)
  %f { rhs(v) } 
  %message [wcc[rhs](v1) & wcc[lhs](v2)] (E(v) lhs(v)) -> 
           "Internal Error! " + lhs + " != NULL"  
  {
    lhs(v) = rhs(v) 
    wcc[lhs](v) = wcc[rhs](v)
  }
  %decompose
}

%action Malloc_L(lhs) {
  %t lhs + " = (L) malloc(sizeof(struct node)) "
  %message [wcc[lhs](v)] (E(v) lhs(v)) -> 
           "Internal Error! " + lhs + " != NULL"  
  %new
  {
    lhs(v) = isNew(v)
    t[n](v_1, v_2) = (isNew(v_1) ? v_1 == v_2 : t[n](v_1, v_2))
    r[n, lhs](v) = isNew(v)
    wcc[lhs](v) = isNew(v)
#ifndef DISABLE_NON_NULL
    nonNull[lhs]() = 1
#endif        
    foreach(z in PVar-{lhs}) {
      r[n,z](v) = r[n,z](v)
      wcc[z](v) = wcc[z](v)
#ifndef DISABLE_NON_NULL
      nonNull[z]() = nonNull[z]() 
#endif        
    }
    is[n](v) = is[n](v)
  }
}

%action Free_L(lhs) {
  %t "free(" + lhs + ")"
  %f { lhs(v) }
  %message [wcc[lhs](v)] (E(v, v_1) lhs(v) & n(v, v_1)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  {
    t[n](v_1, v_2) = t[n](v_1, v_2)
    foreach(z in PVar) {
      r[n,z](v) = r[n,z](v)
      wcc[z](v) = wcc[z](v)
    }
    is[n](v) = is[n](v)  
  }
  %retain !lhs(v)
}

%action Get_Next_L(lhs, rhs) {
  %t lhs + " = " + rhs + "->" + n
  %compose wcc[rhs](v1) & wcc[lhs](v2)
  %f { E(v_1, v_2) rhs(v_1) & n(v_1, v_2) &  t[n](v_2, v) }
  %message [wcc[lhs](v1) & wcc[rhs](v2)] (!E(v) rhs(v)) ->
           "Illegal dereference to\n" + n + " component of " + rhs
  %message [wcc[lhs](v1) & wcc[rhs](v2)] (E(v) lhs(v)) -> 
           "Internal Error! " + lhs + " != NULL"  
  {
    lhs(v) = wcc[rhs](v) & E(v_1) rhs(v_1) & n(v_1, v)
    // Same as y as long as we don't fall of the end
    wcc[lhs](v) = E(wr,wrn) rhs(wr) & n(wr, wrn) & wcc[rhs](v) 
  }
  %decompose
}

%action Set_Next_Null_L(lhs) {
  %t lhs + "->" + n + " = NULL"
  %compose |/{ wcc[lhs](v1) & wcc[z](v2) : z in PVar-{lhs}}
  %f { 
       lhs(v),
       // optimized change-formula for t[n] update-formula
       E(v_1, v_2) lhs(v_1) & n(v_1, v_2) & t[n](v_2, v)   
     }
  %message (!E(v) lhs(v)) -> "Illegal dereference to\n" +
                             n + " component of " + lhs

  {
    n(v_1, v_2) = n(v_1, v_2) & !lhs(v_1)
    foreach(z in PVar) {
    	// If z is in the same wcc as lhs, make sure that z and v are not on different sides of lhs
    	wcc[z](v) = wcc[z](v) & !(E(wl) lhs(wl) & wcc[z](wl) & !(r[n,z](wl) <-> t[n](v, wl)))
    }  
  }
  %decompose
}

%action Set_Next_L(lhs, rhs) {
  %t lhs + "->" + n + " = " + rhs
  %compose |/{ wcc[lhs](v1) & wcc[rhs](v2) & wcc[z](v3) : z in PVar-{lhs,rhs}}
  %f {
       lhs(v), rhs(v),
       // optimized change-formula for t[n] upate-formula
       E(v_4) rhs(v_4) & t[n](v_4, v_2)
     }
  %message (E(v_1, v_2) lhs(v_1) & n(v_1, v_2)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  %message (E(v_1, v_2) lhs(v_1) & rhs(v_2) & t[n](v_2, v_1)) -> 
           "A cycle may be introduced\nby assignment " + lhs + "->" + n + "=" + rhs
  {
    n(v_1, v_2) = n(v_1, v_2) | lhs(v_1) & rhs(v_2)
    foreach(z in PVar) {
    	wcc[z](v) = wcc[z](v) | 
    		(E(wr) rhs(wr) & wcc[z](wr) & wcc[lhs](v)) | 
    		(E(wl) lhs(wl) & wcc[z](wl) & wcc[rhs](v))
    }  
  }
  %decompose
}

//////////////////////////////////////////////////////////////////
// Actions needed to simulate program conditions involving pointer
// equality tests.

%action Is_Not_Null_Var(lhs) {
  %t lhs + " != NULL"
  %compose |/{ wcc[lhs](v1) & wcc[z](v2) : z in PVar-{lhs}}
  %f { lhs(v) } 
  %p E(v) lhs(v)
  %decompose
}

%action Is_Null_Var(lhs) {
  %t lhs + " == NULL"
  %compose |/{ wcc[lhs](v1) & wcc[z](v2) : z in PVar-{lhs}}
  %f { lhs(v) } 
  %p !(E(v) lhs(v))
  %decompose
}

%action Is_Eq_Var(lhs, rhs) {
  %t lhs + " == " + rhs
  %compose |/{ wcc[lhs](v1) & wcc[z](v2) : z in PVar-{lhs}}
  %f { lhs(v), rhs(v) } 
  %p A(v) lhs(v) <-> rhs(v)
  %decompose
}

%action Is_Not_Eq_Var(lhs, rhs) {
  %t lhs + " != " + rhs
  %compose |/{ wcc[lhs](v1) & wcc[z](v2) : z in PVar-{lhs}}
  %f { lhs(v), rhs(v) } 
  %p !A(v) lhs(v) <-> rhs(v)
  %decompose
}


/////////////////////////////////////////
// Actions for testing various properties

%action Assert_ListInvariants(lhs) {
  %t "assertListInvariants(" + lhs + ")"
  %f { lhs(v) }
  %p E(v) r[n,lhs](v) & is[n](v)
  %message [wcc[lhs](v)] ( E(v) r[n,lhs](v) & is[n](v) ) -> 
           "The list pointed by " + lhs + " may be shared!"
}

%action Assert_No_Leak(lhs) {
  %t "assertNoLeak(" + lhs + ")"
  %f { lhs(v) }
  %p 0 // Tested locally
}
