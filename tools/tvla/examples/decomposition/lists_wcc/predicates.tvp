//////////////////
// Core Predicates

// For every program variable z there is a unary predicate that holds for
// list elements pointed by z.
// The unique property is used to convey the fact that the predicate can hold
// for at most one individual.
// The pointer property is a visualization hint for graphical renderers.
foreach (z in PVar) {
  %p z(v_1) unique pointer
}

// The predicate n represents the n field of the list data type.
%p n(v_1, v_2) function acyclic


/////////////////////////////////////////////
// Instrumentation (i.e., derived) predicates

// The is[n] predicate holds for list elements pointed by two different
// list elements.
%i is[n](v) = E(v_1, v_2) (v_1 != v_2 & n(v_1, v) & n(v_2, v))

// The t[n] predicate records transitive reflexive reachability between
// list elements along the n field.
%i t[n](v_1, v_2) = n*(v_1, v_2) transitive reflexive

// Integrity constraints for transitive reachability
%r !t[n](v_1, v_2) ==> !n(v_1, v_2)
%r !t[n](v_1, v_2) ==> v_1 != v_2
%r E(v_1) (t[n](v_1, v_2) & t[n](v_1, v_3) & !t[n](v_2, v_3)) ==> t[n](v_3, v_2)

// For every program variable z the predicate r[n,z] holds for individual
// v when v is reachable from variable z along the n field (more formally,
// the corresponding list element is reachable from z).
foreach (z in PVar) {
  %i r[n,z](v) = E(v_1) (z(v_1) & t[n](v_1, v))
  
//  %i wcc[z](v) = E(v_1) (z(v_1) & TC(v_1, v)(w_1, w_2)(t[n](w_1, w_2) | t[n](w_2, w_1)))
  %i wcc[z](v) = E(v_z, w) (z(v_z) & t[n](w, v_z) & t[n](w, v))
  
#ifndef DISABLE_NON_NULL       
   %i nonNull[z]() = E(v) z(v)
#endif
}

foreach (z1 in PVar) {
  %r wcc[z1](v) & !wcc[z1](w) ==> !t[n](v, w)
  %r wcc[z1](v) & !wcc[z1](w) ==> !t[n](w, v)
  %r E(v) wcc[z1](v) & t[n](v, w) ==> wcc[z1](w) 
  %r E(v) wcc[z1](v) & t[n](w, v) ==> wcc[z1](w)
  %r !wcc[z1](v) ==> !z1(v)   
/*
  foreach (z2 in PVar-{z1}) {
  	%r E(w)  wcc[z1](w) &  wcc[z2](w) &  wcc[z1](v) ==>  wcc[z2](v)
  	%r E(w)  wcc[z1](w) &  wcc[z2](w) & !wcc[z2](v) ==> !wcc[z1](v)
  	%r E(w)  wcc[z1](w) & !wcc[z2](w) &  wcc[z1](v) ==> !wcc[z2](v)
  	%r E(w)  wcc[z1](w) & !wcc[z2](w) &  wcc[z2](v) ==> !wcc[z1](v)
  }
*/
}


foreach (z in PVar) {
	%dname wcc[z](v) z
}