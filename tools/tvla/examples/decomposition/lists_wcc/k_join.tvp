///////
// Sets

%s PVar {x, t, l1, l2, l3, l4, l5, l6 , l7, l8 }

#include "predicates.tvp"

%%

#include "actions.tvp"

%%

#define JOIN_LIST(list, tmp, olist, beforeL, afterL) \
beforeL 	uninterpreted()			Ljoin1##list \
Ljoin1##list Is_Not_Null_Var(list)	Ljoin2##list \
Ljoin1##list Is_Null_Var(list)		afterL \
Ljoin2##list Copy_Var_L(tmp, list)	Ljoin2a##list \
Ljoin2a##list Set_Null_L(list)		Ljoin3##list \
Ljoin3##list Get_Next_L(list, tmp)	Ljoin4##list \
Ljoin4##list Set_Next_Null_L(tmp)	Ljoin5##list \
Ljoin5##list Set_Next_L(tmp,olist)	Ljoin5a##list \
Ljoin5a##list Set_Null_L(olist)		Ljoin6##list \
Ljoin6##list Copy_Var_L(olist, tmp)	Ljoin7##list \
Ljoin7##list Set_Null_L(tmp)		afterL

///////////////////////////////////////////////////////////////////////////////
// Transition system for a function that reverses a singly-linked list in-situ.

L1 uninterpreted() 	  exit
L1 uninterpreted() 	  L2
JOIN_LIST(l1, t, x, L2, L1)
JOIN_LIST(l2, t, x, L2, L1)
JOIN_LIST(l3, t, x, L2, L1)
JOIN_LIST(l4, t, x, L2, L1)
JOIN_LIST(l5, t, x, L2, L1)
JOIN_LIST(l6, t, x, L2, L1)
JOIN_LIST(l7, t, x, L2, L1)
JOIN_LIST(l8, t, x, L2, L1)

exit Assert_ListInvariants(l1) error
exit Assert_ListInvariants(l2) error
exit Assert_ListInvariants(l3) error
exit Assert_ListInvariants(l4) error
exit Assert_ListInvariants(l5) error
exit Assert_ListInvariants(l6) error
exit Assert_ListInvariants(l7) error
exit Assert_ListInvariants(l8) error


