%s Roots { root1
#if(TNUM > 1)
,root2
#endif
#if(TNUM > 2)
,root3
#endif
#if(TNUM > 3)
,root4
#endif
}
%s PVar {cur, prev, t, tmp} + Roots
%s TSel {left, right}

%p went_left()

#include "pred_tree.tvp"

foreach (root in Roots) {
  %i curInRoot[root]() = E(v) wcc[cur](v) & wcc[root](v) 
  %r curInRoot[root]() & wcc[cur](v) ==> wcc[root](v)
  %r curInRoot[root]() & !wcc[cur](v) ==> !wcc[root](v)
  %r curInRoot[root]() & wcc[root](v) ==> wcc[cur](v)
  %r curInRoot[root]() & !wcc[root](v) ==> !wcc[cur](v)
}

%%
#include "actions_tree.tvp"
%%
 start skip() n0
// while (true) do {
 n0 Malloc_T(t) n0a //  t = new TreeNode(data) ;
 n0a Copy_Var_T(cur, root1) n1
#if(TNUM > 1)
 n0a Copy_Var_T(cur, root2) n1
#endif
#if(TNUM > 2)
 n0a Copy_Var_T(cur, root3) n1
#endif
#if(TNUM > 3)
 n0a Copy_Var_T(cur, root4) n1
#endif
 n1 Assert_Not_Null_Var(cur) n2 // expecting non null roots
// while (cur != NULL && cur->data != t->data) {
   n2 Is_Not_Null_Var(cur) n3
   n2 Is_Null_Var(cur) n8
   // Uninterpret data values  cur->data != t->data
   n3 uninterpreted() n4
   n3 uninterpreted() n8

   // prev = cur;
   n4 Set_Null_T(prev) n4a
   n4a Copy_Var_T(prev, cur) n5

   // if (t->data < cur->data)
      n5 uninterpreted() n6
      n5 uninterpreted() n7
    // cur = cur->left;
      n6 Set_True(went_left) n6a
      n6a Get_Sel_T(tmp, cur, left) n6b
      n6b Set_Null_T(cur) n6c
      n6c Copy_Var_T(cur, tmp) n6d
      n6d Set_Null_T(tmp) n2
   // else cur = cur->right;
      n7 Set_False(went_left) n7a
      n7a Get_Sel_T(tmp, cur, right) n7b
      n7b Set_Null_T(cur) n7c
      n7c Copy_Var_T(cur, tmp) n7d
      n7d Set_Null_T(tmp) n2
// }


// Don't insert duplicates
// if (cur == NULL) {
   n8 Is_Null_Var(cur) notFound
   n8 Is_Not_Null_Var(cur) n8_a
   // Null out cur and prev, as an optimizer could.
   n8_a Set_Null_T(cur) n8_b
   n8_b Set_Null_T(prev) n8_c
   n8_c Free_T(t) n0
  // if (el->data < prev->data)
  notFound Is_True(went_left) n11
  notFound Is_False(went_left) n13
      // prev->left = t;
      n11 Set_Sel_Null_T(prev, left) n12
      n12 Set_Sel_T(prev, left, t) n12_a
      // Null out et and prev, as an optimizer could.
      n12_a Set_Null_T(t) n12_b
      n12_b Set_Null_T(prev) n0

   // else prev->right = t;
      n13 Set_Sel_Null_T(prev, right) n14
      n14 Set_Sel_T(prev, right, t) n14_a
      // Null out t and prev, as an optimizer could.
      n14_a Set_Null_T(t) n14_b
      n14_b Set_Null_T(prev) n0
// }
