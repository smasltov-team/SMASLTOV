/***********************************************************
* set_pred.tvp
***********************************************************/
%s Unary {}
%s UnaryG {}
%s UnaryR {}
%s Binary {}

foreach (tn in Components) {
  %p tid[tn](v) unique
}
foreach (tn1 in Components) {
	%r tid[tn1](v) ==> isthread(v)
	%r !isthread(v) ==> !tid[tn1](v)
	%r A(v) !tid[tn1](v) ==> 0
	
	foreach (tn2 in Components-{tn1}) {
  		%r tid[tn1](v) ==> !tid[tn2](v)
  	}
}

%p alloc(v)
%p save[alloc](v)
%s Unary Unary + {alloc} 

foreach (loc in locations) {
  %p at[loc](thread) 
  %r at[loc](v) ==> isthread(v)
  %r !isthread(v) ==> !at[loc](v)

  %p save[at[loc]](thread)   
  %r save[at[loc]](v) ==> isthread(v)
  %r !isthread(v) ==> !save[at[loc]](v)
}
%s Unary Unary + { at[loc] : loc in locations } 

foreach (bool in BoolFields) {
   %p bool(v) nonabs
   %r bool(v) ==> !isthread(v)
   %r isthread(v) ==> !bool(v)

   %p save[bool](v) nonabs
   %r save[bool](v) ==> !isthread(v)
   %r isthread(v) ==> !save[bool](v)
}
%s Unary Unary + BoolFields

foreach (bool in BoolLocals) {
   %p bool(v)
   %r bool(v) ==> isthread(v)
   %r !isthread(v) ==> !bool(v)

   %p save[bool](v)
   %r save[bool](v) ==> isthread(v)
   %r !isthread(v) ==> !save[bool](v)
}

%s Unary Unary + BoolLocals

#define TRUE isthread
%p FALSE(v)

/**********************************************/
/*************** Core Predicates **************/

// Pointer field fld of object o_1 points to object o_2
foreach (fld in NextFields) {
    %p rv[fld](o_1, o_2) function acyclic
    %p save[rv[fld]](o_1, o_2) function acyclic
}
%s Binary Binary + { rv[fld] : fld in NextFields }

// Referenced-by predicate for global variables (fields of shared ds)
foreach (fld in GlobalFields) {
    %p r_by[fld](o) unique pointer
    %p save[r_by[fld]](o) unique pointer
}
%s Unary Unary + { r_by[fld] : fld in GlobalFields }

//referenced-by prediacte for thread-local variables
foreach (fld in LocalFields) {
    %p fld(v1,v2) function
    %r !isthread(w1) ==> !fld(w1,v1)
    %r isthread(v1) ==> !fld(w1,v1)

    %p save[fld](v1,v2) function
    %r !isthread(w1) ==> !save[fld](w1,v1)
    %r isthread(v1) ==> !save[fld](w1,v1)
}
%s Binary Binary + LocalFields

foreach (tn in Components) {
    foreach (fld in LocalFields) {
	    %i save[r_by[fld,tn]](v1) = E(w1) tid[tn](w1) & save[fld](w1,v1) pointer unique
	    %r tid[tn](w1) & save[r_by[fld,tn]](v1) ==> save[fld](w1,v1)
    }
}
foreach (fld in LocalFields) {
    %i r_by[fld,G](v1) = E(w1) tid[G](w1) & fld(w1,v1) pointer unique
    %r tid[G](w1) & r_by[fld,G](v1) ==> fld(w1,v1)
}

%s UnaryG UnaryG + { r_by[fld, G] : fld in LocalFields }
%s UnaryR UnaryR + { r_by[fld, R] : fld in LocalFields }

//node v appears only in the concurrent heap or only in the sequential heap.
%p dnode(v)
%p save[dnode](v)

%s Unary Unary + {dnode}

//value of node v_1 is less or equal to value of node v_2
%p dle(v_1, v_2) transitive reflexive
%p save[dle](v_1, v_2) transitive reflexive
%s Binary Binary + { dle } 

//thread t (general client) is executing operation op (IN THE NON-COMMON PART OF THE CODE)
foreach (op in Operations) {
   %p choice[op](t) 
   %r choice[op](v) ==> isthread(v)
   %r !isthread(v) ==> !choice[op](v)

   %p save[choice[op]](t) 
   %r save[choice[op]](v) ==> isthread(v)
   %r !isthread(v) ==> !save[choice[op]](v)
}
%s Unary Unary + { choice[op] : op in Operations } 

/*********************************************************/
/*************** Instrumentation Predicates **************/

%i eq(v1,v2) = dle(v1,v2) & dle(v2,v1) & v1 != v2 symmetric
%i save[eq](v1,v2) = save[dle](v1,v2) & save[dle](v2,v1) & v1 != v2 symmetric
%s Binary Binary + {eq}

%r !save[eq](v1, v2) ==> !save[eq](v2, v1)
%r !save[dle](v1, v2) ==> !save[eq](v1, v2)
%r !eq(v1, v2) ==> !eq(v2, v1)
%r !dle(v1, v2) ==> !eq(v1, v2)

%r save[eq](v1, v2) & save[eq](v1, v3) & v2 != v3 ==> save[eq](v2, v3)
%r save[eq](v1, v2) & !save[eq](v1, v3) & v1 != v3 ==> !save[eq](v2, v3)
%r eq(v1, v2) & eq(v1, v3) & v2 != v3 ==> eq(v2, v3)
%r eq(v1, v2) & !eq(v1, v3) & v1 != v3 ==> !eq(v2, v3)

%r save[eq](v1, v2) & save[dle](v1, v3) ==> save[dle](v2, v3)
%r save[eq](v1, v2) & !save[dle](v2, v3) ==> !save[dle](v1, v3)
%r save[dle](v1, v3) & !save[dle](v2, v3) ==> !save[eq](v1, v2)
%r eq(v1, v2) & dle(v1, v3) ==> dle(v2, v3)
%r eq(v1, v2) & !dle(v2, v3) ==> !dle(v1, v3)
%r dle(v1, v3) & !dle(v2, v3) ==> !eq(v1, v2)

%r save[eq](v1, v2) & save[dle](v3, v2) ==> save[dle](v3, v1)
%r save[eq](v1, v2) & !save[dle](v3, v1) ==> !save[dle](v3, v2)
%r save[dle](v3, v1) & !save[dle](v3, v2) ==> !save[eq](v1, v2)
%r eq(v1, v2) & dle(v3, v2) ==> dle(v3, v1)
%r eq(v1, v2) & !dle(v3, v1) ==> !dle(v3, v2)
%r dle(v3, v1) & !dle(v3, v2) ==> !eq(v1, v2)

//node v is in strictly ascending order with respect to its "n" successor
%i inSOrder[dle,n](v) = !isthread(v) &
                        (A(v_1) (rv[n](v, v_1) -> (dle(v, v_1) & !dle(v_1, v)))) nonabs
%i save[inSOrder[dle,n]](v) = !isthread(v) &
                        (A(v_1) (save[rv[n]](v, v_1) -> (dle(v, v_1) & !dle(v_1, v)))) nonabs
%s Unary Unary + { inSOrder[dle,n] }

%i bn[n](o_1,o_2) = rv[n]*(o_1,o_2) transitive reflexive
%i save[bn[n]](o_1,o_2) = save[rv[n]]*(o_1,o_2) transitive reflexive
%s Binary Binary + { bn[n] }

%i rt[Head](v) = E(w) r_by[Head](w) & bn[n](w,v)
%i rt[Tail](v) = E(w) r_by[Tail](w) & bn[n](v,w)

%i save[rt[Head]](v) = E(w) save[r_by[Head]](w) & save[bn[n]](w,v)
%i save[rt[Tail]](v) = E(w) save[r_by[Tail]](w) & save[bn[n]](v,w)
%s Unary Unary + { rt[Head], rt[Tail] }

/*********************************************************/
/*************** Consistency Rules **************/

%r !isthread(v_1) & !isthread(v_2) & save[alloc](v_1) & save[alloc](v_2) & !save[dle](v_1, v_2) ==> save[dle](v_2, v_1)
%r save[dle](v_1,v_2) & save[dle](v_2,v_3) & !save[dle](v_3,v_2) ==> !save[dle](v_3,v_1)

%r !isthread(v_1) & !isthread(v_2) & !dle(v_1, v_2) ==> dle(v_2, v_1)
%r dle(v_1,v_2) & dle(v_2,v_3) & !dle(v_3,v_2) ==> !dle(v_3,v_1)

%r rv[n](v_1, v_2) ==> bn[n](v_1, v_2)
%r !bn[n](v_1, v_2) ==> !rv[n](v_1, v_2)
%r save[rv[n]](v_1, v_2) ==> save[bn[n]](v_1, v_2)
%r !save[bn[n]](v_1, v_2) ==> !save[rv[n]](v_1, v_2)

%r inSOrder[dle,n](v) & dle(u,v) ==> !rv[n](v,u)
%r save[inSOrder[dle,n]](v) & dle(u,v) ==> !save[rv[n]](v,u)

// transitivity
%r E(v_2) bn[n](v_1,v_2) & bn[n](v_2,v_3) ==> bn[n](v_1,v_3)
%r E(v_1) bn[n](v_1,v_2) & !bn[n](v_1,v_3) ==> !bn[n](v_2,v_3)
%r E(v_3) bn[n](v_2,v_3) & !bn[n](v_1,v_3) ==> !bn[n](v_1,v_2)
%r E(v_2) save[bn[n]](v_1,v_2) & save[bn[n]](v_2,v_3) ==> save[bn[n]](v_1,v_3)
%r E(v_1) save[bn[n]](v_1,v_2) & !save[bn[n]](v_1,v_3) ==> !save[bn[n]](v_2,v_3)
%r E(v_3) save[bn[n]](v_2,v_3) & !save[bn[n]](v_1,v_3) ==> !save[bn[n]](v_1,v_2)

// Acyclicity
%r bn[n](v_1, v_2) ==> !rv[n](v_2,v_1)
%r save[bn[n]](v_1, v_2) ==> !save[rv[n]](v_2,v_1)

%r E(v_1) rv[n](v_1,v_2) & bn[n](v_1,v_3) & v_1 != v_3 ==> bn[n](v_2,v_3)
%r E(v_3) v_1 != v_3 & bn[n](v_1,v_3) & !bn[n](v_2,v_3) ==> !rv[n](v_1,v_2)
%r E(v_2) rv[n](v_1,v_2) & v_1 != v_3 & !bn[n](v_2,v_3) ==> !bn[n](v_1,v_3)
%r E(v_1) save[rv[n]](v_1,v_2) & save[bn[n]](v_1,v_3) & v_1 != v_3 ==> save[bn[n]](v_2,v_3)
%r E(v_3) v_1 != v_3 & save[bn[n]](v_1,v_3) & !save[bn[n]](v_2,v_3) ==> !save[rv[n]](v_1,v_2)
%r E(v_2) save[rv[n]](v_1,v_2) & v_1 != v_3 & !save[bn[n]](v_2,v_3) ==> !save[bn[n]](v_1,v_3)

%r E(v_1,v_4) bn[n](v_1, v_2) & bn[n](v_1,v_3) & rv[n](v_2, v_4) & rv[n](v_3, v_4) ==> v_2 == v_3
%r E(v_2,v_4) bn[n](v_1, v_2) & rv[n](v_2, v_4) & rv[n](v_3, v_4) & v_2 != v_3 ==> !bn[n](v_1,v_3)
%r E(v_1,v_2) bn[n](v_1, v_2) & bn[n](v_1,v_3) & rv[n](v_2, v_4) & v_2 != v_3 ==> !rv[n](v_3, v_4) 
%r E(v_1,v_4) save[bn[n]](v_1, v_2) & save[bn[n]](v_1,v_3) & save[rv[n]](v_2, v_4) & save[rv[n]](v_3, v_4) ==> v_2 == v_3
%r E(v_2,v_4) save[bn[n]](v_1, v_2) & save[rv[n]](v_2, v_4) & save[rv[n]](v_3, v_4) & v_2 != v_3 ==> !save[bn[n]](v_1,v_3)
%r E(v_1,v_2) save[bn[n]](v_1, v_2) & save[bn[n]](v_1,v_3) & save[rv[n]](v_2, v_4) & v_2 != v_3 ==> !save[rv[n]](v_3, v_4) 


// Order (n is a function)
%r E(v_1) bn[n](v_1,v_2) & bn[n](v_1,v_3) & !bn[n](v_2,v_3) ==> bn[n](v_3,v_2)
%r E(v_3) bn[n](v_1,v_3) & !bn[n](v_2,v_3) & !bn[n](v_3,v_2) ==> !bn[n](v_1,v_2)
%r E(v_1) save[bn[n]](v_1,v_2) & save[bn[n]](v_1,v_3) & !save[bn[n]](v_2,v_3) ==> save[bn[n]](v_3,v_2)
%r E(v_3) save[bn[n]](v_1,v_3) & !save[bn[n]](v_2,v_3) & !save[bn[n]](v_3,v_2) ==> !save[bn[n]](v_1,v_2)

%r v_1 != v_2 & bn[n](v_1,v_2) & !E(v_3) (v_3 != v_1 & v_3 != v_2 & rv[n](v_1,v_3))
   ==> rv[n](v_1,v_2)
%r v_1 != v_2 & save[bn[n]](v_1,v_2) & !E(v_3) (v_3 != v_1 & v_3 != v_2 & save[rv[n]](v_1,v_3))
   ==> save[rv[n]](v_1,v_2)

%r inSOrder[dle,n](v) & rv[n](v,v_1) ==> dle(v, v_1)
%r inSOrder[dle,n](v) & rv[n](v,v_1) ==> !dle(v_1, v)
%r save[inSOrder[dle,n]](v) & save[rv[n]](v,v_1) ==> dle(v, v_1)
%r save[inSOrder[dle,n]](v) & save[rv[n]](v,v_1) ==> !dle(v_1, v)

%r u != v & bn[n](u,v) & A(w) (bn[n](u,w) -> inSOrder[dle,n](w)) ==> dle(u,v)
%r u != v & bn[n](u,v) & A(w) (bn[n](u,w) -> inSOrder[dle,n](w)) ==> !dle(v,u)
%r u != v & save[bn[n]](u,v) & A(w) (save[bn[n]](u,w) -> save[inSOrder[dle,n]](w)) ==> dle(u,v)
%r u != v & save[bn[n]](u,v) & A(w) (save[bn[n]](u,w) -> save[inSOrder[dle,n]](w)) ==> !dle(v,u)

%r isthread(v_1) ==> !rv[n](v_1, v_2)
%r isthread(v_2) ==> !rv[n](v_1, v_2)
%r isthread(v_1) & v_1 != v_2 ==> !bn[n](v_1, v_2)
%r isthread(v_2) & v_1 != v_2 ==> !bn[n](v_1, v_2)
%r isthread(v_1) ==> !rt[Head](v_1)
%r isthread(v_1) ==> !rt[Tail](v_1)

%r isthread(v_1) ==> !save[rv[n]](v_1, v_2)
%r isthread(v_2) ==> !save[rv[n]](v_1, v_2)
%r isthread(v_1) & v_1 != v_2 ==> !save[bn[n]](v_1, v_2)
%r isthread(v_2) & v_1 != v_2 ==> !save[bn[n]](v_1, v_2)
%r isthread(v_1) ==> !save[rt[Head]](v_1)
%r isthread(v_1) ==> !save[rt[Tail]](v_1)

%r r_by[Head](v_1) & rt[Head](v_2) ==> bn[n](v_1,v_2)
%r r_by[Tail](v_1) & rt[Tail](v_2) ==> bn[n](v_2,v_1)
%r save[r_by[Head]](v_1) & save[rt[Head]](v_2) ==> save[bn[n]](v_1,v_2)
%r save[r_by[Tail]](v_1) & save[rt[Tail]](v_2) ==> save[bn[n]](v_2,v_1)

foreach (unary in Unary + UnaryG) {
	%i deltaPlus[unary](v) = unary(v) & !save[unary](v)
	%i deltaMinus[unary](v) = !unary(v) & save[unary](v)
}

foreach (binary in LocalFields) {
	%i deltaPlus[binary](v,w) = binary(v,w) & !save[binary](v,w)
	%i deltaMinus[binary](v,w) = !binary(v,w) & save[binary](v,w)

	%i delta[binary](v) = E(w) deltaMinus[binary](w,v) | deltaPlus[binary](w,v)
}


foreach (binary in Binary-LocalFields) {
	%i deltaPlus[binary](v,w) = binary(v,w) & !save[binary](v,w)
	%i deltaMinus[binary](v,w) = !binary(v,w) & save[binary](v,w)

	%i delta[binary](v) = E(w) deltaPlus[binary](v,w) | deltaMinus[binary](v,w) |
				   deltaPlus[binary](w,v) | deltaMinus[binary](w,v)
}


