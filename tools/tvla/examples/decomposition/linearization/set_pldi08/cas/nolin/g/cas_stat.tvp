/******************************************************************
* set_stat.tvm
*
* assumptions:
* 1. thread objects can not be referenced by any other object (they are like globals)
* 2. the list is acyclic
*
******************************************************************/

#define IF_IN_SET(var, set) foreach (dummy in {var} & set)
#define CondAssign(cond,pred,result) pred = ((cond) ? (result) : (pred))

%action RtoG() {
    %t "RtoG"
    %compose tid[R](v1) & (tid[G](v2) <-> 0)
    {
    	tid[G](v) = tid[R](v)
    	tid[R](v) = 1/2
      	foreach (fld in LocalFields) {
      		r_by[fld,G](v) = save[r_by[fld,R]](v)
      		save[r_by[fld,G]](v) = save[r_by[fld,R]](v)
      		deltaPlus[r_by[fld,G]](v) = 0
      		deltaMinus[r_by[fld,G]](v) = 0  		
      	}
      	foreach (unary in Unary) {
      		unary(v) = save[unary](v)
      		deltaPlus[unary](v) = 0
      		deltaMinus[unary](v) = 0  		
      	}
      	foreach (binary in Binary) {
      		binary(v1,v2) = save[binary](v1,v2)
      		delta[binary](v) = 0  		
      		deltaPlus[binary](v,w) = 0
      		deltaMinus[binary](v,w) = 0  		
      	}
    }
    %message |/{deltaPlus[unary](v) | deltaMinus[unary](v) : unary in Unary + UnaryG} -> "delta should be false!"
    %decompose tid[G](v) <-> tid[R](v)
}

%action GtoR() {
    %t "GtoR"
    %compose tid[G](v1) & (tid[R](v2) <-> 0)
    {
    	tid[R](v) = tid[G](v)
    	tid[G](v) = 1/2
      	foreach (fld in LocalFields) {
      		save[r_by[fld,R]](v) = r_by[fld,G](v)
      	}
      	foreach (unary in Unary) {
      		save[unary](v) = unary(v)
      	}
      	foreach (binary in Binary) {
      		save[binary](v1,v2) = binary(v1,v2)
      	}
    }
    %decompose tid[R](v) <-> tid[G](v)
}

%action only(component) {
    %t "only(" + component + ")"
    %decompose tid[component](v) <-> tid[component](v)
}

%action interference() {
    %t "interference"
    %frame_pre tid[R](v) <-> (
     	|/{ save[at[loc]](v) : loc in locations } | 
     	|/{ save[bool](v) : bool in BoolLocals } | 
    	|/{ save[choice[op]](v) : op in Operations }
     	) 
#define FULLY_LOCAL ({at[loc]:loc in locations}+{choice[op]:op in Operations}+{bool:bool in BoolLocals}) 
    %compose tid[R](v1) & (tid[G](v2) <-> (
      (tid[G](v2) |
      |/{ deltaPlus[unary](v2) | deltaMinus[unary](v2) : unary in Unary-FULLY_LOCAL } |
      |/{ delta[binary](v2) : binary in (Binary-{eq,dle})-LocalFields } |
      |/{ delta[binary](v2) : binary in LocalFields }
      )
      & (
         &/{ !unary(v2) & !save[unary](v2) & !deltaPlus[unary](v2) & !deltaMinus[unary](v2) : 
          unary in FULLY_LOCAL+UnaryG } & 
         &/{ !delta[binary](v2) : binary in {eq,dle} } 
        )
    ))
    %message [tid[G](v)] (E(v1,v2) !outside(v1) & outside(v2) & bn[n](v1,v2)) -> "bn should never go to outside"
    %message [tid[G](v)] (E(v1,v2) !outside(v1) & outside(v2) & save[bn[n]](v1,v2)) -> "bn should never go to outside"
    {
      	foreach (unary in Unary) {
      		save[unary](v) = unary(v)
      	}
      	foreach (binary in Binary) {
      		save[binary](v1,v2) = binary(v1,v2)
      	}
    }
    %decompose tid[R](v) <-> (tid[R](v1) | tid[G](v2))
}

%action schedule(loc) {
  %t "schedule " + loc
  %p E(tr) tid[G](tr) & at[loc](tr) 
}

%action unschedule(to) {
  %t "unschedule. going to " + to
  {
    CondAssign(tid[G](v), at[to](v), 1)
    foreach (loc in locations-{to}) {
      CondAssign(tid[G](v), at[loc](v), 0)
    } 
  }
}

/*******************
* assignNew(ref)
* [ref = new T()]
* Allocation to local variable.
* note - the type is currently ignored.
********************/
//ref IS assumed to be null before allocation.

%action assignNew(ref) {
    %t ref + "= new T()" 
    %message (E(v) r_by[ref,G](v)) -> "possible assignment to non-null field in new"
    %message (E(v,w) deltaPlus[bn[n]](v,w)) -> "bn should not have changed"
    %new
    {
        ref(w, v) = (tid[G](w) ? isNew(v) : ref(w,v))
        r_by[ref,G](v) = isNew(v)
        dnode(v) = dnode(v) | isNew(v)
        alloc(v) = alloc(v) | isNew(v)

        //new node holds some value val s.t. -inf < val < +inf
        dle(v_1, v_2) =
           (((isNew(v_1) & isNew(v_2)) |
                 (r_by[Head](v_1) & isNew(v_2)) |
                 (isNew(v_1) & r_by[Tail](v_2))) ? 1 :
                    (((isNew(v_1) & !r_by[Head](v_2) & !isthread(v_2)) |
                      (isNew(v_2) & !r_by[Tail](v_1) & !isthread(v_1))) ? 1/2 :
                     dle(v_1, v_2)))

        eq(v_1, v_2) = 
          ((isNew(v_1) | isNew(v_2)) 
            & !r_by[Head](v_1) & !r_by[Tail](v_1) & !isthread(v_1)
            & !r_by[Head](v_2) & !r_by[Tail](v_2) & !isthread(v_2)
            ? 1/2 : eq(v_1, v_2))
            
        inSOrder[dle,n](v) = inSOrder[dle,n](v) | isNew(v)
        bn[n](o_1,o_2) = bn[n](o_1,o_2) | (isNew(o_1) & isNew(o_2))

    	// Updates to instrumentation due to universe changing action
        rt[Head](o_1) = rt[Head](o_1)
        rt[Tail](o_1) = rt[Tail](o_1)
        
        foreach (fld in LocalFields-{ref}) {
            r_by[fld,G](v) = r_by[fld,G](v)
    	}
    	
    	// Updates to saved predicates
    	save[alloc](v) = save[alloc](v)
    	
        save[dle](v_1, v_2) =
           (isNew(v_1) & isNew(v_2)) | save[dle](v_1, v_2)

        save[eq](v_1, v_2) = save[eq](v_1, v_2)

        save[rt[Head]](o_1) = save[rt[Head]](o_1)
        save[rt[Tail]](o_1) = save[rt[Tail]](o_1)
        
        save[bn[n]](o_1,o_2) = save[bn[n]](o_1,o_2) | (isNew(o_1) & isNew(o_2)) // annoying reflexivity...
    	// Universal formula - was true by default
        save[inSOrder[dle,n]](v) = save[inSOrder[dle,n]](v) | isNew(v)

        foreach (fld in LocalFields) {
            save[r_by[fld,G]](v) = save[r_by[fld,G]](v)
            save[r_by[fld,R]](v) = save[r_by[fld,R]](v)
    	}
    	// What is better here?
    	save[dnode](v) = save[dnode](v) | isNew(v)
    	// What about dummy?
    	
    	// Deltas
        foreach (fld in LocalFields-{ref}) {
            deltaPlus[r_by[fld,G]](v) = deltaPlus[r_by[fld,G]](v)
            deltaMinus[r_by[fld,G]](v) = deltaMinus[r_by[fld,G]](v)
            delta[fld](v) = delta[fld](v)
            deltaPlus[fld](v,w) = deltaPlus[fld](v,w)
            deltaMinus[fld](v,w) = deltaMinus[fld](v,w)
        }
        foreach (fld in {rv[n],bn[n]}) {
            delta[fld](v) = delta[fld](v)
            deltaPlus[fld](v,w) = deltaPlus[fld](v,w)
            deltaMinus[fld](v,w) = deltaMinus[fld](v,w)
        }
        foreach (unary in {inSOrder[dle,n],dnode} + {at[loc] : loc in locations} + {choice[op] : op in Operations}
            + {bool : bool in BoolLocals} + {bool : bool in BoolFields} + {r_by[fld] : fld in GlobalFields} +
            	{rt[fld] : fld in {Head,Tail}}) {
            deltaPlus[unary](v) = deltaPlus[unary](v)
            deltaMinus[unary](v) = deltaMinus[unary](v)
        }		
        deltaPlus[r_by[x_i,G]](v) = deltaPlus[r_by[x_i,G]](v) | isNew(v)
        deltaMinus[r_by[x_i,G]](v) = deltaMinus[r_by[x_i,G]](v)
        delta[x_i](v) = delta[x_i](v) | isNew(v)
        deltaPlus[x_i](v,w) = deltaPlus[x_i](v,w) | (tid[G](v) & isNew(w))
        deltaMinus[x_i](v,w) = deltaMinus[x_i](v,w)

        foreach (fld in {eq,dle}) {
            delta[fld](v) = (!isthread(v) ? 1/2 : delta[fld](v))

            deltaPlus[fld](v_1, v_2) = 
	          ((isNew(v_1) | isNew(v_2)) & !isthread(v_1) & !isthread(v_2)
	            ? 1/2 : deltaPlus[fld](v_1, v_2))
            deltaMinus[fld](v_1, v_2) = deltaMinus[fld](v_1, v_2)
        }
        
        deltaMinus[alloc](v) = deltaMinus[alloc](v)
        deltaPlus[alloc](v) = deltaPlus[alloc](v) | isNew(v)
    }
}

/***
* assignFromGlbField(ref,fld,G)
* ref = fld where ref is a local field and fld is a global field
***/
//ref is not assumed to be null before assignment.
%action assignFromGlbField(ref,fld) {
    %t ref + " = " + fld 
    %message (E(v) r_by[ref,G](v)) -> "possible assignment to non-null field"
    {
        ref(w,v) = (tid[G](w) ? r_by[fld](v) : ref(w,v))
    }
}

/***
* assignFromNextField(ref,obj,G)
* ref = obj.n where ref is a local field and obj is a local field
***/
//ref IS assumed to be null before assignment.
%action assignFromNextField(ref,obj) {
    %t ref + " = " + obj + "." + n 
    //focus needed becuase we read a successor
    %f { r_by[obj,G](v1) & rv[n](v1,v2) & bn[n](v2,v)}
    %message (!(E(v) r_by[obj,G](v))) -> "possible null dereference of " + obj + " for " + G
    %message (E(v) r_by[ref,G](v)) -> "possible assignment to non-null field"
    {
       ref(w, o_1) = (tid[G](w) ? E(o_t) obj(w, o_t) & rv[n](o_t,o_1) : ref(w,o_1))
    }
}

/***
* isDataGreater(ref1,ref2)
* Is the value of the node pointed-to by local variable ref1 greater-or-equal to
* the value of the node pointed-to by local variable ref2.
***/
%action isDataGreater(ref1,ref2) {
    %t "tr." + ref1 + "->data > " + tr + "." + ref2 + "->data" 
    %f {r_by[ref1,G](v_1) & r_by[ref2,G](v_2) & dle(v_1, v_2)}
    %p A(v_1,v_2) ((r_by[ref1,G](v_1) & r_by[ref2,G](v_2)) -> dle(v_2, v_1) & !dle(v_1, v_2))
    %message (!E(v_1,v_2) (r_by[ref1,G](v_1) & r_by[ref2,G](v_2))) ->
             "possible null dereference of " + ref1 + " or " + ref2
}

/***
* isDataGreaterEq(ref1,ref2)
* Is the value of the node pointed-to by local variable ref1 greater-or-equal to
* the value of the node pointed-to by local variable ref2.
***/
%action isDataGreaterEq(ref1,ref2) {
    %t "tr." + ref1 + "->data >= " + tr + "." + ref2 + "->data" 
    %f {r_by[ref1,G](v_1) & r_by[ref2,G](v_2) & dle(v_2, v_1)}
    %p A(v_1,v_2) ((r_by[ref1,G](v_1) & r_by[ref2,G](v_2)) -> dle(v_2, v_1))
    %message (!E(v_1,v_2) (r_by[ref1,G](v_1) & r_by[ref2,G](v_2))) ->
             "possible null dereference of " + ref1 + " or " + ref2
}

/***
* isDataLess(ref1,ref2,G)
* Is the value of the node pointed-to by local variable ref1 less than
* the value of the node pointed-to by local variable ref2.
***/
%action isDataLess(ref1,ref2) {
    %t "tr." + ref1 + "->data < " + tr + "." + ref2 + "->data" 
    %f {r_by[ref1,G](v_1) & r_by[ref2,G](v_2) & dle(v_2, v_1)}
    %p !A(v_1,v_2) ((r_by[ref1,G](v_1) & r_by[ref2,G](v_2)) -> dle(v_2, v_1))
    %message (!E(v_1,v_2) (r_by[ref1,G](v_1) & r_by[ref2,G](v_2))) ->
             "possible null dereference of " + ref1 + " or " + ref2
}

/***
* isDataEq(ref1,ref2,G)
* Is the value of the node pointed-to by local variable ref1 equal to
* the value of the node pointed-to by local variable ref2.
***/
%action isDataEq(ref1,ref2) {
    %t "tr." + ref1 + "->data == " + tr + "." + ref2 + "->data" 
    %f {r_by[ref1,G](v_1) & r_by[ref2,G](v_2) & eq(v_1,v_2)}
    %p A(v_1,v_2) ((r_by[ref1,G](v_1) & r_by[ref2,G](v_2)) ->
                   eq(v_1,v_2))
    %message (!E(v_1,v_2) (r_by[ref1,G](v_1) & r_by[ref2,G](v_2))) ->
             "possible null dereference of " + ref1 + " or " + ref2
}

/***
* isDataNotEq(ref1,ref2,G)
* Is the value of the node pointed-to by local variable ref1 not equal to
* the value of the node pointed-to by local variable ref2.
***/
%action isDataNotEq(ref1,ref2) {
    %t "tr." + ref1 + "->data != " + tr + "." + ref2 + "->data" 
    %f {r_by[ref1,G](v_1) & r_by[ref2,G](v_2) & eq(v_1,v_2)}
    %p !A(v_1,v_2) ((r_by[ref1,G](v_1) & r_by[ref2,G](v_2)) ->
                    eq(v_1,v_2))
    %message (!E(v_1,v_2) (r_by[ref1,G](v_1) & r_by[ref2,G](v_2))) ->
             "possible null dereference of " + ref1 + " or " + ref2
}

/***
* assignNull(ref,G)
* ref = null where ref is a local field
***/
%action assignNull(ref) {
    %t ref + " = null" 
    {
         ref(w,o_1) = (tid[G](w) ? 0 : ref(w,o_1))
         r_by[ref,G](o_1) = 0
    }
}

/***
* assignRef(ref1,ref2,G)
* ref1 = ref2 where ref1 and ref2 are local fields
***/
//ref1 IS assumed to be null before assignment
%action assignRef(ref1, ref2) {
    %t ref1 + " = " + ref2 
    %message (E(v) r_by[ref1,G](v)) -> "possible assignment to non-null field"
    {
    	ref1(w,o_1) = (tid[G](w) ? ref2(w, o_1) : ref1(w,o_1))
    }
}

/****
* setChoice(op,G)
* Set operation choice to op.
***/
%action setChoice(op) {
    %t "setChoice(" + op + ")" 
    %message (E(tr) tid[G](tr) & |/{ choice[op2](tr) : op2 in Operations-{op}}) -> "Already performing another operation!"
    {
      choice[op](t) = choice[op](t) | tid[G](t)
    }
}

/****
* isChoice(op,G)
* Is op the operation choice of tr.
***/
%action isChoice(op) {
    %t "isChoice(" + op + ")" 
    %p E(tr) tid[G](tr) & choice[op](tr)
}

/*******************
* ClearOp(G)
* null assignment to all local variables 
********************/
//We clear all local fields, no matter which action was performed.
%action ClearOp() {
    %t "ClearOp()" 
    {
      foreach (op in Operations) {
          choice[op](o_1) = (tid[G](o_1) ? 0 : choice[op](o_1))
      }
    }
}

/*******************
* Clear2(G)
* null assignment to all local variables 
********************/
//We clear all local fields, no matter which action was performed.
%action Clear2() {
    %t "Clear2()" 
    {
      foreach (bool in BoolLocals) {
    	bool(tr) = (tid[G](tr) ? 0 : bool(tr))
      }
      foreach (fld in LocalFields-{x_i}) {
        fld(w,o_1) = (tid[G](w) ? 0 : fld(w,o_1))
      }
    }
}

/*******************
* Clear(G)
* null assignment to all local variables 
********************/
//We clear all local fields, no matter which action was performed.
%action Clear() {
    %t "Clear()" 
    {
      foreach (bool in BoolLocals) {
    	bool(tr) = (tid[G](tr) ? 0 : bool(tr))
      }
      foreach (fld in LocalFields) {
        fld(w,o_1) = (tid[G](w) ? 0 : fld(w,o_1))
      }
    }
}

/***
* updateNext(obj,ref,G)
* obj->n = ref where obj and ref are thread-local variables.
***/
//Note: Updates are simplified due to this assumption. Is focus still needed?
%action updateNext(obj,ref) {
    %t obj + ".n = " + ref 
    %message (!(E(o_t) r_by[obj,G](o_t))) -> "possible null dereference of " + obj
    %message (!E(o_1) r_by[ref,G](o_1))-> "possible null dereference of " + ref
    %message (E(o_1) r_by[obj,G](o_1) & markBit(o_1))-> "cant change succ of marked " + obj
    {
        rv[n](o_1,o_2) = (rv[n](o_1, o_2) ? !r_by[obj,G](o_1) | r_by[ref,G](o_2):
                      (r_by[obj,G](o_1) & r_by[ref,G](o_2)))
#define updateNext_bn_1(w1,w2) (bn[n](w1, w2) & !(bn[n](w1, o_1) & bn[n](o_1, w2) & o_1 != w2))
        bn[n](v_1,v_2) = E(o_1, r) r_by[ref,G](r) & r_by[obj,G](o_1) &
                           (updateNext_bn_1(v_1,v_2) | (updateNext_bn_1(v_1,o_1) & updateNext_bn_1(r, v_2)))
    }
}

/***
* assignNextNull(obj,G)
* obj->n = null where obj is a thread-local variable.
***/
%action assignNextNull(obj) {
    %t obj + ".n = null"
    %message (!(E(o_t) r_by[obj,G](o_t))) -> "possible null dereference of " + obj
    {
        rv[n](o_1,o_2) = (rv[n](o_1,o_2) & !r_by[obj,G](o_1))
    }
}

%action SuccCAS_NextOnlyBoolean(obj, bfield, oldVal, oldLBool, newLBool) {
    %t "SuccCAS_NextOnlyBoolean(" + obj + "," + bfield + "," + oldVal + "," + oldLBool + "," + newLBool + ")"
    %f { r_by[obj,G](o_t) & bfield(o_t),
     r_by[obj,G](o_t) & r_by[oldVal,G](o_f) & rv[n](o_t,o_f)
    }
    %p E(tr) tid[G](tr) &
        (A(o_f) ((E(o_t) r_by[obj,G](o_t) & rv[n](o_t,o_f)) <-> r_by[oldVal,G](o_f))) & 
           ((E(o_f) r_by[obj,G](o_f) & bfield(o_f)) <-> oldLBool(tr))
    %message (!(E(o_t) r_by[obj,G](o_t))) -> "possible null dereference of " + obj
    {
       bfield(v) = (r_by[obj,G](v) ? (E(tr) tid[G](tr) & newLBool(tr)) : bfield(v))
    }
}

/***
* SuccCAS_Next(obj,oldVal,ref,G)
* Successful CAS where obj is a thread-local variable and fld is n.
* obj->n == oldVal and we assign obj->n = ref. 
***/
//obj->n is not assumed to be null before assignment.
%action SuccCAS_NextBoolean(obj, bfield, oldVal, oldLBool, newVal, newLBool) {
    %t "SuccCAS_NextBoolean(" + obj + "," + bfield + "," + oldVal + "," + oldLBool + "," + newVal + "," + newLBool + ")"
    %f { r_by[obj,G](o_t) & bfield(o_t),
     r_by[obj,G](o_t) & r_by[oldVal,G](o_f) & rv[n](o_t,o_f),
     r_by[obj,G](o_t) & bn[n](u,o_t),
     r_by[oldVal,G](o_r) & bn[n](o_r,u),
     r_by[newVal,G](o_r) & bn[n](o_r,u)
    }
    %p E(tr) tid[G](tr) &
        (A(o_f) ((E(o_t) r_by[obj,G](o_t) & rv[n](o_t,o_f)) <-> r_by[oldVal,G](o_f))) & 
           ((E(o_f) r_by[obj,G](o_f) & bfield(o_f)) <-> oldLBool(tr))
    %message (!(E(o_t) r_by[obj,G](o_t))) -> "possible null dereference of " + obj
    %message (E(o_1) r_by[obj,G](o_1) & markBit(o_1))-> "cant change succ of marked " + obj
    {
       rv[n](o_1,o_2) = ( r_by[obj,G](o_1) ?
                           r_by[newVal,G](o_2) : rv[n](o_1,o_2) ) 
       #define CAS_bn_1(w1,w2) (bn[n](w1, w2) & !(bn[n](w1, o_1) & bn[n](o_1, w2) & o_1 != w2))
       bn[n](v_1,v_2) = E(o_1, r) r_by[newVal,G](r) & r_by[obj,G](o_1) &
                        (CAS_bn_1(v_1,v_2) | (CAS_bn_1(v_1,o_1) & CAS_bn_1(r, v_2)))
    				  
       bfield(v) = (r_by[obj,G](v) ? (E(tr) tid[G](tr) & newLBool(tr)) : bfield(v))
    }
}

%action removeDnode(obj) {
    %t "removeDnode(" + obj + ")"
    %message (!(E(o_t) r_by[obj,G](o_t))) -> "possible null dereference of " + obj
    {
       dnode(v) = (r_by[obj,G](v) & dnode(v) ? 0 : dnode(v))
    }
}

%action FailCAS_NextBoolean(obj, bfield, oldVal, oldLBool, newVal, newLBool) {
    %t "FailCAS_NextBoolean(" + obj + "," + bfield + "," + oldVal + "," + oldLBool + "," + newVal + "," + newLBool + ")"
    %f { r_by[obj,G](o_t) & r_by[oldVal,G](o_f) & rv[n](o_t,o_f), 
         r_by[obj,G](o_t) & bfield(o_t) }
    %p E(tr) tid[G](tr) & 
        !((A(o_f) ((E(o_t) r_by[obj,G](o_t) & rv[n](o_t,o_f)) <-> r_by[oldVal,G](o_f))) & 
        ((E(o_f) r_by[obj,G](o_f) & bfield(o_f)) <-> oldLBool(tr)))
    %message (!(E(o_t) r_by[obj,G](o_t))) -> "possible null dereference of " + obj
}

%action isNull(ref) {
    %t ref + "== null" 
    %p !E(v) r_by[ref,G](v)
}

%action isNotNull(ref) {
    %t ref + "!= null" 
    %p E(v) r_by[ref,G](v)
}

%action getBooleanLocalFromField(localb, ref, fieldb) {
    %t localb + " = " +  ref + "." + fieldb 
    %f { r_by[ref,G](v) & fieldb(v) }
    %message (!(E(o_t) r_by[ref,G](o_t))) -> "possible null dereference of " + ref
    {
        localb(tr) = (tid[G](tr) ? E(w) ref(tr, w) & fieldb(w) : localb(tr))
    }
}

