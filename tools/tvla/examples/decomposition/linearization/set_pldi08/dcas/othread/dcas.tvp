/************************************************************************
 * pldi 
 ***********************************************************************/


/*********************** Sets ******************************/



%s GlobalFields {Head,Tail}

%s LocalFields {x_i,pred,curr,next,res,res_seq}
%s LocalFieldsDle {curr}

//%s LocalBooleans {res,res_seq}

%s NextFields {n}

//////////////////////// Names of threads ////////////////////
//// General client
%pset Threads {t1,t2}
//////////////////////////////////////////////////////////////

%s locations { 
  l_ready, l_dispatch,
  l_00, l_00a, l_0, l_1, l_2, l_3, l_4, l_5, l_6, l_7, l_8, l_9, ll_dispatch, 
  lis_0, lds_0, lfs_0, lis_1, lds_1, l_ver, l_exit, 
  li_1, li_2, li_3, li_4, li_5, li_6,
  ld_1, ld_2, ld_3, ld_4, ld_5, ld_6,
  lf_1, lf_2, lf_3, lf_4, lfs_1,
  li_check_lin, ld_check_lin
} 

%s Operations {insert,delete,find}

/**************** Predicates **************/

#include "dcas_pred.tvp"
foreach (tn in Threads) {
  %dname (tn(v) | member(v) | rt[Head](v) |
        |/{ r_by[fld,tn](v) : fld in LocalFields} |
  	|/{ r_by[fld](v) : fld in GlobalFields}) &
    &/{&/{ !r_by[fld,other](v)  : fld in LocalFields } & &/{ !dle[fld,other](v) : fld in LocalFieldsDle} & !other(v) : other in (Threads)-{ tn }} tn
}

%%
/********************* Actions *******************/

#include "dcas_stat.tvp"

%action schedule(loc) {
  %param trnm in Threads
  %t "schedule " + loc
  %f { tr_scheduled(tr) }
  %p tr_scheduled(tr) & trnm(tr) & at[loc](tr)  
}

%action unschedule() {
  %param trnm in Threads
  %t "unschedule"
  %message [trnm(v)]  (E(v) member(v) & dle[curr,trnm](v) & !dle[curr,trnm](v)) -> "found curr 1/2"
  {
    tr_scheduled(tr) = (isthread(tr) ? 1/2 : 0)
  }
  %message (E(v_1, v_2) member(v_1) & !member(v_2) & !r_by[Tail](v_2) & rv[n](v_1, v_2))-> "member inv"
}

/**************** Program *********************/

%%

/***********************************************/
/************** Producer Threads ****************/


pre_schedule unschedule() l_ready

l_ready schedule(l_dispatch) l_dispatch 

l_dispatch setChoice(l_dispatch, l_00, insert) l_00          /*local action */            
l_dispatch setChoice(l_dispatch, l_00, delete) l_00          /*local action  /DEBUG COMMENT  */    
l_dispatch setChoice(l_dispatch, l_00, find) l_00          /*local action  /DEBUG COMMENT  */    

//****** Code for one thread *****************************

/* locate     */                                            
/* concurrent */                                            
l_ready schedule(l_0) l_0 
l_ready schedule(l_2) l_2 
l_ready schedule(l_3) l_3 
l_ready schedule(l_8) l_8 

l_00 Clear(l_00, l_00a) l_00a
l_00a assignNew(l_00a, l_1, x_i) l_1                    /*x_i expected to be null /local action */ 

l_0 Clear2(l_0, l_1) l_1

l_1 assignFromGlbField(l_1, l_2, pred,Head) pre_schedule     /*pred expected to be null */          
l_2 assignFromNextField(l_2, l_3, curr, pred) pre_schedule     /*pred expected to be null */          
l_3 isDataGreaterEq(l_3, ll_dispatch, curr,x_i) ll_dispatch  /*local action */              
l_3 isDataLess(l_3, l_4, curr,x_i) l_4              /*local action */              


l_4 assignNull(l_4, l_5, pred) l_5                 /*atomic with assignRef / local action   */    
l_5 assignRef(l_5, l_6, pred,curr) l_6             /*local action  */             
l_6 assignNull(l_6, l_7, curr) l_7                 /*atomic with assignFromNextField / local action  */   
l_7 assignFromNextField7(l_7, l_8, curr,pred) pre_schedule 
l_8 isNull(l_8, l_9, curr) l_9
l_8 isNotNull(l_8, l_3, curr) pre_schedule
l_9 assignNull(l_9, l_0, pred) pre_schedule

/*final actions - common to all operations, including linearization point */
                                            
/*choice of transaction according to concurrent choice */               
ll_dispatch isChoice(ll_dispatch, li_1, insert) li_1                   
ll_dispatch isChoice(ll_dispatch, ld_1, delete) ld_1                   
ll_dispatch isChoice(ll_dispatch, lf_1, find) lf_1                 
					    
/****Sequential*****************************************************/           
                                            
/*insert*/                                      
lis_0 assignNew_Seq(lis_0, lis_1, x_i) lis_1                     
lis_1 Insert_Seq(lis_1, l_ver, x_i) l_ver
                                            
/*delete*/                                      
lds_0 assignNew_Seq(lds_0, lds_1, x_i) lds_1                     
lds_1 Delete_Seq(lds_1, l_ver, x_i) l_ver                    
/*}*/                                           

/* find */
lfs_0 assignNew_Seq(lfs_0, lfs_1, x_i) lfs_1                     
lfs_1 Find_Seq(lfs_1, l_ver, x_i) l_ver                    

/****End of sequential*******************************************************/
/* } */


/*atomic {*/                                        
l_ver verifySameRes(l_ver, l_exit) l_exit       /*local action  */     
l_exit ClearOp(l_exit, l_dispatch) l_dispatch   /*local action  */     
/*}*/                                           

/*in all operations: res expectd to be null*/

/* find */
/* atomic { */
lf_1 isDataEq(lf_1, lf_2, curr, x_i) lf_2                  /*local action */                  
lf_1 isDataNotEq(lf_1, lf_3, curr,x_i) lf_3               /* michal - lp */                  

lf_2 assignRefFind(lf_2, lf_4, res,curr) lf_4
lf_3 assignNull(lf_3, lf_4, res) lf_4    
// michal - need to check if someone else already linearized this operation
lf_4 wasLinearized(lf_4, l_ver) l_ver
lf_4 wasNotLinearized(lf_4, lfs_0) lfs_0
/* } */

/*insert */
/*atomic {*/                                                    
li_1 isDataEq(li_1, li_5, curr,x_i) li_5                  /*local action */                  
li_1 isDataNotEq(li_1, li_2, curr,x_i) li_2               /*local action */                  
li_2 updateNext(li_2, li_3, x_i,curr) li_3                /*local action - new node not accessible by other threads */ 
                                                        
li_3 SuccCAS_Next(li_3, li_check_lin, pred, curr, x_i) li_check_lin             /*Vafeiadis lp */                  
// michal - need to check if we just linearized another thread's execution
li_3 FailCAS_Next(li_3, l_0, pred, curr, x_i) pre_schedule                
                                                        
li_4 assignRef(li_4, lis_0, res,x_i) lis_0                /*local action */                  
// michal - need to check if someone else already linearized this operation
li_5 assignNull(li_5, li_6, res) li_6                     /*local action   / Vafeiadis lp */         
li_6 wasLinearized(li_6, l_ver) l_ver
li_6 wasNotLinearized(li_6, lis_0) lis_0

li_check_lin LinearizationInInsertForOtherThreadFind(li_check_lin, li_4) li_4
li_check_lin LinearizationForOtherThreadDelete(li_check_lin, li_4) li_4
li_check_lin isNotLinearizationInInsertForOtherThread(li_check_lin, li_4) li_4

/*}*/                                                       

/*delete*/
l_ready schedule(ld_3) ld_3 
 
/*atomic {*/                                                    
ld_1 isDataNotEq(ld_1, ld_5, curr,x_i) ld_5             /*local action */                   
ld_1 isDataEq(ld_1, ld_2, curr,x_i) ld_2                /*local action */                  
ld_2 assignFromNextField(ld_2, ld_3, next, curr) pre_schedule    
/*}*/                                                       
/*atomic {*/                                                    
ld_3 SuccDCAS_Next(ld_3, ld_check_lin, pred, curr, curr, next, next) ld_check_lin         /*Vafeiadis lp */                        
// michal - need to check if we just linearized another thread's execution
ld_3 FailDCAS_Next(ld_3, l_0, pred, curr, curr, next, next) pre_schedule         /*Vafeiadis lp */                        
                                                        
ld_4 assignRef(ld_4, lds_0, res, curr) lds_0             /*local action */                   
// michal - need to check if someone else already linearized this operation
ld_5 assignNull(ld_5, ld_6, res) ld_6                     /*local action   / Vafeiadis lp */         
ld_6 wasLinearized(ld_6, l_ver) l_ver
ld_6 wasNotLinearized(ld_6, lds_0) lds_0
/*}*/                                                       

ld_check_lin LinearizationInDeleteForOtherThreadFind(ld_check_lin, ld_4) ld_4
//ld_check_lin LinearizationInDeleteForOtherThreadDelete(ld_check_lin, ld_4) ld_4
ld_check_lin LinearizationForOtherThreadInsert(ld_check_lin, ld_4) ld_4
ld_check_lin isNotLinearizationInDeleteForOtherThread(ld_check_lin, ld_4) ld_4

