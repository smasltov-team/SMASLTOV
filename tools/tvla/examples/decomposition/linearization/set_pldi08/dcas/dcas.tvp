/************************************************************************
 * pldi 
 ***********************************************************************/


/*********************** Sets ******************************/

%s GlobalFields {Head,Tail}

%s LocalFields {x_i,pred,curr,next,res,res_seq}

//%s LocalBooleans {res,res_seq}

%s NextFields {n}

%s BoolFields {dummy}

//////////////////////// Names of threads ////////////////////
//// General client
//// pset is the set params are quantified on
%pset Threads {t1,t2}
//////////////////////////////////////////////////////////////

%s locations { 
  l_ready, l_dispatch,
  l_00, l_0, l_1, l_2, l_3, l_4, l_5, l_6, l_7, l_8, ll_dispatch, 
  lis_0, lds_0, lfs_0, lis_1, lds_1, l_ver, l_exit, 
  li_1, li_2, li_3, li_4, li_5,
  ld_1, ld_2, ld_3, ld_4, ld_5,
  lf_1, lf_2, lf_3, lfs_1,
  ls_check, ls_check_1, ls_insert, ls_delete, ls_find,
  lis_failed_0, lis_failed_1, lds_failed_0, lds_failed_1
} 

%s Operations {insert,delete,find}

%s GlobalRt {}  //global fields from which we maintain reachability

%s LocalRt {pred,curr} //local fields from which we maintain reachability

/**************** Predicates **************/

#include "dcas_pred.tvp"
%dname (member(v) | rt[Head](v) |
		|/{ r_by[fld](v) : fld in GlobalFields}) &
       ( &/{ !choice[op](v) : op in Operations } &
    &/{&/{ !r_by[fld,tn](v) : fld in LocalFields} & !tn(v) : tn in Threads} ) member

foreach (tn in Threads) {
  %dname (tn(v) | 
        |/{ r_by[fld,tn](v) : fld in LocalFields} |
  	|/{ r_by[fld](v) : fld in GlobalFields}) &
	(!member(v) &
    &/{&/{ !r_by[fld,other](v) : fld in LocalFields} & !other(v) : other in Threads-{ tn }}) tn
}

%%
/********************* Actions *******************/

#include "dcas_stat.tvp"

%action schedule(loc) {
  %param trnm in Threads
  %t "schedule " + loc
  %f { tr_scheduled(tr) }
  %p tr_scheduled(tr) & trnm(tr) & at[loc](tr)  
}

%action unschedule() {
  %param trnm in Threads
  %t "unschedule"
  {
    tr_scheduled(tr) = (isthread(tr) ? 1/2 : 0)
  }
    %message [member(v)] (E(v_1, v_2) member(v_1) & !member(v_2) & !r_by[Tail](v_2) & rv[n](v_1, v_2))-> "member inv"
}

/**************** Program *********************/

%%

/***********************************************/
/************** Producer Threads ****************/


pre_schedule unschedule() l_ready

l_ready schedule(l_dispatch) l_dispatch 

l_dispatch setChoice(l_dispatch, l_0, insert) l_0          /*local action */            
l_dispatch setChoice(l_dispatch, l_0, delete) l_0          /*local action  /DEBUG COMMENT  */    
l_dispatch setChoice(l_dispatch, l_0, find) l_0          /*local action  /DEBUG COMMENT  */    

//****** Code for one thread *****************************

/* locate     */                                            
/* concurrent */                                            
l_ready schedule(l_0) l_0 
l_ready schedule(l_1) l_1 
l_ready schedule(l_2) l_2 
l_ready schedule(l_3) l_3 

l_0 Clear(l_0, l_00) l_00
l_00 assignNew(l_00, l_1, x_i) l_1                    /*x_i expected to be null /local action */ 
l_1 assignFromGlbField(l_1, l_2, pred,Head) pre_schedule     /*pred expected to be null */          
l_2 assignFromNextField(l_2, ls_check, curr, pred) ls_check     /*pred expected to be null */          

l_3 isDataGreaterEq(l_3, ll_dispatch, curr,x_i) ll_dispatch  /*local action */              
l_3 isDataLess(l_3, l_4, curr,x_i) l_4              /*local action */              
l_4 assignNull(l_4, l_5, pred) l_5                 /*atomic with assignRef / local action   */    
l_5 assignRef(l_5, l_6, pred,curr) l_6             /*local action  */             
l_6 assignNull(l_6, l_7, curr) l_7                 /*atomic with assignFromNextField / local action  */   
l_7 assignFromNextField(l_7, ls_check, curr, pred) ls_check     /*pred expected to be null */          
l_8 assignNull(l_8, l_1, pred) pre_schedule


/*choice of transaction according to concurrent choice */               
ls_check isNull(ls_check, l_8, curr) l_8
ls_check isNotNull(ls_check, ls_check_1, curr) ls_check_1
ls_check_1 isChoice(ls_check_1, ls_insert, insert) ls_insert                   
ls_check_1 isChoice(ls_check_1, ls_delete, delete) ls_delete                   
ls_check_1 isChoice(ls_check_1, ls_find, find) ls_find                

ls_insert isDataEq(ls_insert, lis_failed_0, curr,x_i) lis_failed_0                   /* linearization point for failed insert (michal) */                  
ls_insert isDataNotEq(ls_insert, l_3, curr,x_i) pre_schedule

ls_delete isDataEq(ls_delete, l_3, curr,x_i) pre_schedule                     
ls_delete isDataLess(ls_delete, l_3, curr,x_i) pre_schedule                     
ls_delete isDataGreater(ls_delete, lds_failed_0, curr,x_i) lds_failed_0                   /* linearization point for failed delete (michal) */                  

ls_find isDataEq(ls_find , lfs_0, curr,x_i) lfs_0
ls_find isDataLess(ls_find , l_3, curr,x_i) pre_schedule
ls_find isDataGreater(ls_find, lfs_0, curr,x_i) lfs_0        /* linearization point for failed find (michal) */                  

/*final actions - common to all operations, including linearization point */
                                            
/*choice of transaction according to concurrent choice */               
ll_dispatch isChoice(ll_dispatch, li_1, insert) li_1                   
ll_dispatch isChoice(ll_dispatch, ld_1, delete) ld_1                   
ll_dispatch isChoice(ll_dispatch, lf_1, find) lf_1                 
					    
/****Sequential*****************************************************/           
                                            
/*insert*/                                      
lis_0 assignNew_Seq(lis_0, lis_1, x_i) lis_1                     
lis_1 Insert_Seq(lis_1, l_ver, x_i) l_ver
                                            
lis_failed_0 assignNew_Seq(lis_failed_0, lis_failed_1, x_i) lis_failed_1                     
lis_failed_1 Insert_Seq(lis_failed_1, l_3 , x_i) pre_schedule

/*delete*/                                      
lds_0 assignNew_Seq(lds_0, lds_1, x_i) lds_1                     
lds_1 Delete_Seq(lds_1, l_ver, x_i) l_ver                    

lds_failed_0 assignNew_Seq(lds_failed_0, lds_failed_1, x_i) lds_failed_1                     
lds_failed_1 Delete_Seq(lds_failed_1, l_3, x_i) pre_schedule                    

/* find */
lfs_0 assignNew_Seq(lfs_0, lfs_1, x_i) lfs_1
lfs_1 Find_Seq(lfs_1, l_3, x_i) pre_schedule


/****End of sequential*******************************************************/

l_ver verifySameRes(l_ver, l_exit) l_exit       /*local action  */     
l_exit ClearOp(l_exit, l_dispatch) l_dispatch   /*local action  */     

/*in all operations: res expectd to be null*/

/* find */
lf_1 isDataEq(lf_1, lf_2, curr,x_i) lf_2                  /*local action */
lf_1 isDataNotEq(lf_1, lf_3, curr,x_i) lf_3               /* michal - lp */

lf_2 assignRef(lf_2, l_ver, res,curr) l_ver
lf_3 assignNull(lf_3, l_ver, res) l_ver

/*insert */
li_1 isDataEq(li_1, li_5, curr,x_i) li_5                  /*local action */                  
li_1 isDataNotEq(li_1, li_2, curr,x_i) li_2               /*local action */                  
li_2 updateNext(li_2, li_3, x_i,curr) li_3               /*local action - new node not accessible by other threads */ 
li_3 SuccCAS_Next(li_3, li_4, pred, curr, x_i) li_4             /*Vafeiadis lp */                  
li_3 FailCAS_Next(li_3, l_0, pred, curr, x_i) pre_schedule                
li_4 assignRef(li_4, lis_0, res,x_i) lis_0                  /*local action */                  
li_5 assignNull(li_5, l_ver, res) l_ver             /*local action   / Vafeiadis lp */         

/*delete*/
l_ready schedule(ld_3) ld_3 
 
ld_1 isDataNotEq(ld_1, ld_5, curr,x_i) ld_5             /*local action */                   
ld_1 isDataEq(ld_1, ld_2, curr,x_i) ld_2                /*local action */                  
ld_2 assignFromNextField(ld_2, ld_3, next, curr) pre_schedule    
ld_3 SuccDCAS_Next(ld_3, ld_4, pred, curr, curr, next, next) ld_4         /*Vafeiadis lp */                        
ld_3 FailDCAS_Next(ld_3, l_0, pred, curr, curr, next, next) pre_schedule         /*Vafeiadis lp */                        
ld_4 assignRef(ld_4, lds_0, res, curr) lds_0             /*local action */                   
ld_5 assignNull(ld_5, l_ver, res) l_ver                  /*local action  */          

/**********************    Thread Creation **********************/

