/***********************************************************
* nbq_pred.tvm
***********************************************************/

/**********************************************/
/*************** Core Predicates **************/
//pointer field fld of object o_1 points to object o_2.
foreach (fld in NextFields) {
    %p rv[fld](o_1, o_2) function
}

//referenced-by predicate for global variables (fields of queue ds)
foreach (fld in QFields) {
    %p r_by[fld](o) unique pointer
}

//referenced-by prediacte for thread-local variables
foreach (nm in StaticThreadNames) {
    foreach (fld in LocalFields) {
        %p r_by[fld,nm](o) unique pointer
    }
}

//object v is a queue node (distinguishes queue nodes from queue object).
//%p is_node(v)

//node v has different successors in the two heaps
%p dnext(v)

//node v appears only in the concurrent heap or only in the sequential heap.
%p dnode(v)

//thread t has static name nm
//foreach (nm in StaticThreadNames) {
//    %p is_name[nm](t)
//} 

//object q is a queue
//%p is_q(o) unique


/*********************************************************/
/*************** Instrumentation Predicates **************/

//referenced-by predicate for global variables (fields of queue ds)
//foreach (fld in {tail,tail_seq,head,head_seq}) {
//    %i r_by[fld](o) = E(o_1) rv[fld](o_1,o) 
//}

//referenced-by prediacte for thread-local variables
//foreach (nm in StaticThreadNames) {
//    foreach (fld in {x_i,t_enq,next_enq,t_deq,h_deq,new_head_c,new_head_s}) {
//        %i r_by[fld,nm](o) = E(t_1) (is_name[nm](t_1) & rv[fld](t_1,o))
//    }
//}

//node u is the concurrent successor of the node v satisfying dnext(v)
//%i nextcon(u) = E(v) dnext(v) & rv[n](v,u)

//node u is the sequential successor of the node v satisfying dnext(v)
//%i nextseq(u) = E(v) dnext(v) & rv[n_seq](v,u)

foreach (nm in StaticThreadNames) {
      //%i has[t,n,nm]() = E(o_1,o_2) r_by[t,nm](o_1) & rv[n](o_1,o_2)  
      %i tNext[n,nm](v) = E(o_1) r_by[t,nm](o_1) & rv[n](o_1,v)  
}

/*********************************************************/
/*************** Consistency Rules **************/

//%r E(v_1,v_2) (dnext(v_1) & dnext(v_2) & (v_1 != v_2)) ==> 0