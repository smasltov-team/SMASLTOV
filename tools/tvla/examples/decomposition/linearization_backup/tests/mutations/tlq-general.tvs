/*****
* tlq.tvs
* Initial structure for two lock queue implementation.
* head always points to dummy node. 
*****/

//All local variables initially null.
//Both locks initially unacquired.

//#ifndef #TNUM
//#error TNUM undef. use: "-TNUM k" where 1<=k<=4
//#endif

//#if(4 < #TNUM || #TNUM < 1)
//#error Illegqal number of threads. use "-TNUM k" where 1<=k<=4
//#endif

#if(4 < TNUM)
#warning  "Illegqal number of threads. use -TNUM k where 1<=k<=4"
#endif


//empty queue
%t = { tOne(general_g1)
       #if(1 < GNUM)
       , tTwo(general_g2)
       #endif
       #if(2 < GNUM)
       , tThree(general_g3)
       #endif
       #if(3 < GNUM)
       , tFour(general_g4)
       #endif 
     }
//%t = { tOne(general_one), tTwo(nop) }
%n = { uh }
%p = { 
    
    ready = { tOne 
              #if(1 < GNUM)
              , tTwo
              #endif
              #if(2 < GNUM)
              , tThree
              #endif
              #if(3 < GNUM)
              , tFour
              #endif 
            }
    
    r_by[Tail] = {uh}

    r_by[Tail_seq] = {uh}

    r_by[Head] = {uh}

    r_by[Head_seq] = {uh}

}



//queue with one element
/*
%t = { tOne(general_one), tTwo(nop) }
%n = { uh, ut }
%p = { 
    
    ready = { tOne, tTwo }
    
    r_by[Tail] = {ut}

    r_by[Tail_seq] = {ut}

    r_by[Head] = {uh}

    r_by[Head_seq] = {uh}

    rv[n] = { uh -> ut }

}
*/

//queue with two elements or more
/*
%t = { tOne(general_one), tTwo(nop) }
%n = { uh, u, ut }
%p = { 
    
    ready = { tOne, tTwo }
    sm = {u: 1/2}
    
    r_by[Tail] = {ut}

    r_by[Tail_seq] = {ut}

    r_by[Head] = {uh}

    r_by[Head_seq] = {uh}

    rv[n] = { uh -> u: 1/2, u -> u: 1/2, u -> ut: 1/2 }

}
*/