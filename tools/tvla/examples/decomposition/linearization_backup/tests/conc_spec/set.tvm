/************************************************************************ 
 * set.tvm
 ***********************************************************************/


/*********************** Sets ******************************/

%s GlobalFields {Head,Tail}

%s LocalFields {x_i,pred,curr,next,res,res_seq}

//%s LocalBooleans {res,res_seq} 

%s NextFields {n}

//////////////////////// Names of threads ////////////////////
//// General client
#if(0 < GNUM)
%s StaticThreadNames {g1}
#endif
#if(1 < GNUM)
%s StaticThreadNames {g1,g2}
#endif
#if(2 < GNUM)
%s StaticThreadNames {g1,g2,g3}
#endif
#if(3 < GNUM)
%s StaticThreadNames {g1,g2,g3,g4}
#endif

//// Consumer Producer
#if(0 < KNUM)
%s StaticThreadNames {c1,p1}
#endif
#if(1 < KNUM)
%s StaticThreadNames {c1,p1,c2,p2}
#endif
#if(2 < KNUM)
%s StaticThreadNames {c1,p1,c2,p2,c3,p3}
#endif
#if(3 < KNUM)
%s StaticThreadNames {c1,p1,c2,p2,c3,p3,c4,p4}
#endif
//////////////////////////////////////////////////////////////

%s Operations {insert,delete,find}

%s GlobalRt {Head}  //global fields from which we maintain reachability

%s LocalRt {pred,curr} //local fields from which we maintain reachability

/**************** Predicates **************/

#include "set_pred.tvm"


%%
/********************* Actions *******************/

#include "set_stat.tvm"


/**************** Program *********************/

%%

/***********************************************/
/************** Producer Threads ****************/

/*
%thread nop {
ln_1 skip() ln_1
}
*/

//****** Code for one thread *****************************

//general client one *****************************

//NOTE: Add atomic blocks - by local actions
//      and also by left/right movers such as lock/unlock (see old set version)?
//      succLock cannot be in atomic block because it's blocking? 
//      Is nesting of atomic blocks legal?
//NOTE: Initial "locate" code common to all three transaction types.
//NOTE: Null assignments needed - check by message in non-null assignments to vars / next fields,
//      and change comments.
//      Additional requirements for correct differencing?
//      All null assignments needed (in particular - in assignFromNextField)?
//NOTE: New node always allocated - in order to compare given value with list values.
//      In Delete, Find and failed Insert (value already in list) the node
//      remains thread-local and need not be retained after action?
//NOTE: Can seq "locate" be written only once (predicate can record transaction type)?
//NOTE: Is "contain" code correct? (does not appear in paper)
//NOTE: Another possibility - instead of boolean values: 
//      Insert returns NULL if failed, and pointer x_i otherwise (added node).
//      Delete returns NULL if failed, and pointer curr otherwise (removed node).
//      Find returns NULL if failed, and pointer curr otherwise (found node).
//      Additinal result assignment is needed anyway.
//      Can also be checked in addition to boolean results.
//NOTE: Write last two unlock operations as common part as well 
//      (together with verify and clear)?
//NOTE: Linearization points for insert and delete taken from Vafeiadis.
//      Is it possible to choose a single lin point for both branches of each transaction?
//NOTE: GC assumed?
//NOTE: Clear() also clears responses. In order to !retain x_i in del/find, operation
//      choice should still be recorded at this point (and then it is unset in Clear()
//      and efficiency is as if final actions are written for each op separately).
//NOTE: Efficiency problem in delete: removed node keeps pointing into list.
//      Also causes sharing of list-nodes.
//NOTE: Newer version of Vafeiadis?
//NOTE: Linearization points for find? (Should be in common part -> problem?)
//NOTE: Seq Spec - same implementation, without locks.
//NOTE: In original algorithm, progress in list traversal is by curr=curr->next.
//      Since we assign curr=null first, we use curr=pred->next.
//      It's equivalent because we assigned pred=curr and both are local variables,
//      so they reamined equal. Same in sequential.



#define LOCATE(TN)                                          \
/* locate     */                                            \
/* concurrent */                                            \
atomic {                                                \
l1_0_##TN assignNew(x_i,TN) l1_1_##TN                    /*x_i expected to be null /local action */ \
l1_1_##TN assignFromGlbField(pred,Head,TN) l1_2_##TN     /*pred expected to be null */          \
}                                                   \
l1_2_##TN succLockNode(pred,TN) l1_3_##TN                               \
l1_3_##TN assignFromNextField(curr,pred,TN) l1_4_##TN    /*curr expected to be null */          \
l1_4_##TN succLockNode(curr,TN) l1_5_##TN                               \
atomic {                                                \
l1_5_##TN isDataGreaterEq(curr,x_i,TN) l1_dispatch_##TN  /*local action */              \
l1_5_##TN isDataLess(curr,x_i,TN) l1_6_##TN              /*local action */              \
l1_6_##TN unlockNode(pred,TN) l1_7a_##TN                                \
                    
                    
//}     "}" is in Producer/Consumer/General code
                                                    
///*nondeterministic choice of transaction                               
//l1_dispatch_##TN setChoice(insert,TN) li1_1_##TN        /*local action */                  
//l1_dispatch_##TN setChoice(delete,TN) ld1_1_##TN        /*local action  /DEBUG COMMENT  */         


// Noam: Removed find so that producer/consumer run the same set of operations as general (insert/delete)
//l1_dispatch_##TN setChoice(find,TN) lf1_1_##TN          /*local action  /DEBUG COMMENT  */         
                                                     
/*find - added to atomic block since all actions are local    */                     
//lf1_1_##TN isDataNotEq(curr,x_i,TN) lf1_3_##TN          /*local action  */                 
//lf1_1_##TN isDataEq(curr,x_i,TN) lf1_2_##TN             /*local action  */                 
//lf1_2_##TN assignRef(res,curr,TN) l1_10_##TN            /*local action  */                 
//lf1_3_##TN assignNull(res,TN) l1_10_##TN                /*local action   */                 
//}                                                   
                                                     
                                                     
#define LOCATE2(TN)                                         \        
atomic {                                                \ 
l1_7a_##TN assignNull(pred,TN) l1_7_##TN                 /*atomic with assignRef / local action   */    \
l1_7_##TN assignRef(pred,curr,TN) l1_8a_##TN             /*local action  */             \
                                                    \
l1_8a_##TN assignNull(curr,TN) l1_8_##TN                 /*atomic with assignFromNextField / local action  */   \
l1_8_##TN assignFromNextField(curr,pred,TN) l1_9_##TN                           \   
}                                                   \
l1_9_##TN succLockNode(curr,TN) l1_5_##TN                               \



/*final actions - common to all operations, including linearization point */

#define SEQUENTIAL(TN)                                  \
atomic {                                        \   
l1_10_##TN unlockNode(pred,TN) ls1_0_##TN                /*linearization point   */ \
                                            \
                                            \
/****Sequential*****************************************************/           \
                                            \
/*locate*/                                      \
ls1_0_##TN assignNew_Seq(x_i,TN) ls1_dispatch_##TN                     \   
                                            
                                            
#define SEQUENTIAL2(TN)                                 \
/*choice of transaction according to concurrent choice */               \
ls1_dispatch_##TN isChoice(insert,TN) lis1_1_##TN                   \
ls1_dispatch_##TN isChoice(delete,TN) lds1_1_##TN                   \
ls1_dispatch_##TN isChoice(find,TN) lfs1_1_##TN                 \
                                            

#define SEQUENTIAL3(TN)                                 \
/*insert*/                                      \
lis1_1_##TN Successful_Insert_Seq(x_i,TN) l1_11_##TN                   \   
lis1_1_##TN Failed_Insert_Seq(x_i,TN) l1_11_##TN                    \
                                            \
                                            \
/*delete*/                                      \       
lds1_1_##TN Delete_Seq(x_i,TN) l1_11_##TN                    \   
}                                           \   
                                            
                                            
/* Noam: Removed find so that producer/consumer run the same set of operations as general (insert/delete) */ 
                                            
/*find*/                                                
/*lfs1_1_##TN isDataNotEq(curr_seq,x_i,TN) lfs1_3_##TN                  
/*lfs1_1_##TN isDataEq(curr_seq,x_i,TN) lfs1_2_##TN                     
/*lfs1_2_##TN assignRef(res_seq,curr_seq,TN) l1_11_##TN       /*return to concurrent */
/*lfs1_3_##TN assignNull(res_seq,TN) l1_11_##TN               /*return to concurrent */
                                            
/****End of sequential*******************************************************/      
/* } */                                                     


#define EPILOG(TN)                                  \                                           
atomic {                                        \
l1_11_##TN unlockNode(curr,TN) l1_ver_##TN                      \   
l1_ver_##TN verifySameRes(TN) l1_exit_##TN               /*local action  */     \
/*l1_exit_##TN Clear(TN) l1_end_##TN */                   /*local action  */     \
l1_exit_##TN Clear(TN) l1_0_##TN                          /*local action  */     \
}                                           \


/*in all operations: res expectd to be null*/

/*insert */
#define INSERT_CONC(TN)                                             \ 
atomic {                                                    \
li1_1_##TN isDataEq(curr,x_i,TN) li1_5_##TN                  /*local action */                  \   
li1_1_##TN isDataNotEq(curr,x_i,TN) li1_2_##TN               /*local action */                  \
li1_2_##TN updateNext(x_i,curr,TN) li1_3a_##TN               /*local action - new node not accessible by other threads */ \
                                                        \
li1_3a_##TN assignNextNull(pred,TN) li1_3_##TN               /*atomic with updateNext */            \   
li1_3_##TN updateNext(pred,x_i,TN) li1_4_##TN                /*Vafeiadis lp */                  \   
                                                        \
li1_4_##TN assignRef(res,x_i,TN) l1_10_##TN                  /*local action */                  \
li1_5_##TN assignNull(res,TN) l1_10_##TN                     /*local action   / Vafeiadis lp */         \
}                                                       \



/*delete*/
#define DELETE_CONC(TN)                                             \ 
atomic {                                                    \   
ld1_1_##TN isDataNotEq(curr,x_i,TN) ld1_5_##TN              /*local action */                   \
ld1_1_##TN isDataEq(curr,x_i,TN) ld1_2_##TN                  /*local action */                  \
ld1_2_##TN assignFromNextField(next,curr,TN) ld1_3a_##TN    /*next expected to be null  / Vafeiadis lp   */ \
}                                                       \
atomic {                                                    \
ld1_3a_##TN assignNextNull(pred,TN) ld1_3_##TN              /*atomic with updateNext */         \
ld1_3_##TN updateNext(pred,next,TN) ld1_4_##TN                                  \
                                                        \
ld1_4_##TN assignRef(res,curr,TN) ld1_6_##TN                /*local action */                   \       
ld1_5_##TN assignNull(res,TN) l1_10_##TN                    /*local action  / Vafeiadis lp  */          \
}                                                       \
ld1_6_##TN assignNextNull(curr,TN) l1_10_##TN          \


/**********************    Thread Creation **********************/


//producer
#define CREATE_P(TN)                                            \
%thread producer_##TN {                                         \
LOCATE(TN)                                              \
l1_dispatch_##TN setChoice(insert,TN) li1_1_##TN }        /*local action */                 \
                                                    \
                                                    \
LOCATE2(TN)                                             \
                                                    \
SEQUENTIAL(TN)                                              \
SEQUENTIAL2(TN)                                             \
SEQUENTIAL3(TN)                                             \
                                                    \
EPILOG(TN)                                              \
                                                    \
INSERT_CONC(TN)                                             \
}                                                   \



//consumer
#define CREATE_C(TN)                                            \
%thread consumer_##TN { \
LOCATE(TN)                                              \
                                                        \
   l1_dispatch_##TN setChoice(delete,TN) ld1_1_##TN       /*local action  /DEBUG COMMENT  */    \
}                                                   \
                                                    \
LOCATE2(TN)                                             \
                                                    \
SEQUENTIAL(TN)                                              \
SEQUENTIAL2(TN)                                             \
SEQUENTIAL3(TN)                                             \
                                                    \
EPILOG(TN)                                              \
                                                    \
DELETE_CONC(TN)                                             \
}                                                   \



//general client
#define CREATE_G(TN)                                    \
%thread general_##TN {                                  \
LOCATE(TN)                                              \
                                                        \
/*nondeterministic choice of transaction*/              \
    l1_dispatch_##TN setChoice(insert,TN) li1_1_##TN          /*local action */             \
    l1_dispatch_##TN setChoice(delete,TN) ld1_1_##TN          /*local action  /DEBUG COMMENT  */    \
}                                                       \
                                                        \
LOCATE2(TN)                                             \
                                                        \
SEQUENTIAL(TN)                                          \
SEQUENTIAL2(TN)                                         \
SEQUENTIAL3(TN)                                         \
                                                        \
EPILOG(TN)                                              \
                                                        \
INSERT_CONC(TN)                                         \
                                                        \
DELETE_CONC(TN)                                         \
}                                                   \



//create producer types
#if(0 < KNUM)
CREATE_P(p1)
#endif

#if(1 < KNUM)
CREATE_P(p2)
#endif

#if(2 < KNUM)
CREATE_P(p3)
#endif

#if(3 < KNUM)
CREATE_P(p4)
#endif

//create consumer types
#if(0 < KNUM)
CREATE_C(c1)
#endif

#if(1 < KNUM)
CREATE_C(c2)
#endif

#if(2 < KNUM)
CREATE_C(c3)
#endif

#if(3 < KNUM)
CREATE_C(c4)
#endif

//create general types
#if(0 < GNUM)
CREATE_G(g1)
#endif

#if(1 < GNUM)
CREATE_G(g2)
#endif

#if(2 < GNUM)
CREATE_G(g3)
#endif

#if(3 < GNUM)
CREATE_G(g4)
#endif

%%
