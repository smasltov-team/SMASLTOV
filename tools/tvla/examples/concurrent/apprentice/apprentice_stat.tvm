/***
* apprentice_stat.tvm
* Actions for the apprentice challenge
***/

%action skip() {
    %t "skip ()"
    %p  !property_occured()
}

%action succLock(fld) {
    %t "SuccesfulLock(" + fld + ")"
    %f  { is_acquired(l), runnable(tr) & rv[fld](tr,l) }
    %p  !property_occured() & rv[fld](tr,l) & (!is_acquired(l) | heldby(l, tr))
    {
        heldby(l_1, t_1) = heldby(l_1, t_1) | (t_1 == tr & l_1 == l)
        blocked(t_1,l_1) = blocked(t_1,l_1) & ((t_1 != tr) | (l_1 != l))
        is_acquired(l_1) = is_acquired(l_1) | (l_1 == l)
   }
}

%action blockLock(fld) {
    %t "blockLock (" + fld + ")"
    %f { runnable(tr) & rv[fld](tr,l), is_acquired(l) }
    %p  !property_occured() & rv[fld](tr,l) & is_acquired(l) & !heldby(l,tr)
    {
        blocked(t_1, l_1) =
            (blocked(t_1, l_1) &  (t_1 != tr | l_1 != l)) |
            (t_1 == tr & l_1 == l)
   }
}

%action unlock(fld) {
    %t "unLock(" + fld + ")"
    %f { is_acquired(l), runnable(tr) & rv[fld](tr,l) }
    %p !property_occured() & rv[fld](tr,l)
    {
        heldby(l_1, t_1) = heldby(l_1, t_1) &  (t_1 != tr | l_1 != l)
        is_acquired(l_1) = is_acquired(l_1) & (l_1 != l)
   }
}

%action newJob(fld) {
    %t fld + "= new Job()"
    %p !property_occured()
    %new
    {
        isthread(v_1) = isthread(v_1) | isNew(v_1)
        at[jl_1](v_1) = at[jl_1](v_1) | isNew(v_1)
        rv[fld](v_1,v_2) = rv[fld](v_1,v_2) | (v_1  == tr & isNew(v_2))
        r_by[fld](v_1) = r_by[fld](v_1) | isNew(v_1)
    }
}

%action newContainer(fld) {
    %t fld + "= new Container()"
    %p !property_occured()
    %new
    {
        rv[fld](v_1,v_2) = rv[fld](v_1,v_2) | (v_1  == tr & isNew(v_2))
        r_by[fld](v_1) = r_by[fld](v_1) | isNew(v_1)
        islock(v_1) = islock(v_1) | isNew(v_1)
        rv[counter](v_1,v_2) = rv[counter](v_1,v_2) | (isNew(v_1) & zero(v_2))
        r_by[counter](v_1) = r_by[counter](v_1) | zero(v_1)
    }
}

%action assignField(obj,fld,ref) {
    %t obj + "." + fld + "=" + ref
    %f { runnable(tr) & rv[obj](tr,o_s) & rv[ref](tr,o_t) }
    %p !property_occured() & rv[obj](tr,o_s) & rv[ref](tr,o_t)
    {
        rv[fld](v_1,v_2) = rv[fld](v_1,v_2) | (v_1 == o_s & v_2 == o_t)
        r_by[fld](v_1) = r_by[fld](v_1) | (v_1 == o_t)
    }
}

%action assignFieldFromField(obj,fld,ref) {
    %t obj + "." + fld + "=" + obj + "." + ref
    %f { runnable(tr) & rv[obj](tr,o_s) & rv[ref](o_s,o_t) }
    %p !property_occured() & rv[obj](tr,o_s) & rv[ref](o_s,o_t)
    {
        rv[fld](v_1,v_2) = rv[fld](v_1,v_2) | (v_1 == o_s & v_2 == o_t)
        r_by[fld](v_1) = r_by[fld](v_1) | (v_1 == o_t)
    }
}

%action assignFieldNull(obj,fld) {
    %t obj + "." + fld + "= null"
    %f { runnable(tr) & rv[obj](tr,o_s) }
    %p !property_occured() & rv[obj](tr,o_s)
    {
        rv[fld](v_1,v_2) = rv[fld](v_1,v_2) & (v_1 != o_s)
        r_by[fld](v_1) = r_by[fld](v_1) &
            (E(o_p,dst) ((o_p != o_s) & rv[fld](o_p,dst) & rv[fld](o_s,dst)))
    }
}

%action start(fld) {
    %t fld + ".start()"
    %f { runnable(tr) & rv[fld](tr,o_t) }
    %p !property_occured() & rv[fld](tr,o_t)
    %message !isthread(o_t) -> "UnsupportedOperationException (cannot start non-thread object)"
    {
        ready(v_1) = ready(v_1) | (v_1 == o_t)
    }
}


%action getSuccessor(ref,obj,fld) {
    %t  ref + " = " + obj + "." +fld + ".successor"
    %f { runnable(tr) & rv[obj](tr,o_t) & rv[fld](o_t,cnt) & successor(cnt,dst) }
    %p !property_occured() & rv[obj](tr,o_t) & rv[fld](o_t,cnt) & successor(cnt,dst)
    {
        rv[ref](t_1,o_1) = rv[ref](t_1,o_1) | ((t_1 == tr) & (o_1 == dst))
        r_by[ref](o_1) = r_by[ref](o_1) | (o_1 == dst)
    }
}

%action assignNull(fld) {
    %t tr + "." + fld + " = null"
    %f { runnable(tr) & rv[fld](tr,dst) }
    %p !property_occured()
    {
        rv[fld](t_1,o) = rv[fld](t_1,o) & (t_1 != tr)
        r_by[fld](o_1) = r_by[fld](o_1) & E(o_p) ((o_p != tr) & rv[fld](o_p,o_1))
    }
}
