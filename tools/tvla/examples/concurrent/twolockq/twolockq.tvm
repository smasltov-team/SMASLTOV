/************************************************************************ 
 * A Concurrent TVM program for concurrent queue manipulations 
 * Name: twolockq.tvm
 * Created: 01/05/2000
 * Modified: 17/12/2000
 * Description: Two Lock Queue.
 * A queue with two locks - one associated with the head, and one associated with the tail.
 * Note that a head node always exists, otherwise, the queue is not safe.
 *
 ***********************************************************************/


/*********************** Property Condition ******************************/

#define PROPERTY_COND E(tad,tai) at[li_end](tai) & at[ld_end](tad) \
                         & E(x)is_lock(x) & !global[headLock](x) & !global[tailLock](x) \
                         & !rg[head](x) \
                         & !(E(tp) rt[x_d,next](tp,x) | rt[x_i,next](tp,x)) \ 
                         & !r_by[old_head](x)
                         
////#define PROPERTY_FOCUS { E(y) rvalue[x_i](t,y) }
#define PROPERTY_MESSAGE "item may be lost"

/*********************** Macros ******************************/
// use referenced_by instrumentation
#define RBY
// use reachability instrumentation
#define REACH



/*********************** Sets ******************************/

%s FieldsAndParameters { x_i,x_d, newTail, next, first, old_head }
%s Globals { head,tail,tailLock,headLock } 

/**************** Predicates **************/

#include "../con_pred.tvm"
#include "../shape_pred.tvm"


%r E(x,y) (x != y) & global[head](x) & global[head](y) ==> 0

%%
/********************* Actions *******************/

#include "../con_stat.tvm"
#include "../shape_stat.tvm"

%action verifyProperty() { 
    %p  PROPERTY_COND
    %message 1 -> PROPERTY_MESSAGE
    
}

/**************** Program *********************/

%%

/***********************************************/
/************** Producer Threads ****************/
%thread producer {
li_1 assignNew(x_i) li_2                    // x_i = new Item()     (1->2)
li_2 succLockGlobal(tailLock) li_3          // lock tailLock        (2->3)
li_2 blockLockGlobal(tailLock) li_2         //                      (2->2)
li_3 updateGlobalNext(tail,x_i) li_4        // tail.next = x_i      (3->4)
atomic {
li_4 killGlobal(tail) li_5                  // tail = null          (4->5) (atomic)
li_5 assignGlobal(tail,x_i) li_6            // tail = x_i           (5->6) (endatomic)
}
li_6 unlockGlobal(tailLock) li_7            //                      (6->7)
li_7 assignNull(x_i) li_end                 // exit scope for x_i   (7->end)
li_end skip() li_1                          // loop back to li_1     (end->1)
}


/***********************************************/
/************** Consumer Threads ****************/
%thread consumer {
ld_1 succLockGlobal(headLock) ld_2          // lock headLock       (1->2)
ld_1 blockLockGlobal(headLock) ld_1         //                     (1->1)
ld_2 assignNull(x_d) ld_3                   // x_d = null          (2->3)
ld_3 selectGlobalNext(first,head) ld_4      // first=head.next     (3->4)
ld_4 isNull(first) ld_8                     //                     (4->8)
ld_4 isNotNull(first) ld_5                  // if (first != null)  (4->5)
ld_5 assignReference(x_d,first)  ld_6       // x_d = first         (5->6)
ld_6 assignFromGlobal(old_head,head) ld_7   // old_head = head     (6->7)
atomic {
  ld_7 killGlobal(head) ld_8                  //                     (7->8) (atom)
  ld_8 assignGlobal(head,first) ld_9          // head = first        (8->9) (endatom)
}
ld_9 unlockGlobal(headLock) ld_end          // unlock headLock     (8->end)
ld_end skip() ld_1                          //                     (end->1)
}
%%
/***********************************************/
/**************  Claims        ****************/
verifyProperty()
