/***********************************************************
* con_stat.tvm
* include file for concurrency
***********************************************************/


%action skip() { 
    %t "skip ()"
    %p  !property_occured() 
}

%action succLockGlobal(glb) {
    %t "SuccesfulLocGlobal (" + glb + ")"
    %f  { is_acquired(l), runnable(tr) & global[glb](l) } 
    %p  !property_occured() & global[glb](l) & (!is_acquired(l) | held_by(l, tr))
    {
        
        held_by(l_1, t_1) = 
            (held_by(l_1, t_1) &  (t_1 != tr | l_1 != l)) |
            (t_1 == tr & l_1 == l)
            
        blocked(t_1,l_1) = blocked(t_1,l_1) & ((t_1 != tr) | (l_1 != l))
            
        is_acquired(l_1) = is_acquired(l_1) | (l_1 == l) 
        
        #ifdef THREAD_STATE
        ts_blocked(t_1) = ts_blocked(t_1) & (t_1 != tr)
        #endif
        
        #ifdef SLOCK
        slock(t_1) = slock(t_1) & (t_1 != tr) // since there's no lock we are blocked-on
        #endif // slock
   }
}

%action blockLockGlobal(glb) {
    %t "blockLocGlobal (" + glb + ")"
    %f { runnable(tr) & global[glb](l) & is_acquired(l) }
    %p  !property_occured() & global[glb](l) & is_acquired(l) & !held_by(l,tr)
    {
        blocked(t_1, l_1) = 
            (blocked(t_1, l_1) &  (t_1 != tr | l_1 != l)) |
            (t_1 == tr & l_1 == l) 
            
        #ifdef THREAD_STATE
        ts_blocked(t_1) = ts_blocked(t_1) | (t_1 == tr)
        #endif
            
        #ifdef SLOCK
        slock(t_1) = slock(t_1) | ((t_1==tr) 
          & |/{ (E(l_v) rvalue[v_1](t_1,l_v) & held_by(l_v,t_1) & fidlt[v,v_1](tr))
            : v_1 in FieldsAndParameters - {v}})
        #endif // slock

   }
}

%action unlockGlobal(glb) {
    %t "unLocGlobal (" + glb + ")"
    %f { is_acquired(l), runnable(tr) & global[glb](l) }
    %p  !property_occured() & runnable(tr) & global[glb](l)   
    {
        held_by(l_1, t_1) = held_by(l_1, t_1) &  (t_1 != tr | l_1 != l) 
        is_acquired(l_1) = is_acquired(l_1) & (l_1 != l)
        #ifdef SLOCK
        slock(t_1) = slock(t_1) & (t_1 != tr) // since there's no lock we are blocked-on
        #endif
   }
}

//%action newThread(ref,nl) {
//    %t "new Thread()"  
//    %newthread  
//    {
//        rvalue[ref](t,o_t) = rvalue[ref](t,o_t) | isNew(o_t)
//        ts_created(t_1) = ts_created(t_1) | isNew(t_1)
//        is_thread(t_1) = is_thread(t_1) | isNew(t_1)
//        at[nl](t_1) = at[nl](t_1) | isNew(t_1)
//    }
//
//}
