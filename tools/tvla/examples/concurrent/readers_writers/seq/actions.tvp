//P(Semaphore s)
//{
//  wait until s > 0, then s := s-1;
//  /* must be atomic once s > 0 is detected */
//}

%action P_fail(from, to, semaphore) {
  %t "P(" + semaphore + ") fail"
  %p !semaphore()
//  {
//    at[from](v) = at[from](v) & !(tr(v) & at[from](v)) | (tr(v) & at[from(v) & at[to](v))
//  }
}

%action P_success(from, to, semaphore) {
  %t "P(" + semaphore + ") success"
  %p semaphore()
  {
    semaphore() = !semaphore()

    // Multithreading section
    at[from](v) = at[from](v) & !tr(v)
    at[to](v) = at[from](v) & tr(v)
  }
}

//V(Semaphore s)
//{
//  s := s+1;   /* must be atomic */
//}
%action V(from, to, semaphore) {
  %t "V(" + semaphore + ")"
  %message (semaphore()) -> "Attempt to increment binary semaphore " + semaphore + " beyond 1"
  {
    semaphore() = 1

    // Multithreading section
    at[from](v) = at[from](v) & !tr(v)
    at[to](v) = at[from](v) & tr(v)
  }
}

%action increment(from, to, counter) {
  %t counter + "=" + counter + "+1"
  %f {counter(n), counter(n) & successor(n,n_1), counter(n) & successor(n_1,n)}
  {
    counter(n) = E(n_1) counter(n_1) & successor(n_1,n)

    // Multithreading section
    at[from](v) = at[from](v) & !tr(v)
    at[to](v) = at[from](v) & tr(v)
  }
}

%action decrement(from, to, counter) {
  %t counter + "=" + counter + "-1"
  %f {counter(n), counter(n) & successor(n_1,n), counter(n) & successor(n,n_1)}
  %message (E(n) counter(n) & num0(n)) -> "Attempt to decrement a 0-valued counter: " + counter
  {
    counter(n) = E(n_1) counter(n_1) & successor(n,n_1)

    // Multithreading section
    at[from](v) = at[from](v) & !tr(v)
    at[to](v) = at[from](v) & tr(v)
  }
}

%action if_equal(from, to, counter,value) {
  %t counter + "==" + value
  %f {counter(n), value(n),
      counter(n) & successor(n,n_1), counter(n) & successor(n_1,n),
      value(n) & successor(n,n_1), value(n) & successor(n_1,n)}
  %p E(n) counter(n) & value(n)
  {
    // Multithreading section
    at[from](v) = at[from](v) & !tr(v)
    at[to](v) = at[from](v) & tr(v)
  }
}

%action if_not_equal(from, to, counter,value) {
  %t counter + "!=" + value
  %f {counter(n), value(n),
      counter(n) & successor(n,n_1), counter(n) & successor(n_1,n),
      value(n) & successor(n,n_1), value(n) & successor(n_1,n)}
  %p !(E(n) counter(n) & value(n))
  {
    // Multithreading section
    at[from](v) = at[from](v) & !tr(v)
    at[to](v) = at[from](v) & tr(v)
  }
}

%action read(from, to) {
  %t "reading"
  {
    // Multithreading section
    at[from](v) = at[from](v) & !tr(v)
    at[to](v) = at[from](v) & tr(v)
  }
}

%action write(from, to) {
  %t "writing"
  {
    // Multithreading section
    at[from](v) = at[from](v) & !tr(v)
    at[to](v) = at[from](v) & tr(v)
  }
}
