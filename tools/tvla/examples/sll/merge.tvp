///////
// Sets

%s PVar {t, q, p, h}

#include "predicates.tvp"

%%

#include "actions.tvp"

%%

/////////////////////////////////////////////////////////////////////////////
// Transition system for a function that merges two ordered lists (pointed by
// variables p and q) into one ordered list (pointed by variable h).

L1  Is_Null_Var(p)     exit // if (p == NULL)
L1  Is_Not_Null_Var(p) L2
                            //   return q;
L2  Is_Null_Var(q)     exit // if (q == NULL)
L2  Is_Not_Null_Var(q) L3
                            //   return p;      
L3  uninterpreted()    L4   // if (p->val < q->val) {
L3  uninterpreted()    L6
L4  Copy_Var_L(h, p)   L5   //   h = p;
L5  Get_Next_L(p, p)   L8   //   p = p->n;
                            // }
                            // else {
L6  Copy_Var_L(h, q)   L7   //   h = q;
L7  Get_Next_L(q, q)   L8   //   q = q->n;
                            // }
L8  Copy_Var_L(t, h)   L9   // t = h;
L9  Is_Not_Null_Var(p) L10  // while(p != NULL && q != NULL) {
L9  Is_Null_Var(p)     L19
L10 Is_Not_Null_Var(q) L11
L10 Is_Null_Var(q)     L19
L11 uninterpreted()    L12  //   if (p->val < q->val) {
L11 uninterpreted()    L15
L12 Set_Next_Null_L(t) L13  //     t->n = NULL;
L13 Set_Next_L(t, p)   L14  //     t->n = p;
L14 Get_Next_L(p, p)   L18  //     p = p->n;
                            //   }
                            //   else {
L15 Set_Next_Null_L(t) L16  //     t->n = NULL;
L16 Set_Next_L(t, q)   L17  //     t->n = q;
L17 Get_Next_L(q, q)   L18  //     q = q->n;
                            //   }
L18 Get_Next_L(t, t)   L9   //   t = t->n;
                            // }
L19 Is_Not_Null_Var(p) L20  // if (p != NULL) {
L19 Is_Null_Var(p)     L22
L20 Set_Next_Null_L(t) L21  //   t->n = NULL;
L21 Set_Next_L(t, p)   L25  //   t->n = p;
                            // }
L22 Is_Not_Null_Var(q) L23  // else if (q != NULL) {
L22 Is_Null_Var(q)     L25
L23 Set_Next_Null_L(t) L24  //   t->n = NULL;
L24 Set_Next_L(t, q)   L25  //   t->n = p;
                            // }
L25 skip()             exit
exit Assert_ListInvariants(h) error
exit Assert_No_Leak(h)        error

%%

/////////////////////////////////////////////////////////////////////////
// Display only structures that arise at the following program locations.
L1, exit
