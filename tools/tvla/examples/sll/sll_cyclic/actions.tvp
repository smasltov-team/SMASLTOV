%action uninterpreted() { 
  %t "uninterpreted"
}

%action skip() { 
  %t "skip"
}


///////////////////////////////////////////////////////////////////////////
// Actions for statements manipulating pointer variables and pointer fields

%action Set_Null_L(lhs) {
  %t lhs + " = null"
  {
    lhs(v) = 0 
    r[n,lhs](v) = 0
  }
}

%action Copy_Var_L(lhs, rhs) {
  %t lhs + " = " + rhs
  %f { rhs(v) } 
  {
    lhs(v) = rhs(v) 
    r[n,lhs](v) = r[n,rhs](v)
  }
}

%action Malloc_L(lhs) {
  %t lhs + " = (L) malloc(sizeof(struct node)) "
  %new
  {
    lhs(v) = isNew(v)
    r[n, lhs](v) = isNew(v)
  }
}

%action Free_L(lhs) {
  %t "free(" + lhs + ")"
  %f { lhs(v) }
  %message (E(v, v1) lhs(v) & n(v, v1)) ->
           "Internal Error! assume that " + lhs + "->" + n + "==NULL"
  %retain !lhs(v)
}

%action Get_Next_L(lhs, rhs) {
  %t lhs + " = " + rhs + "->" + n
  %f { E(v_1) rhs(v_1) & n(v_1, v) } 
  %message (!E(v) rhs(v)) ->
           "An illegal dereference to\n" + n + " component of " + rhs
  {
    lhs(v) = E(v_1) rhs(v_1) & n(v_1, v) 
    r[n,lhs](v) = r[n,rhs](v) & (c[n](v) | !rhs(v))
  }
}

%action Set_Next_Null_L(lhs) {
  %t lhs + "->" + n + " = NULL"
  %f { lhs(v) } 
  %message (!E(v) lhs(v)) ->
           "An illegal dereference to\n" + n + " component of " + lhs
  {
    n(v_1, v_2) = n(v_1, v_2) & !lhs(v_1)
    is[n](v) = is[n](v) & (!(E(v_1) lhs(v_1) & n(v_1, v)) | 
                       E(v_1, v_2) v_1 != v_2 &
                                   (n(v_1, v) & !lhs(v_1)) &
                                   (n(v_2, v) & !lhs(v_2)))

    r[n,lhs](v) = lhs(v)
    foreach(z in PVar-{lhs}) {
      r[n,z](v) = (c[n](v) & r[n,lhs](v)? 
                  z(v) | E(v_1) z(v_1) & TC (v_1, v) (v_3, v_4) (n(v_3, v_4) & !lhs(v_3)) :
                  r[n,z](v) & ! (E(v_1) r[n,z](v_1) & lhs(v_1) & r[n,lhs](v) & !lhs(v)))
    }
    c[n](v) = c[n](v) & ! (E( v_1) lhs(v_1) & c[n](v_1) & r[n,lhs](v))
  }
}

%action Set_Next_L(lhs, rhs) {
  %t lhs + "->" + n + " = " + rhs
  %f { lhs(v), rhs(v) } 
  %message (E(v, v1) lhs(v) & n(v, v1)) ->
           "Internal Error! assume that " + lhs + "->" + n + "==NULL"
  %message (!E(v) lhs(v)) ->
           "An illegal dereference to\n" + n + " component of " + lhs
  {
    n(v_1, v_2) = n(v_1, v_2) |  lhs(v_1) & rhs(v_2)
    is[n](v) = is[n](v) | E(v_1) rhs(v) & n(v_1, v)
    foreach(z in PVar) {
      r[n,z](v) = r[n,z](v) | E(v_1) r[n,z](v_1) & lhs(v_1) & r[n,rhs](v)
    }
    c[n](v) = c[n](v) | (E(v_1) lhs(v_1) & r[n,rhs](v_1) & r[n,rhs](v))
  }
}

//////////////////////////////////////////////////////////////////
// Actions needed to simulate program conditions involving pointer
// equality tests.

%action Is_Not_Null_Var(lhs) {
  %t lhs + " != NULL"
  %f { lhs(v) } 
  %p E(v) lhs(v)
}

%action Is_Null_Var(lhs) {
  %t lhs + " == NULL"
  %f { lhs(v) } 
  %p !(E(v) lhs(v))
}

%action Is_Eq_Var(lhs, rhs) {
  %t lhs + " == " + rhs
  %f { lhs(v), rhs(v) } 
  %p A(v) lhs(v) <-> rhs(v)
}

%action Is_Not_Eq_Var(lhs, rhs) {
  %t lhs + " != " + rhs
  %f { lhs(v), rhs(v) } 
  %p !A(v) lhs(v) <-> rhs(v)
}


/////////////////////////////////////////
// Actions for testing various properties

%action Assert_ListInvariants(lhs) {
  %t "assertListInvariants(" + lhs + ")"
  %f { lhs(v) }
  %p (E(v) r[n,lhs](v) & c[n](v)) | (E(v) r[n,lhs](v) & is[n](v))
  %message ( E(v) r[n,lhs](v) & c[n](v) ) -> 
           "The list pointed by " + lhs + " may be cyclic!"
  %message ( E(v) r[n,lhs](v) & is[n](v) ) -> 
           "The list pointed by " + lhs + " may be shared!"
}

%action Assert_No_Leak(lhs) {
  %t "assertNoLeak(" + lhs + ")"
  %f { lhs(v) }
  %p E(v) !r[n,lhs](v)
  %message ( E(v) !r[n,lhs](v) ) -> 
           "There may be a list element not reachable from variable " + lhs + "!"
}
