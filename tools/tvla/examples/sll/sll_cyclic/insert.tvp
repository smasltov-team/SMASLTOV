///////
// Sets

%s PVar {x, e, p, t}

#include "predicates.tvp"

%%

#include "actions.tvp"

%%

////////////////////////////////////////////////////////////////////////////
// Transition system for a function that creates an element with a specified 
// value and inserts it before the first element with a larger value.

L1  Copy_Var_L(e, x)    L2   // e = x;
L2  Set_Null_L(p)       L3   // p = NULL;
L3  Is_Not_Null_Var(e)  L5   // while (e != NULL && value < elem->val) {
L3  Is_Null_Var(e)      L7
L5  Copy_Var_L(p, e)    L6   //   p = e;
L6  Get_Next_L(e, e)    L3   //   e = e->n;
                             // }
L7  Is_Eq_Var(e, x)     L8   // if (e == x) {
L7  Is_Not_Eq_Var(e, x) L11
L8  Malloc_L(x)         L9   //   x = malloc(sizeof(struct node));
L9  Set_Next_Null_L(x)  L10  //   x->n = NULL;
L10 Set_Next_L(x, e)    exit //   x->n = e;
                             // } 
                             // else {
L11 Malloc_L(t)         L12  //   t = malloc(sizeof(struct node));
L12 Set_Next_Null_L(t)  L13  //   t->n = NULL;
L13 Set_Next_L(t, e)    L14  //   t->n = e;
L14 Set_Next_Null_L(p)  L15  //   p->n = NULL;
L15 Set_Next_L(p, t)    exit //   p->n = t;
                             // }
exit Assert_ListInvariants(x) error
exit Assert_No_Leak(x)        error