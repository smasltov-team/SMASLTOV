///////
// Sets

%s PVar {x, elem, prev, temp}

#include "predicates.tvp"

%%

#include "actions.tvp"

%%

////////////////////////////////////////////////////////////////////////////
// Transition system for a function that deletes an element with a specified
// value from a list.

L1  Copy_Var_L(elem, x)    L2   // elem = x;
L2  Is_Null_Var(elem)      exit // for (elem = x; elem != NULL; ) {
L2  Is_Not_Null_Var(elem)  L3
L3  uninterpreted()        L4   //   if (elem->val == delval) {
L3  uninterpreted()        L12
L4  Is_Not_Null_Var(prev)  L6   //     if (prev == NULL)
L4  Is_Null_Var(prev)      L5 
L5  Get_Next_L(x, elem)    L10  //       x = elem->n;
                                //     else
L6  Get_Next_L(temp, elem) L7   //       prev->n = elem->n;
L7  Set_Next_Null_L(prev)  L8
L8  Set_Next_L(prev, temp) L9
L9  Set_Null_L(temp)       L10
L10 Set_Next_Null_L(elem)  L11  //     elem->n = NULL;
L11 Free_L(elem)           exit //     free(elem);
                                //     return;
                                //   }
L12 Copy_Var_L(prev, elem) L13  //   prev = elem;
L13 Get_Next_L(elem, elem) L2   //   elem = elem->n;
                                // }
exit Assert_ListInvariants(x) error
exit Assert_No_Leak(x)        error