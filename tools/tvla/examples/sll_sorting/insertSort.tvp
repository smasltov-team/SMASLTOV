///////
// Sets

%s PVar {x, r, pr, rn, pl, l} // Names of pointer variables.
%s HVar {x}  // Names of pointer variables used for taking heap snapshots.
%s HLoc {L0} // Names of program labels where snapshots of the heap are taken.

#include "predicates.tvp"

%%

#include "actions.tvp"

%%

////////////////////////////////////////////////////////
// Transition system for insert sort.
// The data in the sorted list is presumed to be unique.

                                 // L insertSort(L x) {
L0  Copy_Reach_L(x, L0)     L1   // [ Take a snapshot of the heap to later         ]
                                 // [ verify that the output list is a permutation ]
                                 // [ of the list pointed by x.                    ]
L1  Copy_Var_L(r, x)        L2   //   r = x;
L2  Set_Null_L(pr)          L3   //   pr = NULL;
L3  Is_Not_Null_Var(r)      L4   //   while (r != NULL) {
L3  Is_Null_Var(r)          L22
L4  Copy_Var_L(l, x)        L5   //     l = x;
L5  Get_Next_L(rn, r)       L6   //     rn = r->n;
L6  Set_Null_L(pl)          L7   //     pl = NULL;
L7  Is_Not_Eq_Var(l, r)     L8   //     while (l != r) {
L7  Is_Eq_Var(l, r)         L20
L8  Greater_Data_L(l, r)    L9   //       if (l->data > r->data) {
L8  Less_Equal_Data_L(l, r) L18
L9  Set_Next_Null_L(pr)     L10  //         pr->n = NULL;
L10 Set_Next_L(pr, rn)      L11  //         pr->n = rn;
L11 Set_Next_Null_L(r)      L12  //         r->n = NULL;
L12 Set_Next_L(r, l)        L13  //         r->n = l;
L13 Is_Null_Var(pl)         L14  //         if (pl == NULL)
L13 Is_Not_Null_Var(pl)     L15
L14 Copy_Var_L(x, r)        L17  //           x = r;
                                 //         else {
L15 Set_Next_Null_L(pl)     L16  //           pl->n = NULL;
L16 Set_Next_L(pl, r)       L17  //           pl->n = r; }
L17 Copy_Var_L(r, pr)       L20  //         r = pr;
                                 //         break;
                                 //       }
L18 Copy_Var_L(pl, l)       L19  //       pl = l;
L19 Get_Next_L(l, l)        L7   //       l = l->n;
                                 //     }
L20 Copy_Var_L(pr, r)       L21  //     pr = r;
L21 Copy_Var_L(r, rn)       L3   //     r = rn;
                                 //   }
L22 Set_Null_L(l)           L23  //   l = NULL;
L23 Set_Null_L(r)           L24  //   r = NULL;
L24 Set_Null_L(pr)          L25  //   pr = NULL;
L25 Set_Null_L(pl)          L26  //   pl = NULL;
L26 Set_Null_L(rn)          exit //   rn = NULL;
                                 //   return x;
                                 // }
exit Assert_Permutation_L(x, L0) exit2
exit Assert_Sorted_L(x)          exit2

%%

/////////////////////////////////////////////////////////////////////////
// Display structures that arise only at the following program locations.
L1, exit