///////
// Sets

%s PVar {x, y, p, yn, t} // Names of pointer variables.
%s PSel {n}  // Names of pointer fields.
%s HVar {x}  // Names of pointer variables used for taking heap snapshots.
%s HLoc {L0} // Names of program labels where snapshots of the heap are taken.


//////////////////
// Core Predicates

// For every program variable z there is a unary predicate that holds for
// list elements pointed by z.
// The unique property is used to convey the fact that the predicate can hold
// for at most one individual.
// The pointer property is a visualization hint for graphical renderers.
foreach (z in PVar) {
    %p z(v_1) unique pointer
}

// The predicate n represents the n field of the list data type.
%p n(v_1, v_2) function acyclic

/////////////////////////////////////////////
// Instrumentation (i.e., derived) predicates

// The is[n] predicate holds for list elements pointed by two different
// list elements.
%i is[n](v) =   E(v_1, v_2) (v_1 != v_2 & n(v_1, v) & n(v_2, v))

// The t[n] predicate records transitive reflexive reachability between
// list elements along the n field.
%i t[n](v_1, v_2) = n*(v_1, v_2) transitive reflexive

// Integrity constraints for transitive reachability
%r !t[n](v_1, v_2) ==> !n(v_1, v_2)
%r !t[n](v_1, v_2) ==> v_1 != v_2
%r E(v_1) (t[n](v_1, v_2) & t[n](v_1, v_3) & !t[n](v_2, v_3)) ==> t[n](v_3, v_2)

// For every program variable z the predicate r[n,z] holds for individual
// v when v is reachable from variable z along the n field (more formally,
// the corresponding list element is reachable from z).
foreach (z in PVar) {
    %i r[n,z](v) =  E(v_1) (z(v_1) & t[n](v_1, v))
}


/////////////////////////////////////
// Predicates related to numeric data

// The predicate dle holds for two list elements if the numeric value
// in the data field of the first element is less or equal to the value
// in the data field of the second element.
%p dle(v_1, v_2) transitive reflexive

// The following integrity constraint means that dle is anti-symmetric
// and together with the functional properties above (transitive and reflezive)
// we get that dle is a total order.
%r !dle(v_1, v_2) ==> dle(v_2, v_1)

// The predicate inOrder[del,n] holds for a list element, if it points,
// via the field n, to a list element whose data field is less or equal
// to the value of its data field.
// The nonabs property means that this predicate is not used for abstracting
// structures.  This is done for performance reasons.
%i inOrder[dle,n](v) = A(v_1) n(v, v_1) -> dle(v, v_1) nonabs

// Similar to inOrder but captures the opposite correlation between the
// next element and the value of data.
%i inROrder[dle,n](v) = A(v_1) n(v, v_1) -> dle(v_1, v) nonabs

// The predicate or[n,z,l] is used to take a snapshot of the part of the
// heap reachable from pointer variable z via dereferences of field n
// when the program reaches the program label l.
// (See Copy_Reach_L in actions.tvp.)
foreach (z in HVar) {
    foreach (l in HLoc) {
        %p or[n,z,l](v) 
    }
}
  %p change()  // Represents the boolean variable change.

%%


%action Skip() { 
        %t "skip"
}


///////////////////////////////////////
// Actions related to boolean variables

%action Set_True(lhs) {
    %t lhs + " = true"
    {
        lhs() = 1
    }
}

%action Set_False(lhs) {
    %t lhs + " = false"
    {
        lhs() = 0
    }
}

%action Is_True(lhs) {
    %t lhs
    %p lhs()
}

%action Is_False(lhs) {
    %t "!" + lhs
    %p !lhs()
}


///////////////////////////////////////
// Actions related to pointer variables

%action Set_Null_L(lhs) {
    %t lhs + " = NULL"
    {
        lhs(v) = 0
    }
}

%action Copy_Var_L(lhs, rhs) {
    %t lhs + " = " + rhs
    %f { rhs(v) } 
    {
        lhs(v) = rhs(v) 
    }
}

%action Malloc_L(lhs) {
    %t lhs + " = (L) malloc(sizeof(struct node))"
    %new
    {
        lhs(v) = isNew(v)
        t[n](v_1, v_2) = (isNew(v_1) ? v_1 == v_2 : t[n](v_1, v_2))
        r[n,lhs](v) = isNew(v)
        dle(v_1, v_2) = (isNew(v_1) & isNew(v_2)) |
                                        (v_1 != v_2  & (isNew(v_1)| isNew(v_2))? 1/2 : dle(v_1, v_2))
        inOrder[dle,n](v) = (isNew(v) ? 1 : inOrder[dle,n](v))
        inROrder[dle,n](v) = (isNew(v) ? 1 : inROrder[dle,n](v))            
    }
}

%action Get_Next_L(lhs, rhs) {
    %t lhs + " = " + rhs + "->" + n
    %f { E(v_1, v_2) rhs(v_1) & n(v_1, v_2) &  t[n](v_2, v) }
    %message  (!E(v) rhs(v)) ->
                        "Illegal dereference to\n" + n + " component of " + rhs
    {
        lhs(v) = E(v_1) rhs(v_1) & n(v_1, v)
    }
}

%action Set_Next_Null_L(lhs) {
    %t lhs + "->" + n + " = NULL"
    %f { lhs(v),
              // Optimized change-formula for t[n] update-formula.
              E(v_1, v_2) lhs(v_1) & n(v_1, v_2) & t[n](v_2, v)   
          }
    %message (!E(v) lhs(v)) ->
                      "Illegal dereference to\n" + n + " component of " + lhs
    {
        n(v_1, v_2) = n(v_1, v_2) & !lhs(v_1)
    }
}

%action Set_Next_L(lhs, rhs) {
    %t lhs + "->" + n + " = " + rhs
    %f { lhs(v), rhs(v),
              // Optimized change-formula for t[n] upate-formula.
              E(v_4) rhs(v_4) & t[n](v_4, v_2)
          }
    %message (E(v_1, v_2) lhs(v_1) & n(v_1, v_2)) ->
                      "Internal Error! assume that " + lhs + "->" + n + "==NULL"
    %message (E(v_1, v_2) lhs(v_1) & rhs(v_2) & t[n](v_2, v_1)) ->
                      "A cycle may be introduced\nby assignment " +
                      lhs + "->" + n + "=" + rhs
    {
        n(v_1, v_2) = n(v_1, v_2) | lhs(v_1) & rhs(v_2)
    }
}

%action Is_Not_Null_Var(lhs) {
    %t lhs + " != NULL"
    %f { lhs(v) } 
    %p E(v) lhs(v)
}

%action Is_Null_Var(lhs) {
    %t lhs + " == NULL"
    %f { lhs(v) } 
    %p !(E(v) lhs(v))
}

%action Is_Eq_Var(lhs, rhs) {
    %t lhs + " == " + rhs
    %f { lhs(v), rhs(v) } 
    %p A(v) lhs(v) <-> rhs(v)
}

%action Is_Not_Eq_Var(lhs, rhs) {
    %t lhs + " != " + rhs
    %f { lhs(v), rhs(v) } 
    %p !A(v) lhs(v) <-> rhs(v)
}


//////////////////////
// Numeric comparisons

%action Greater_Data_L(lhs, rhs) {
    %t lhs + "->data > " + rhs + "->data"  
    %f { lhs(v_1) & rhs(v_2) & dle(v_1, v_2) }
    %p !E(v_1, v_2) lhs(v_1) & rhs(v_2) & dle(v_1, v_2)
}

%action Less_Equal_Data_L(lhs, rhs) {
    %t lhs + "->data <= " + rhs + "->data"     
    %f { lhs(v_1) & rhs(v_2) & dle(v_1, v_2) }
    %p E(v_1, v_2) lhs(v_1) & rhs(v_2) & dle(v_1, v_2)
}

%action Greater_Equal_Data_L(lhs, rhs) {
    %t lhs + "->data >= " + rhs + "->data"     
    %f { lhs(v_1) & rhs(v_2) & dle(v_2, v_1) }
    %p E(v_1, v_2) lhs(v_1) & rhs(v_2) & dle(v_2, v_1)
}


///////////////////////////
// Sorting specific actions

%action Copy_Reach_L(lhs, l) {
    %t "storeReach(" + lhs + ", " + l + ")"
    {
        or[n,lhs,l](v) = r[n,lhs](v)
    }
}

%action Assert_Permutation_L(lhs, label) {
    %t "AssertPermutation(" + lhs + ", " + label + ")"
    %message !(A(v) (r[n,lhs](v) <-> or[n,lhs,label](v))) -> 
                      "Unable to prove that the list pointed-to by " + lhs +
                      "is a permutation of the original list at program label " + label
}

%action Assert_Sorted_L(lhs) {
    %t "AssertSorted(" + lhs +  ")"
    %message !(A(v) (r[n,lhs](v) -> inOrder[dle,n](v))) ->
                      "Unable to prove that the list pointed-to by " + lhs + " is sorted"
}

%action Assert_Reverse_Sorted_L(lhs) {
    %t "AssertReverseSorted(" + lhs +  ")"
    %message !(A(v) (r[n,lhs](v) -> inROrder[dle,n](v))) ->
                      "Unable to prove that the list pointed-to by " + lhs + 
                      " is sorted in reversed order"
}

%action Assert_No_Leak(lhs) {
    %t "assertNoLeak(" + lhs + ")"
    %f { lhs(v) }
    %p E(v) !r[n,lhs](v)
    %message ( E(v) !r[n,lhs](v) ) -> 
                      "There may be a list element not reachable from variable " + lhs + "!"
}
  
%%

///////////////////////////////////////////////////////////////////////
// Transition system for a function that performs bubble sort on a list
// by swapping list elements.

                                                                    // L bubblSort(L x) {
L0  Copy_Reach_L(x, L0)      L1   // [ Take a snapshot of the heap to later         ]
                                                                    // [ verify that the output list is a permutation ]
                                                                    // [ of the list pointed by x.                    ]
L1  Is_Null_Var(x)           exit //   if (x == NULL) return;
L1  Is_Not_Null_Var(x)       L2
L2  Set_True(change)         L3   //   change = TRUE;
L3  Is_True(change)          L4   //   while (change) {
L3  Is_False(change)         L25
L4  Set_Null_L(p)            L5   //     p = NULL;
L5  Set_False(change)        L6   //     change = FALSE;
L6  Copy_Var_L(y, x)         L7   //     y = x;
L7  Get_Next_L(yn, y)        L8   //     yn = y->n;
L8  Is_Not_Null_Var(yn)      L9   //     while (yn != NULL) {
L8  Is_Null_Var(yn)          L3
L9  Greater_Data_L(y, yn)    L10   //       if (y->data > yn->data) {
L9  Less_Equal_Data_L(y, yn) L22
L10 Get_Next_L(t, yn)        L11  //         t = yn->n;
L11 Set_True(change)         L12  //         change = TRUE;
L12 Set_Next_Null_L(y)       L13  //         y->n = NULL;
L13 Set_Next_L(y, t)         L14  //         y->n = t;
L14 Set_Next_Null_L(yn)      L15  //         yn->n = NULL;
L15 Set_Next_L(yn, y)        L16  //         yn->n = y;
L16 Is_Null_Var(p)           L17  //         if (p == NULL)
L16 Is_Not_Null_Var(p)       L18
L17 Copy_Var_L(x, yn)        L20  //           x = yn;
                                                                    //         else {
L18 Set_Next_Null_L(p)       L19  //           p->n = NULL;
L19 Set_Next_L(p, yn)        L20  //           p->n = yn; }
L20 Copy_Var_L(p, yn)        L21  //         p = yn;
L21 Copy_Var_L(yn, t)        L8   //         yn = t;
                                                                    //         } else {
L22 Copy_Var_L(p, y)         L23  //           p = y;
L23 Copy_Var_L(y, yn)        L24  //           y = yn;
L24 Get_Next_L(yn, y)        L8   //           yn = y->n;
                                                                    //         }
                                                                    //       }
                                                                    //     }
L25 Set_Null_L(p)            L26  //     p = NULL;
L26 Set_Null_L(y)            L27  //     y = NULL;
L27 Set_Null_L(yn)           L28  //     yn = NULL;
L28 Set_Null_L(t)            exit //     t = NULL;
                                                                    //   return x;
                                                                    // }
exit Assert_Permutation_L(x, L0) exit2
exit Assert_Sorted_L(x)          exit2

%%

/////////////////////////////////////////////////////////////////////////
// Display structures that arise only at the following program locations.
L1, exit
