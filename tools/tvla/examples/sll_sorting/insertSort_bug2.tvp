///////
// Sets

%s PVar {x, r, pr, rn, pl, l} // Names of pointer variables.
%s HVar {x}  // Names of pointer variables used for taking heap snapshots.
%s HLoc {L0} // Names of program labels where snapshots of the heap are taken.

#include "predicates.tvp"

%%

#include "actions.tvp"

%%

////////////////////////////////////////////////////////////////////
// Transition system for an erroneous implementation of insert sort,
// which ignores the first element.

                                 // L insertSort_bug2(L x) {
L0  Copy_Reach_L(x, L0)     L1   // [ Take a snapshot of the heap to later         ]
                                 // [ verify that the output list is a permutation ]
                                 // [ of the list pointed by x.                    ]
L1  Is_Null_Var(x)          L2   //   if (x == NULL)
L1  Is_Not_Null_Var(x)      L2
                                 //     return NULL;
L2  Copy_Var_L(pr, x)       L3   //   pr = x;
L3  Get_Next_L(r, x)        L4   //   r = x->n;
L4  Is_Not_Null_Var(r)      L5   //   while (r != NULL) {
L4  Is_Null_Var(r)          L23
L5  Copy_Var_L(pl, x)       L6   //     pl = x;
L6  Get_Next_L(rn, r)       L7   //     rn = r->n;
L7  Get_Next_L(l, x)        L8   //     l = x->n;
L8  Is_Not_Eq_Var(l, r)     L9   //     while (l != r) {
L8  Is_Eq_Var(l, r)         L21
L9  Greater_Data_L(l, r)    L10  //       if (l->data > r->data) {
L9  Less_Equal_Data_L(l, r) L19
L10 Set_Next_Null_L(pr)     L11  //         pr->n = NULL;
L11 Set_Next_L(pr, rn)      L12  //         pr->n = rn;
L12 Set_Next_Null_L(r)      L13  //         r->n = NULL;
L13 Set_Next_L(r, l)        L14  //         r->n = l;
L14 Set_Next_Null_L(pl)     L17  //         pl->n = NULL;
L17 Set_Next_L(pl, r)       L18  //         pl->n = r;
L18 Copy_Var_L(r, pr)       L21  //         r = pr;
                                 //         break;
                                 //       }
L19 Copy_Var_L(pl, l)       L20  //       pl = l;
L20 Get_Next_L(l, l)        L8   //       l = l->n;
                                 //     }
L21 Copy_Var_L(pr, r)       L22  //     pr = r;
L22 Copy_Var_L(r, rn)       L4   //     r = rn;
                                 //   }
L23 Set_Null_L(l)           L24  //   l = NULL;
L24 Set_Null_L(r)           L25  //   r = NULL;
L25 Set_Null_L(pr)          L26  //   pr = NULL;
L26 Set_Null_L(pl)          L27  //   pl = NULL;
L27 Set_Null_L(rn)          exit //   rn = NULL;
                                 //   return x;
                                 // }
exit Assert_Permutation_L(x, L0) exit
exit Assert_Sorted_L(x)          exit2

%%

/////////////////////////////////////////////////////////////////////////
// Display structures that arise only at the following program locations.
L0, exit